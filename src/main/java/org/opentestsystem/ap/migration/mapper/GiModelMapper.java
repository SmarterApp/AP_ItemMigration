package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.IatMappingResult;
import org.opentestsystem.ap.migration.model.report.ImportResult;
import org.opentestsystem.ap.migration.util.ImportFileUtil;
import org.opentestsystem.ap.migration.util.ImportMapperUtil;
import org.opentestsystem.ap.migration.util.ImportXmlUtil;

import java.io.File;
import java.nio.file.Path;
import java.util.Date;

@Slf4j
@NoArgsConstructor
public class GiModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ImportResult importResult) {
        GiItem giItem = (GiItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Assign prompt
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                mappingResult = mapRichTextContent(content.getStem(), content.getApipAccessibility(), mappingResult);
                giItem.getCore().getEn().setPrompt(mappingResult.getContent());

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingResult = mapRichTextContent(getEsnContent(content.getStem()), content.getApipAccessibility(), mappingResult);
                giItem.getTranslations().getEsp().setIsRequired("true");
                giItem.getTranslations().getEsp().setProvided(true);
                giItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
            }

            // Process attachments
            processAttachments(content, giItem, itemSourceFullPath, itemDestinationFullPath, importResult);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, giItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        //Process Image Resources
        processImageResources(mappingResult, giItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        //Create GI Zip file
        processGiFiles(giItem, release, itemSourceFullPath, itemDestinationFullPath, importResult);

        return giItem;
    }

    private void processGiFiles(GiItem giItem,
                                ItemRelease release,
                                String sourceDir,
                                String destinationDir,
                                ImportResult importResult) {
        File gaxFile = ImportMapperUtil.getRendererSpecFileFromItemRelease(release, sourceDir);
        if (null != gaxFile) {
            copyGaxFiles(gaxFile, sourceDir, destinationDir, importResult);

            if (createGiZipFile(giItem, release, gaxFile, sourceDir, destinationDir, importResult)) {
                giItem.getCore().getEn().getContentZipFile().setFileName(ImportFileUtil.GI_SAMPLE_FILE_NAME);
                giItem.getCore().getEn().getContentZipFile().setUploadedDate(new Date());
            }
        }
    }

    private boolean createGiZipFile(GiItem giItem,
                                    ItemRelease release,
                                    File gaxFile,
                                    String sourceDir,
                                    String destDir,
                                    ImportResult importResult) {
        try {
            // Create temporary directory to store files that will be included in gi-sample.zip
            File tempGiSampleDir = ImportFileUtil.createGiSampleDirectory(sourceDir);

            File destinationDir = new File(destDir);

            // Copy gaxFile
            ImportFileUtil.copyFile(gaxFile, tempGiSampleDir, importResult);

            // Copy all files referenced in the gax file
            ImportXmlUtil.getFileSpecListFromFile(gaxFile).forEach(fileName -> {
                ImportFileUtil.copyFile(sourceDir + "/" + fileName,
                        tempGiSampleDir.toString(),
                        importResult);
            });

            // Import Qrx file if present in import directory
            File qrxFile = ImportMapperUtil.getMachineRubricFileFromItemRelease(release, sourceDir);
            if (null != qrxFile) {
                ImportFileUtil.copyFile(sourceDir + "/" + qrxFile.getName(),
                        tempGiSampleDir.toString() + "/" +
                                RepositoryUtil.getQrxFileName(giItem.getId(), ItemConstants.ItemVersion.ITEM_VERSION),
                        importResult);
                giItem.getCore().getScoring().setManagedByIat(false);
            }

            // Create zip from tempGiSampleDir contents and place it on destinationDir
            ImportFileUtil.zipDirectory(tempGiSampleDir.toString(),
                    destinationDir.toString(),
                    ImportFileUtil.GI_SAMPLE_FILE_NAME);

            // Delete tempSampleDir
            ImportFileUtil.deleteDirectory(tempGiSampleDir);

            return true;
        } catch (Exception ex) {
            String message = String.format("Unable to create GiZipFile in: %s", sourceDir);
            importResult.getErrorMessages().add(message);
            log.error(message, ex);
            return false;
        }
    }

    private void copyGaxFiles(File gaxFile,
                              String sourceDir,
                              String destinationDir,
                              ImportResult importResult) {
        final Document gaxDoc = Jsoup.parse(ImportFileUtil.fileToString(gaxFile),
                "", Parser.xmlParser());

        gaxDoc.getElementsByTag("Filespec").forEach(filespec -> {
            ImportFileUtil.copyFile(sourceDir + "/" + filespec.text(),
                    destinationDir + "/" + filespec.text(),
                    importResult);
        });

        gaxDoc.getElementsByTag("Image").forEach(image -> {
            ImportFileUtil.copyFile(sourceDir + "/" + image.attr("src"),
                    destinationDir + "/" + image.attr("src"),
                    importResult);
        });
    }

}
