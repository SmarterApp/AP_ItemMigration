package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.model.IatMappingResult;
import org.opentestsystem.ap.migration.model.ItemProps;
import org.opentestsystem.ap.migration.model.report.ImportResult;
import org.opentestsystem.ap.migration.util.ImportFileUtil;

import java.nio.file.Path;

@NoArgsConstructor
public class TutModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ImportResult importResult) {
        TutItem tutItem = (TutItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                mappingResult = mapRichTextContent(content.getStem(), content.getApipAccessibility(), mappingResult);
                tutItem.getCore().getEn().setContent(mappingResult.getContent());
                tutItem.getCore().getEn().setManagedByIat(false);
            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingResult = mapRichTextContent(getEsnContent(content.getStem()), content.getApipAccessibility(), mappingResult);
                tutItem.getTranslations().getEsp().setIsRequired("true");
                tutItem.getTranslations().getEsp().setProvided(true);
                tutItem.getTranslations().getEsp().setContent(mappingResult.getContent());
                tutItem.getTranslations().getEsp().setManagedByIat(false);
            }
        }

        //Process Audio Resources
        processAudioResources(mappingResult, tutItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        //Process Image Resources
        processImageResources(mappingResult, tutItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        //Process Sources
        mappingResult.getFileSources().forEach(source -> {
            ImportFileUtil.copyFile(itemSourceFullPath + "/" + source,
                    itemDestinationFullPath + "/" + source,
                    importResult);
        });

        return tutItem;
    }

    @Override
    Item mapMetadata(Item item, SmarterAppMetadata metadata) {
        return item;
    }

    @Override
    Item mapAssociatedPassage(Item item, ItemProps itemProps) {
        return item;
    }

    @Override
    Item mapTutorial(Item item, ItemProps itemProps) {
        return item;
    }
}
