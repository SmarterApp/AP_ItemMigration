package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.ItemMappingResult;
import org.opentestsystem.ap.migration.util.MigrationMapperUtil;

import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

@NoArgsConstructor
public class EbsrModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ItemMappingResult mappingResult) {
        EbsrItem ebsrItem = (EbsrItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        List<String> answerI = Arrays.asList(
                MigrationMapperUtil.getAttributeValue(release, "itm_att_Answer Key").split(","));
        List<String> answerII = Arrays.asList(
                MigrationMapperUtil.getAttributeValue(release, "itm_att_Answer Key (Part II)").split(","));

        ItemMappingProperties mappingProperties = new ItemMappingProperties();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                // Call main IAT mapping function
                mappingProperties = mapQtiContentForChoiceInteraction(content, mappingProperties);

                ebsrItem.getCore().getEn().setPrompt(mappingProperties.getContent());
                ebsrItem.getCore().getEn().setPartAPrompt(mappingProperties.getPartAPrompt());
                AtomicInteger indexI = new AtomicInteger(0);
                mappingProperties.getPartAOptions().forEach(option -> {
                    String currentVal = MigrationMapperUtil.getCapitalLetterFromInt(indexI.get());
                    ebsrItem.getCore().getEn().getPartAOptions()
                            .add(ItemOption.newItemOption(option, "", answerI.contains(currentVal), ""));
                    indexI.getAndIncrement();
                });

                ebsrItem.getCore().getEn().setPartBPrompt(mappingProperties.getPartBPrompt());
                AtomicInteger indexII = new AtomicInteger(0);
                mappingProperties.getPartBOptions().forEach(option -> {
                    String currentVal = MigrationMapperUtil.getCapitalLetterFromInt(indexII.get());
                    ebsrItem.getCore().getEn().getPartBOptions()
                            .add(ItemOption.newItemOption(option, "", answerII.contains(currentVal), ""));
                    indexII.getAndIncrement();
                });

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                // Call main IAT mapping function
                mappingProperties = mapQtiContentForChoiceInteraction(content, mappingProperties);
                ebsrItem.getTranslations().getEsp().setIsRequired("true");
                ebsrItem.getTranslations().getEsp().setProvided(true);
                ebsrItem.getTranslations().getEsp().setPrompt(mappingProperties.getContent());
                ebsrItem.getTranslations().getEsp().setPartAPrompt(mappingProperties.getPartAPrompt());
                AtomicInteger indexI = new AtomicInteger(0);
                mappingProperties.getPartAOptions().forEach(option -> {
                    String currentVal = MigrationMapperUtil.getCapitalLetterFromInt(indexI.get());
                    ebsrItem.getTranslations().getEsp().getPartAOptions()
                            .add(ItemOption.newItemOption(option, "", answerI.contains(currentVal), ""));
                    indexI.getAndIncrement();
                });

                ebsrItem.getTranslations().getEsp().setPartBPrompt(mappingProperties.getPartBPrompt());
                AtomicInteger indexII = new AtomicInteger(0);
                mappingProperties.getPartBOptions().forEach(option -> {
                    String currentVal = MigrationMapperUtil.getCapitalLetterFromInt(indexII.get());
                    ebsrItem.getTranslations().getEsp().getPartBOptions()
                            .add(ItemOption.newItemOption(option, "", answerII.contains(currentVal), ""));
                    indexII.getAndIncrement();
                });

            }

            if (answerII.size() == 1) {
                ebsrItem.getCore().getEn().setPartBType("Multiple Choice");
            } else {
                ebsrItem.getCore().getEn().setPartBType("Multiple Select");
            }

            // Process attachments
            processAttachments(content, ebsrItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);
        }

        //Process Image Resources
        processImageResources(mappingProperties, ebsrItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        // Import Qrx file
        processMachineRubric(ebsrItem, release.getItem(), itemSourceFullPath, itemDestinationFullPath, mappingResult);

        return ebsrItem;
    }

}
