package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.ItemMappingResult;

import java.nio.file.Path;

@NoArgsConstructor
public class EqModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ItemMappingResult mappingResult) {
        EqItem eqItem = (EqItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        ItemMappingProperties mappingProperties = new ItemMappingProperties();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Assign prompt
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                mappingProperties = mapRichTextContent(content.getLanguage(), content.getStem(), content.getApipAccessibility(), mappingProperties);
                eqItem.getCore().getEn().setPrompt(mappingProperties.getContent());
                this.setTextToSpeechFlags(eqItem, mappingProperties);
            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingProperties = mapRichTextContent(content.getLanguage(), content.getStem(), content.getApipAccessibility(), mappingProperties);
                eqItem.getTranslations().getEsp().setIsRequired("true");
                eqItem.getTranslations().getEsp().setProvided(true);
                eqItem.getTranslations().getEsp().setPrompt(mappingProperties.getContent());
            }

            // Process attachments
            processAttachments(content, eqItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);
        }

        // Process Image Resources
        processImageResources(mappingProperties, eqItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        // Import Qrx file
        processMachineRubric(eqItem, release.getItem(), itemSourceFullPath, itemDestinationFullPath, mappingResult);

        //Import Eax file
        processRendererSpec(eqItem, release, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        return eqItem;
    }

}