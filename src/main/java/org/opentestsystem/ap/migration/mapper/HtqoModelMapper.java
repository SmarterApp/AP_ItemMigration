package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.ItemMappingResult;

import java.nio.file.Path;
import java.util.concurrent.atomic.AtomicInteger;

@NoArgsConstructor
public class HtqoModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ItemMappingResult mappingResult) {
        HtqoItem htqoItem = (HtqoItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        htqoItem.getCore().setHtqType("orderable");

        ItemMappingProperties mappingProperties = new ItemMappingProperties();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                // Call main IAT mapping function
                mappingProperties = mapHtqoContent(content, mappingProperties);

                htqoItem.getCore().getEn().setPrompt(
                        mappingProperties.getContent());
                htqoItem.getCore().getEn().getHtqOrderable().setOrderableStrings(
                        mappingProperties.getOrderableStrings());
                htqoItem.getCore().getEn().getHtqOrderable().setOrderableStringsCorrectOrder(
                        mappingProperties.getOrderableStringsCorrectOrder());

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingProperties = mapHtqoContent(content, mappingProperties);
                htqoItem.getTranslations().getEsp().setIsRequired("true");
                htqoItem.getTranslations().getEsp().setProvided(true);
                htqoItem.getTranslations().getEsp().setPrompt(mappingProperties.getContent());
                htqoItem.getCore().getEn().getHtqOrderable().setOrderableStrings(
                        mappingProperties.getOrderableStrings());
            }

            // Process attachments
            processAttachments(content, htqoItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);
        }

        //Process Image Resources
        processImageResources(mappingProperties, htqoItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        // Import Qrx file
        processMachineRubric(htqoItem, release.getItem(), itemSourceFullPath, itemDestinationFullPath, mappingResult);

        return htqoItem;
    }

    /**
     * @param content
     * @param mappingProperties
     * @return
     */
    private ItemMappingProperties mapHtqoContent(ItemRelease.Item.Content content,
                                                 ItemMappingProperties mappingProperties) {
        final Document doc = Jsoup.parse(content.getStem(), "", Parser.xmlParser());

        StringBuilder prompt = new StringBuilder();
        for (Element p : doc.getElementsByTag("p")) {
            prompt.append(p.outerHtml());
        }
        mappingProperties.setContent(
                mapRichTextContent(content.getLanguage(), prompt.toString(), content.getApipAccessibility(), mappingProperties).getContent());

        AtomicInteger index = new AtomicInteger(0);
        doc.getElementsByTag("li").forEach(li -> {
            mappingProperties.getOrderableStrings().add(
                    mapRichTextContent(content.getLanguage(), li.html(), content.getApipAccessibility(), mappingProperties).getContent());
            mappingProperties.getOrderableStringsCorrectOrder().add(index.getAndIncrement());
        });

        return mappingProperties;
    }
}
