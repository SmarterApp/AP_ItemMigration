package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.IatMappingResult;
import org.opentestsystem.ap.migration.model.report.ImportResult;

import java.nio.file.Path;

@NoArgsConstructor
public class HtqoModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ImportResult importResult) {
        HtqoItem htqoItem = (HtqoItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        htqoItem.getCore().setHtqType("orderable");

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                // Call main IAT mapping function
                mappingResult = mapHtqoContent(content, mappingResult);

                htqoItem.getCore().getEn().setPrompt(
                        mappingResult.getContent());
                htqoItem.getCore().getEn().getHtqOrderable().setOrderableStrings(
                        mappingResult.getOrderableStrings());
                htqoItem.getCore().getEn().getHtqOrderable().setOrderableStringsCorrectOrder(
                        mappingResult.getOrderableStringsCorrectOrder());

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingResult = mapHtqsContent(content, mappingResult);
                htqoItem.getTranslations().getEsp().setIsRequired("true");
                htqoItem.getTranslations().getEsp().setProvided(true);
                htqoItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
                htqoItem.getCore().getEn().getHtqOrderable().setOrderableStrings(
                        mappingResult.getOrderableStrings());
            }

            // Process attachments
            processAttachments(content, htqoItem, itemSourceFullPath, itemDestinationFullPath, importResult);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, htqoItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        //Process Image Resources
        processImageResources(mappingResult, htqoItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        return htqoItem;
    }
}
