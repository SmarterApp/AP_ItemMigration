package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.ItemMappingResult;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

@NoArgsConstructor
public class TiModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ItemMappingResult mappingResult) {
        TiItem tiItem = (TiItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        ItemMappingProperties mappingProperties = new ItemMappingProperties();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                mappingProperties = mapTableInteractionContent(content, mappingProperties, ItemConstants.ItemLanguage.LANG_ENU);
                tiItem.getCore().getEn().setPrompt(mappingProperties.getContent());

                tiItem.getCore().getEn().getTable().getColumns().clear();
                mappingProperties.getHeaders().forEach(header ->
                        tiItem.getCore().getEn().getTable().getColumns()
                                .add(new Table.Column(header))
                );

                tiItem.getCore().getEn().getTable().getRows().clear();
                mappingProperties.getRows().forEach(row -> {
                    List<String> values = (ArrayList<String>) row;
                    tiItem.getCore().getEn().getTable().getRows()
                            .add(processMappingRow(values));
                });

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingProperties = mapTableInteractionContent(content, mappingProperties, ItemConstants.ItemLanguage.LANG_ESN);
                tiItem.getTranslations().getEsp().setIsRequired("true");
                tiItem.getTranslations().getEsp().setProvided(true);
                tiItem.getTranslations().getEsp().setPrompt(mappingProperties.getContent());

                tiItem.getTranslations().getEsp().getTable().getColumns().clear();
                mappingProperties.getHeaders().forEach(header ->
                        tiItem.getTranslations().getEsp().getTable().getColumns()
                                .add(new Table.Column(header))
                );

                tiItem.getTranslations().getEsp().getTable().getRows().clear();
                mappingProperties.getRows().forEach(row -> {
                    List<String> values = (ArrayList<String>) row;
                    tiItem.getTranslations().getEsp().getTable().getRows()
                            .add(processMappingRow(values));
                });

            }
            // Process attachments
            processAttachments(content, tiItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);
        }

        //Process Image Resources
        processImageResources(mappingProperties, tiItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        // Import Qrx file
        processMachineRubric(tiItem, release, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        return tiItem;
    }

    private Table.Row processMappingRow(List<String> values) {
        Table.Row iatRow = new Table.Row();
        values.forEach(value -> {
            String cellType = "label";
            if (value.contains("data-its-validationrule")) {
                cellType = "answer";
            } else if (StringUtils.isNumeric(value)) {
                cellType = "answerNumeric";
            }
            Table.Cell cell = new Table.Cell(cellType, value);
            iatRow.addCell(cell);
        });

        return iatRow;
    }

    private ItemMappingProperties mapTableInteractionContent(final ItemRelease.Item.Content content,
                                                             final ItemMappingProperties mappingProperties,
                                                             final String languageCode) {
        final Document doc = Jsoup.parse(content.getStem(), "", Parser.xmlParser());

        Elements tableItem = doc.getElementsByClass("tableItem");
        if (tableItem.size() == 1) {
            Element tiTable = tableItem.get(0);

            mappingProperties.getHeaders().clear();
            tiTable.getElementsByTag("thead").forEach(thead -> {
                thead.getElementsByTag("th").forEach(th -> {
                    String mappedHeader = mapRichTextContent(languageCode, th.html(), content.getApipAccessibility(), mappingProperties).getContent();
                    mappingProperties.getHeaders().add(mappedHeader);
                });
            });

            mappingProperties.getRows().clear();
            tiTable.getElementsByTag("tbody").forEach(tbody -> {
                tbody.getElementsByTag("tr").forEach(tr -> {
                    List<String> values = new ArrayList<>();
                    tr.getElementsByTag("td").forEach(td -> {
                        String mappedCell = mapRichTextContent(languageCode, td.html(), content.getApipAccessibility(), mappingProperties).getContent();
                        values.add(mappedCell);
                    });
                    mappingProperties.getRows().add(values);
                });
            });
        }

        //Remove the table element that contains the table interaction
        doc.select("table.tableItem").remove();

        String mappedContent = mapRichTextContent(languageCode, doc.html(), content.getApipAccessibility(), mappingProperties).getContent();
        mappingProperties.setContent(mappedContent);

        return mappingProperties;
    }

    private ItemMappingProperties mapRichTextContent(final String languageCode,
                                      final String content,
                                      final ItemRelease.Item.Content.ApipAccessibility apipAccessibility,
                                      final ItemMappingProperties mappingProperties) {
        final boolean isSpanish = ItemConstants.ItemLanguage.LANG_ESN.equals(languageCode);
        final String mappedContent = isSpanish ? getEsnContent(content) : content;
        return mapRichTextContent(mappedContent, apipAccessibility, mappingProperties);
    }
}