package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.IatMappingResult;
import org.opentestsystem.ap.migration.model.report.ImportResult;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

@NoArgsConstructor
public class TiModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ImportResult importResult) {
        TiItem tiItem = (TiItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                mappingResult = mapTableInteractionContent(content, mappingResult);
                tiItem.getCore().getEn().setPrompt(mappingResult.getContent());

                tiItem.getCore().getEn().getTable().getColumns().clear();
                mappingResult.getHeaders().forEach(header ->
                        tiItem.getCore().getEn().getTable().getColumns()
                                .add(new Table.Column(header))
                );

                tiItem.getCore().getEn().getTable().getRows().clear();
                mappingResult.getRows().forEach(row -> {
                    List<String> values = (ArrayList<String>) row;
                    tiItem.getCore().getEn().getTable().getRows()
                            .add(processMappingRow(values));
                });

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingResult = mapTableInteractionContent(content, mappingResult);
                tiItem.getTranslations().getEsp().setIsRequired("true");
                tiItem.getTranslations().getEsp().setProvided(true);
                tiItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());

                tiItem.getTranslations().getEsp().getTable().getColumns().clear();
                mappingResult.getHeaders().forEach(header ->
                        tiItem.getTranslations().getEsp().getTable().getColumns()
                                .add(new Table.Column(header))
                );

                tiItem.getTranslations().getEsp().getTable().getRows().clear();
                mappingResult.getRows().forEach(row -> {
                    List<String> values = (ArrayList<String>) row;
                    tiItem.getTranslations().getEsp().getTable().getRows()
                            .add(processMappingRow(values));
                });

            }
            // Process attachments
            processAttachments(content, tiItem, itemSourceFullPath, itemDestinationFullPath, importResult);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, tiItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        //Process Image Resources
        processImageResources(mappingResult, tiItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        // Import Qrx file
        processMachineRubric(tiItem, release, itemSourceFullPath, itemDestinationFullPath, importResult);

        return tiItem;
    }

    private Table.Row processMappingRow(List<String> values) {
        Table.Row iatRow = new Table.Row();
        values.forEach(value -> {
            String cellType = "label";
            if (value.contains("data-its-validationrule")) {
                cellType = "answer";
            } else if (StringUtils.isNumeric(value)) {
                cellType = "answerNumeric";
            }
            Table.Cell cell = new Table.Cell(cellType, value);
            iatRow.addCell(cell);
        });

        return iatRow;
    }

}