package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.ItemMappingResult;
import org.opentestsystem.ap.migration.util.MigrationMapperUtil;

import java.nio.file.Path;
import java.util.concurrent.atomic.AtomicInteger;

@NoArgsConstructor
public class McModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ItemMappingResult mappingResult) {
        McItem mcItem = (McItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        String answerValue = MigrationMapperUtil.getAttributeValue(release, "itm_att_Answer Key");

        ItemMappingProperties mappingProperties = new ItemMappingProperties();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                mappingProperties = mapRichTextContent(content.getStem(), content.getApipAccessibility(), mappingProperties);
                mcItem.getCore().getEn().setPrompt(mappingProperties.getContent());
                AtomicInteger index = new AtomicInteger(0);
                //Map Options
                for (ItemRelease.Item.Content.Optionlist.Option option : content.getOptionlist().getOption()) {
                    String optionValue = mapRichTextContent(option.getVal(), content.getApipAccessibility(), mappingProperties).getContent();
                    String rationaleValue;
                    if (content.getRationaleoptlist().getRationale().size() > 0) {
                        rationaleValue = mapRichTextContent(content.getRationaleoptlist().getRationale().get(index.get()).getVal(),
                                content.getApipAccessibility(), mappingProperties).getContent();
                    } else {
                        rationaleValue = "";
                    }
                    mcItem.getCore().getEn().getOptions().add(
                            ItemOption.newItemOption(optionValue, "",
                                    answerValue.equals(MigrationMapperUtil.getCapitalLetterFromInt(index.get())), rationaleValue));
                    index.getAndIncrement();
                }
            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingProperties = mapRichTextContent(getEsnContent(content.getStem()), content.getApipAccessibility(), mappingProperties);
                mcItem.getTranslations().getEsp().setIsRequired("true");
                mcItem.getTranslations().getEsp().setProvided(true);
                mcItem.getTranslations().getEsp().setPrompt(mappingProperties.getContent());
                AtomicInteger index = new AtomicInteger(0);
                //Map Options Rationale
                for (ItemRelease.Item.Content.Optionlist.Option option : content.getOptionlist().getOption()) {
                    String optionValue = mapRichTextContent(option.getVal(), content.getApipAccessibility(), mappingProperties).getContent();
                    String rationaleValue;
                    if (content.getRationaleoptlist().getRationale().size() > 0) {
                        rationaleValue = mapRichTextContent(content.getRationaleoptlist().getRationale().get(index.get()).getVal(),
                                content.getApipAccessibility(), mappingProperties).getContent();
                    } else {
                        rationaleValue = "";
                    }
                    mcItem.getTranslations().getEsp().getOptions().add(
                            ItemOption.newItemOption(optionValue, "",
                                    answerValue.equals(MigrationMapperUtil.getCapitalLetterFromInt(index.get())), rationaleValue));
                    index.getAndIncrement();
                }
            }

            // Process attachments
            processAttachments(content, mcItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);
        }

        //Process Audio Resources
        processAudioResources(mappingProperties, mcItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        //Process Image Resources
        processImageResources(mappingProperties, mcItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        return mcItem;
    }
}
