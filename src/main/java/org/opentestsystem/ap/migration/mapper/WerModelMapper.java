package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.common.model.content.WerItemContent;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.ItemMappingResult;

import javax.xml.bind.JAXBElement;
import java.nio.file.Path;
import java.util.function.Consumer;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemLanguage.LANG_ENU;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemLanguage.LANG_ESN;

@NoArgsConstructor
public class WerModelMapper extends IatModelMapper {


    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String sourcePath,
                    ItemMappingResult mappingResult) {
        WerItem werItem = (WerItem) item;

        String destinationPath = itemLocalPath.toString();

        ItemMappingProperties mappingProperties = new ItemMappingProperties();

        release.getItem().getContent().stream().forEach(
                mapContent(werItem, mappingProperties, sourcePath, destinationPath, mappingResult)
        );

        //Process Image Resources
        processImageResources(mappingProperties, werItem, sourcePath, destinationPath, mappingResult);

        return werItem;
    }

    private Consumer<ItemRelease.Item.Content> mapContent(WerItem werItem,
                                                          ItemMappingProperties mappingResult,
                                                          String sourcePath,
                                                          String destinationPath,
                                                          ItemMappingResult importResult) {
        return content -> {
            if (this.isEnglish(content)) {
                mapRichTextContent(content.getStem(), content.getApipAccessibility(), mappingResult);
                werItem.getCore().getEn().setPrompt(mappingResult.getContent());
                this.mapRubricList(werItem.getCore().getEn(), content, mappingResult);

            } else if (this.isSpanish(content)) {
                mapRichTextContent(getEsnContent(content.getStem()), content.getApipAccessibility(), mappingResult);
                werItem.getTranslations().getEsp().setIsRequired("true");
                werItem.getTranslations().getEsp().setProvided(true);
                werItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
                this.mapRubricList(werItem.getTranslations().getEsp(), content, mappingResult);
            }
            // Process attachments
            processAttachments(content, werItem, sourcePath, destinationPath, importResult);
        };
    }

    private void mapRubricList(WerItemContent werContent,
                               ItemRelease.Item.Content content,
                               ItemMappingProperties mappingProperties) {
        ItemRelease.Item.Content.Rubriclist rubriclist = content.getRubriclist();
        if (rubriclist != null) {
            rubriclist.getContent().forEach(element -> {
                JAXBElement jaxbElement = (JAXBElement) element;
                if (this.isRubric(jaxbElement)) {
                    this.appendRubric(werContent, jaxbElement, content.getApipAccessibility(), mappingProperties);
                } else if (this.isExemplar(jaxbElement)) {
                    this.appendExemplarResponses(werContent, jaxbElement, content.getApipAccessibility(), mappingProperties);
                }
            });
        }
    }

    private void appendRubric(WerItemContent werContent,
                              JAXBElement jaxbElement,
                              ItemRelease.Item.Content.ApipAccessibility apipAccessibility,
                              ItemMappingProperties mappingProperties) {
        ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();

        if (isNotBlank(rubric.getVal())) {
            String curRubric = defaultString(werContent.getRubric());

            String newRubric = String.format("%s %s %s", curRubric, EMPTY_PARAGRAPH_TAG, rubric.getVal());

            if (isBlank(curRubric)) {
                newRubric = rubric.getVal();
            }

            newRubric = mapRichTextContent(newRubric,
                    apipAccessibility, mappingProperties).getContent();
            werContent.setRubric(newRubric);
        }
    }

    private void appendExemplarResponses(WerItemContent werContent,
                                         JAXBElement jaxbElement,
                                         ItemRelease.Item.Content.ApipAccessibility apipAccessibility,
                                         ItemMappingProperties mappingProperties) {
        ItemRelease.Item.Content.Rubriclist.Samplelist samplelist =
                (ItemRelease.Item.Content.Rubriclist.Samplelist) jaxbElement.getValue();

        samplelist.getSample().forEach(sample -> {
            if (isNotBlank(sample.getSamplecontent())) {
                String iatExemplar = mapRichTextContent(sample.getSamplecontent(),
                        apipAccessibility, mappingProperties).getContent();
                werContent.getExemplarResponses().add(iatExemplar);
            }
        });
    }

    private boolean isRubric(JAXBElement jaxbElement) {
        return jaxbElement.getName().toString().equals("rubric");
    }

    private boolean isExemplar(JAXBElement jaxbElement) {
        return jaxbElement.getName().toString().equals("samplelist");
    }

    private boolean isEnglish(ItemRelease.Item.Content content) {
        return content.getLanguage().equals(LANG_ENU);
    }

    private boolean isSpanish(ItemRelease.Item.Content content) {
        return content.getLanguage().equals(LANG_ESN);
    }
}
