package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.ItemMappingResult;

import java.nio.file.Path;

@NoArgsConstructor
public class HtqsModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ItemMappingResult mappingResult) {
        HtqsItem htqsItem = (HtqsItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        htqsItem.getCore().setHtqType("selectable");

        ItemMappingProperties mappingProperties = new ItemMappingProperties();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                // Call main IAT mapping function
                mappingProperties = mapHtqsContent(content, mappingProperties);

                htqsItem.getCore().getEn().setPrompt(mappingProperties.getContent());
                htqsItem.getCore().getEn().getHtqSelectable()
                        .setInteractiveText(mappingProperties.getInteractiveText());

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingProperties = mapHtqsContent(content, mappingProperties);
                htqsItem.getTranslations().getEsp().setIsRequired("true");
                htqsItem.getTranslations().getEsp().setProvided(true);
                htqsItem.getTranslations().getEsp().setPrompt(mappingProperties.getContent());
                htqsItem.getTranslations().getEsp().getHtqSelectable()
                        .setInteractiveText(mappingProperties.getInteractiveText());
            }

            // Process attachments
            processAttachments(content, htqsItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);
        }

        //Process Image Resources
        processImageResources(mappingProperties, htqsItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        return htqsItem;
    }
}
