package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.IatMappingResult;
import org.opentestsystem.ap.migration.model.report.ImportResult;
import org.opentestsystem.ap.migration.util.ImportMapperUtil;

import java.nio.file.Path;

@Slf4j
@NoArgsConstructor
public class MiModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ImportResult importResult) {
        MiItem miItem = (MiItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                // Call main IAT mapping function
                mappingResult = mapQtiContentForMatchInteraction(content, item.getId(), itemSourceFullPath, mappingResult);
                miItem.getCore().getEn().setPrompt(mappingResult.getContent());

                miItem.getCore().getEn().getTable().getColumns().clear();
                miItem.getCore().getEn().getTable().getColumns().add(new Table.Column(""));
                mappingResult.getHeaders().forEach(header -> {
                    miItem.getCore().getEn().getTable().getColumns().add(new Table.Column(header));
                });

                int colCount = mappingResult.getHeaders().size() + 1;
                miItem.getCore().getEn().getTable().getRows().clear();
                mappingResult.getCells().forEach(mapCell -> {
                    Table.Row tableRow = new Table.Row();
                    for (int i=0; i < colCount; i++) {
                        Table.Cell cell;
                        if (i == 0) {
                            cell = new Table.Cell("label", mapCell);
                        } else {
                            cell = new Table.Cell("answer", false);
                        }
                        tableRow.addCell(cell);
                    }
                    miItem.getCore().getEn().getTable().getRows().add(tableRow);
                });

                mappingResult.getCorrectResponses().forEach(response -> {
                    try {
                        if (response.contains(" ")) {
                            String[] respValues = response.split(" ");
                            String row = respValues[0];
                            String col = respValues[1];

                            int rowIndex;
                            int colIndex;
                            if (StringUtils.isNumeric(row)) {
                                rowIndex = Integer.parseInt(row) - 1;
                                colIndex = ImportMapperUtil.getIntFromLowerCaseLetter(col.charAt(0));
                                miItem.getCore().getEn().getTable().getRows()
                                        .get(rowIndex).getCells().get(colIndex).setValue(true);
                            }
                        } else {
                            String message = String.format("Unexpected correctResponse value %s. Unable to set correct answers for item: %s",
                                    response, item.getId());
                            importResult.getErrorMessages().add(message);
                            log.warn(message);
                        }
                    } catch (Exception ex) {
                        String message = String.format("Unexpected error. Unable to set correct answers for item: %s", item.getId());
                        importResult.getErrorMessages().add(message);
                        log.warn(message);
                    }
                });

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                // Call main IAT mapping function
                mappingResult = mapQtiContentForMatchInteraction(content, item.getId(), itemSourceFullPath, mappingResult);
                miItem.getTranslations().getEsp().setIsRequired("true");
                miItem.getTranslations().getEsp().setProvided(true);
                miItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());

                miItem.getTranslations().getEsp().getTable().getColumns().clear();
                miItem.getTranslations().getEsp().getTable().getColumns().add(new Table.Column(""));
                mappingResult.getHeaders().forEach(header -> {
                    miItem.getTranslations().getEsp().getTable().getColumns().add(new Table.Column(header));
                });

                int colCount = mappingResult.getHeaders().size() + 1;
                miItem.getTranslations().getEsp().getTable().getRows().clear();
                mappingResult.getCells().forEach(mapCell -> {
                    Table.Row tableRow = new Table.Row();
                    for (int i=0; i < colCount; i++) {
                        Table.Cell cell;
                        if (i == 0) {
                            cell = new Table.Cell("label", mapCell);
                        } else {
                            cell = new Table.Cell("answer", false);
                        }
                        tableRow.addCell(cell);
                    }
                    miItem.getTranslations().getEsp().getTable().getRows().add(tableRow);
                });
            }
            // Process attachments
            processAttachments(content, miItem, itemSourceFullPath, itemDestinationFullPath, importResult);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, miItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        //Process Image Resources
        processImageResources(mappingResult, miItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        return miItem;
    }
}
