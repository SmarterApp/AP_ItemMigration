package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.ItemMappingResult;
import org.opentestsystem.ap.migration.util.MigrationMapperUtil;

import java.nio.file.Path;

@Slf4j
@NoArgsConstructor
public class MiModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ItemMappingResult mappingResult) {
        MiItem miItem = (MiItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        ItemMappingProperties mappingProperties = new ItemMappingProperties();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                // Call main IAT mapping function
                mappingProperties = mapQtiContentForMatchInteraction(content, item.getId(), itemSourceFullPath,
                        mappingProperties);
                miItem.getCore().getEn().setPrompt(mappingProperties.getContent());

                miItem.getCore().getEn().getTable().getColumns().clear();
                miItem.getCore().getEn().getTable().getColumns().add(new Table.Column(""));
                mappingProperties.getHeaders().forEach(header -> {
                    miItem.getCore().getEn().getTable().getColumns().add(new Table.Column(header));
                });

                int colCount = mappingProperties.getHeaders().size() + 1;
                miItem.getCore().getEn().getTable().getRows().clear();
                mappingProperties.getCells().forEach(mapCell -> {
                    Table.Row tableRow = new Table.Row();
                    for (int i = 0; i < colCount; i++) {
                        Table.Cell cell;
                        if (i == 0) {
                            cell = new Table.Cell("label", mapCell);
                        } else {
                            cell = new Table.Cell("answer", false);
                        }
                        tableRow.addCell(cell);
                    }
                    miItem.getCore().getEn().getTable().getRows().add(tableRow);
                });

                mappingProperties.getCorrectResponses().forEach(response -> {
                    try {
                        if (response.contains(" ")) {
                            String[] respValues = response.split(" ");
                            String row = respValues[0];
                            String col = respValues[1];

                            int rowIndex;
                            int colIndex;
                            if (StringUtils.isNumeric(row)) {
                                rowIndex = Integer.parseInt(row) - 1;
                                colIndex = MigrationMapperUtil.getIntFromLowerCaseLetter(col.charAt(0));
                                miItem.getCore().getEn().getTable().getRows()
                                        .get(rowIndex).getCells().get(colIndex).setValue(true);
                            }
                        } else {
                            String message = String
                                    .format("Unexpected correctResponse value %s. Unable to set correct answers for item: %s",
                                            response, item.getId());
                            mappingResult.getErrorMessages().add(message);
                            log.warn(message);
                        }
                    } catch (Exception ex) {
                        String message = String
                                .format("Unexpected error. Unable to set correct answers for item: %s", item.getId());
                        mappingResult.getErrorMessages().add(message);
                        log.warn(message);
                    }
                });
                this.setTextToSpeechFlags(miItem, mappingProperties);
            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                // Call main IAT mapping function
                mappingProperties = mapQtiContentForMatchInteraction(content, item.getId(), itemSourceFullPath,
                        mappingProperties);
                miItem.getTranslations().getEsp().setIsRequired("true");
                miItem.getTranslations().getEsp().setProvided(true);
                miItem.getTranslations().getEsp().setPrompt(mappingProperties.getContent());

                miItem.getTranslations().getEsp().getTable().getColumns().clear();
                miItem.getTranslations().getEsp().getTable().getColumns().add(new Table.Column(""));
                mappingProperties.getHeaders().forEach(header -> {
                    miItem.getTranslations().getEsp().getTable().getColumns().add(new Table.Column(header));
                });

                int colCount = mappingProperties.getHeaders().size() + 1;
                miItem.getTranslations().getEsp().getTable().getRows().clear();
                mappingProperties.getCells().forEach(mapCell -> {
                    Table.Row tableRow = new Table.Row();
                    for (int i = 0; i < colCount; i++) {
                        Table.Cell cell;
                        if (i == 0) {
                            cell = new Table.Cell("label", mapCell);
                        } else {
                            cell = new Table.Cell("answer", false);
                        }
                        tableRow.addCell(cell);
                    }
                    miItem.getTranslations().getEsp().getTable().getRows().add(tableRow);
                });
            }
            // Process attachments
            processAttachments(content, miItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);
        }

        //Process Image Resources
        processImageResources(mappingProperties, miItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        // Import Qrx file
        processMachineRubric(miItem, release.getItem(), itemSourceFullPath, itemDestinationFullPath, mappingResult);

        return miItem;
    }

    /**
     * @param content
     * @param mappingProperties
     * @return
     */
    private ItemMappingProperties mapQtiContentForMatchInteraction(ItemRelease.Item.Content content,
                                                                   String itemId,
                                                                   String itemSourceFullPath,
                                                                   ItemMappingProperties mappingProperties) {
        final Document doc = Jsoup.parse(content.getQti().getValue(), "", Parser.xmlParser());

        mappingProperties.getCells().clear();
        mappingProperties.getHeaders().clear();
        doc.getElementsByTag("simpleMatchSet").forEach(sms -> {
            sms.getElementsByTag("simpleAssociableChoice").forEach(sac -> {
                if (StringUtils.isNumeric(sac.attr("identifier"))) {
                    mappingProperties.getCells()
                            .add(mapRichTextContent(content.getLanguage(), sac.html(), content.getApipAccessibility(),
                                    mappingProperties).getContent());
                } else {
                    mappingProperties.getHeaders()
                            .add(mapRichTextContent(content.getLanguage(), sac.html(), content.getApipAccessibility(),
                                    mappingProperties).getContent());
                }
            });
        });

        mappingProperties.setCorrectResponses(getCorrectResponsesFromQrx(itemId, itemSourceFullPath, "RESPONSE"));

        mapRichTextContent(content.getLanguage(), content.getStem(), content.getApipAccessibility(), mappingProperties);

        return mappingProperties;
    }

}
