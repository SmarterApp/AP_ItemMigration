package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.IatMappingResult;
import org.opentestsystem.ap.migration.model.report.ImportResult;

import javax.xml.bind.JAXBElement;
import java.io.Serializable;
import java.nio.file.Path;

@NoArgsConstructor
public class SaModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ImportResult importResult) {
        SaItem saItem = (SaItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {

            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                // Call main IAT mapping function
                mappingResult = mapRichTextContent(content.getStem(), content.getApipAccessibility(), mappingResult);

                saItem.getCore().getEn().setPrompt(mappingResult.getContent());

                // TODO: Refactor mapping rubrics
                // Map Rubrics
                if (content.getRubriclist() != null) {
                    for (Serializable element : content.getRubriclist().getContent()) {
                        JAXBElement jaxbElement = (JAXBElement) element;
                        if (jaxbElement.getName().toString().equals("rubric")) {
                            ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                    (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                            if (StringUtils.isNotBlank(rubric.getVal())) {
                                String iatRubric = mapRichTextContent(rubric.getVal(),
                                        content.getApipAccessibility(), mappingResult).getContent();
                                saItem.getCore().getEn().getRubrics().add(iatRubric);
                            }
                        } else if (jaxbElement.getName().toString().equals("samplelist")) {
                            ItemRelease.Item.Content.Rubriclist.Samplelist samplelist =
                                    (ItemRelease.Item.Content.Rubriclist.Samplelist) jaxbElement.getValue();

                            for (ItemRelease.Item.Content.Rubriclist.Samplelist.Sample sample : samplelist.getSample()) {
                                if (StringUtils.isNotBlank(sample.getSamplecontent())) {
                                    String iatExemplar = mapRichTextContent(sample.getSamplecontent(),
                                            content.getApipAccessibility(), mappingResult).getContent();
                                    saItem.getCore().getEn().getExemplarResponses().add(iatExemplar);
                                }
                            }
                        }
                    }
                }
            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                // Call main IAT mapping function
                mappingResult = mapRichTextContent(getEsnContent(content.getStem()), content.getApipAccessibility(), mappingResult);

                saItem.getTranslations().getEsp().setIsRequired("true");
                saItem.getTranslations().getEsp().setProvided(true);
                saItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());

                // TODO: Refactor mapping rubrics
                // Map Rubrics
                if (content.getRubriclist() != null) {
                    for (Serializable element : content.getRubriclist().getContent()) {
                        JAXBElement jaxbElement = (JAXBElement) element;
                        if (jaxbElement.getName().toString().equals("rubric")) {
                            ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                    (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                            if (StringUtils.isNotBlank(rubric.getVal())) {
                                String iatRubric = mapRichTextContent(rubric.getVal(),
                                        content.getApipAccessibility(), mappingResult).getContent();
                                saItem.getTranslations().getEsp().getRubrics().add(iatRubric);
                            }
                        } else if (jaxbElement.getName().toString().equals("samplelist")) {
                            ItemRelease.Item.Content.Rubriclist.Samplelist samplelist =
                                    (ItemRelease.Item.Content.Rubriclist.Samplelist) jaxbElement.getValue();

                            for (ItemRelease.Item.Content.Rubriclist.Samplelist.Sample sample : samplelist.getSample()) {
                                if (StringUtils.isNotBlank(sample.getSamplecontent())) {
                                    String iatExemplar = mapRichTextContent(sample.getSamplecontent(),
                                            content.getApipAccessibility(), mappingResult).getContent();
                                    saItem.getTranslations().getEsp().getExemplarResponses().add(iatExemplar);
                                }
                            }
                        }
                    }
                }
            }

            // Process attachments
            processAttachments(content, saItem, itemSourceFullPath, itemDestinationFullPath, importResult);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, saItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        //Process Image Resources
        processImageResources(mappingResult, saItem, itemSourceFullPath, itemDestinationFullPath, importResult);


        return saItem;
    }
}
