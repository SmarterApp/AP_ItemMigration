package org.opentestsystem.ap.migration.mapper;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.model.AbstractItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemAudioResource;
import org.opentestsystem.ap.common.model.ItemCcAudioAssociation;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.model.IatAudio;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.ItemMappingResult;
import org.opentestsystem.ap.migration.model.ItemProps;
import org.opentestsystem.ap.migration.util.AudioUtil;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;

import java.nio.file.Path;
import java.nio.file.Paths;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemLanguage.LANG_ENU;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemLanguage.LANG_ESN;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_AUDIO;

@Slf4j
@NoArgsConstructor
public class StimModelMapper extends IatModelMapper {

    @Override
    public Item mapContent(
            Item item,
            ItemRelease release,
            Path itemLocalPath,
            String itemSourceFullPath,
            ItemMappingResult mappingResult) {
        log.info("map stim content for {} (its-id {})", item.getId(), item.getItsId());

        StimItem stimItem = (StimItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        ItemMappingProperties mappingProperties = new ItemMappingProperties();

        for (ItemRelease.Passage.Content content : release.getPassage().getContent()) {

            if (LANG_ENU.equalsIgnoreCase(content.getLanguage())) {
                String passageText = getTitle(content.getTitle()) + content.getStem();
                mappingProperties = mapRichTextContent(content.getLanguage(), passageText, content.getApipAccessibility(), mappingProperties);

                // update model
                stimItem.getCore().getEn().setContent(mappingProperties.getContent());
            } else if (LANG_ESN.equalsIgnoreCase(content.getLanguage())) {
                String passageText = getTitle(getEsnContent(content.getTitle())) + content.getStem();
                mappingProperties = mapRichTextContent(content.getLanguage(), passageText, content.getApipAccessibility(), mappingProperties);

                // update model
                stimItem.getTranslations().getEsp().setContent(mappingProperties.getContent());
                stimItem.getTranslations().getEsp().setIsRequired("true");
                stimItem.getTranslations().getEsp().setProvided(true);
            }

            // Process attachments
            processAttachments(content, stimItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);
        }

        //Process Audio Resources
        processAudioResources(mappingProperties, stimItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        //Process Image Resources
        processImageResources(mappingProperties, stimItem, itemSourceFullPath, itemDestinationFullPath, mappingResult);

        return stimItem;
    }

    @Override
    public Item mapMetadata(Item item, SmarterAppMetadata metadata) {
        StimItem stimItem = (StimItem) item;
        stimItem.getCore().setMetadata(mapItemMetadata(metadata));
        return stimItem;
    }

    // ------------------------------------------------------------------------

    /**
     * Process common tags
     *
     * @param content
     * @param mappingProperties
     * @return
     */
    @Override
    String processCommonTags(String content, ItemMappingProperties mappingProperties) {
        String iatContent = super.processCommonTags(content, mappingProperties);
        return processAudioTags(iatContent, mappingProperties);
    }

    @Override
    Item mapAssociatedPassage(Item item, ItemProps itemProps) {
        return item;
    }

    @Override
    Item mapTutorial(Item item, ItemProps itemProps) {
        return item;
    }

    // ------------------------------------------------------------------------


    /**
     * Maps Saaif Audio tags to IAT equivalent
     *
     * @return
     */
    private String processAudioTags(String content, ItemMappingProperties mappingProperties) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("audio").forEach(audio -> {
            IatAudio iatAudio = new IatAudio();
            audio.getElementsByTag("source").forEach(source -> {
                iatAudio.getSources().add(source.attr("src"));
            });
            audio.getElementsByTag("track").forEach(track -> {
                iatAudio.setTrack(track.attr("src"));
            });
            int audioId = mappingProperties.getAudioSourceCount() + 1;
            mappingProperties.setAudioSourceCount(audioId);
            iatAudio.setAudioId(audioId);
            mappingProperties.getAudioSources().add(iatAudio);

            Element img = new Element("img");
            img.attr("title", "Audio Resource " + audioId);
            img.attr("data-iat-audio-resource-id", Integer.toString(audioId));
            img.attr("src", getAudioPlaceholderSrc(audioId));
            img.addClass("place-holder");

            audio.replaceWith(img);
        });

        AttachmentValidator validator = new AttachmentValidator(new ItemBankProperties());

        doc.getElementsByTag("a").forEach(anchor -> {

            String audioFileName = anchor.attr("href");

            try {
                validator.validateFileName(audioFileName, SECTION_AUDIO);

                IatAudio iatAudio = new IatAudio();
                iatAudio.getSources().add(audioFileName);

                int audioId = mappingProperties.getAudioSources().size() + 1;
                iatAudio.setAudioId(audioId);
                mappingProperties.getAudioSources().add(iatAudio);

                Element img = new Element("img");
                img.attr("title", "Audio Resource " + audioId);
                img.attr("data-iat-audio-resource-id", Integer.toString(audioId));
                img.attr("src", getAudioPlaceholderSrc(audioId));
                img.addClass("place-holder");

                anchor.replaceWith(img);
            } catch (ValidationException e) {
                log.info(
                        format("Skip anchor tag as it does not reference a valid audio file name -> %s",
                                audioFileName));
            }
        });

        return doc.body().html();
    }

    /**
     * @param audioId
     * @return
     */
    private String getAudioPlaceholderSrc(int audioId) {
        return "/assets/ckeditor/plugins/iataudio/icons/audio-place-" +
                (audioId < 10 ? "0" : "") +
                audioId + ".png";
    }


    private String getTitle(final String title) {
        if (StringUtils.isBlank(title)) {
            return StringUtils.EMPTY;
        }

        return "<p>" + title + "</p><p>&nbsp;</p>";
    }

    /**
     * Used during Import for all item types. Creates item audio resources and copies related files to destination
     * directory.
     *
     * @param mappingResult
     * @param item
     * @param itemSourceFullPath
     * @param itemDestinationFullPath
     */
    private void processAudioResources(ItemMappingProperties mappingResult,
                                       AbstractItem item,
                                       String itemSourceFullPath,
                                       String itemDestinationFullPath,
                                       ItemMappingResult importResult) {

        Path sourceFolder = Paths.get(itemSourceFullPath);
        Path targetFolder = Paths.get(itemDestinationFullPath);

        //Process Audio Resources
        mappingResult.getAudioSources().forEach(audio -> {

            item.getAudio().getAudioResources().add(
                    createItemAudioResource(
                            audio, audio.getAudioId(), item.getId(), item.getItsId()));

            audio.getSources().forEach(source -> {
                String targetFilename = AudioUtil.rename(source, item.getId(), item.getItsId());
                MigrationFileUtil.copyFile(
                        sourceFolder.resolve(source),
                        targetFolder.resolve(targetFilename),
                        importResult);
            });

            if (isNotBlank(audio.getTrack())) {
                String trackname = AudioUtil.rename(audio.getTrack(), item.getId(), item.getItsId());

                item.getCc().setCcProvided(true);
                item.getCc().setCcRequired("true");
                item.getCc().getAttachments().add(createAttachment(trackname));

                item.getCc().getItemCcAudioAssociations()
                        .add(createItemCCAudioAssociation(trackname, audio.getAudioId()));

                MigrationFileUtil.copyFile(
                        sourceFolder.resolve(audio.getTrack()),
                        targetFolder.resolve(trackname),
                        importResult);
            }
        });

        // this copies all ogg and m4a files, might be redundant but covers the case
        // where m4a files are not referenced in the imported SAAIF
        AudioUtil.copyAndRename(item.getId(), item.getItsId(), sourceFolder, targetFolder);
    }

    /**
     * @param audio
     * @param audioId
     * @return
     */
    private ItemAudioResource createItemAudioResource(IatAudio audio, int audioId, String itemId, String itsId) {
        ItemAudioResource resource = new ItemAudioResource();
        resource.setProductionFilesProvided(true);
        resource.setId(Integer.toString(audioId));
        audio.getSources().forEach(source -> {
            resource.getProductionFiles().add(createAttachment(AudioUtil.rename(source, itemId, itsId)));
        });
        return resource;
    }

    /**
     * @param fileName
     * @param audioId
     * @return
     */
    private ItemCcAudioAssociation createItemCCAudioAssociation(String fileName, int audioId) {
        ItemCcAudioAssociation audioAssociation = new ItemCcAudioAssociation();
        audioAssociation.setCcFileName(fileName);
        audioAssociation.setAudioResourceId(Integer.toString(audioId));
        return audioAssociation;
    }
}
