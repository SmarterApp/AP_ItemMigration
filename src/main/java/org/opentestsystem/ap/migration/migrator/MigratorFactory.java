package org.opentestsystem.ap.migration.migrator;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.PostConstruct;

import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.migration.util.Constants.MIGRATION_1424;

@Component
public class MigratorFactory {

    @Autowired
    private AppProps appProps;

    @Autowired
    private Migration1424 migration1424;

    private Map<String, BranchMigrator> migrators = new HashMap<>();

    @PostConstruct
    private void init() {
        migrators.put("Migration_1", migration1424);
        migrators.put("Migration_2", migration1424);
        migrators.put(MIGRATION_1424, migration1424);
    }

    public MigrationDefinition getNextMigration(final String migrationName) {
        final List<MigrationDefinition> migrations = appProps.getMigrations();

        // null is returned if there is no migration following the one provided
        MigrationDefinition nextMigration = null;

        if (isNotEmpty(migrations)) {
            if (isNotBlank(migrationName)) {
                int index = migrations.indexOf(migrationName);
                if (index == -1) {
                    throw new SystemException(
                        "Can't get the next migration. The one provided does not exist: " + migrationName);
                }
                if (migrations.size() > index) {
                    nextMigration = migrations.get(index + 1);
                }
            } else {
                // migrationName must be null so return the first migration
                nextMigration = migrations.get(0);
            }
        }

        return nextMigration;
    }

    public BranchMigrator getNextMigrator(final String migrationName) {
        final MigrationDefinition nextMigration = getNextMigration(migrationName);
        return nextMigration != null ? getMigrator(nextMigration.getMigrationName()) : null;
    }

    public BranchMigrator getMigrator(final String migrationName) {
        final BranchMigrator migrator = migrators.get(migrationName);
        if (migrator == null) {
            throw new SystemException("No migrator exists for " + migrationName);
        }
        return migrator;
    }
}
