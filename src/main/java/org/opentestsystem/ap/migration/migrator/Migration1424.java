package org.opentestsystem.ap.migration.migrator;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.BranchMigration;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

/**
 * The item model was changed to include a 'version' property.  This migration adds the 'version' property to model
 * file.
 */
@Slf4j
@Component
public class Migration1424 extends AbstractBranchMigrator implements BranchMigrator {

    private static final String OLD_MODEL_FILE_NAME = "item.json";

    private static final String NEW_MODEL_VERSION = "1";

    private static final String MIGRATION_COMMIT_MESSAGE = "Migrated model from version 0 to version 1";

    public Migration1424(final Util util) {
        super(util);
    }

    @Override
    public BranchMigration migrate(final ItemInfo itemInfo, final BranchInfo branchInfo,
                                   final MigrationDefinition migration) {
        final GitClient gitClient = itemRepository.cloneRemoteRepository(util.getUser(), itemInfo.getItemId());
        return migrate(itemInfo, branchInfo, migration, gitClient);
    }

    @Override
    public BranchMigration migrate(final ItemInfo itemInfo, final BranchInfo branchInfo,
                                   final MigrationDefinition migration, final GitClient gitClient) {

        BranchMigration branchMigration = new BranchMigration(branchInfo.getBranchName(), migration.getMigrationName());

        // item is not public so nothing to migrate, the master branch is considered migrated
        if (branchInfo.isMasterBranch() && !itemInfo.isItemPublic()) {
            return branchMigration;
        }

        try {
            gitClient.checkoutBranch(branchInfo.getBranchName());

            final ItemContext itemContext = gitClient.getItemContext();

            if (itemContext.doesFileExist(OLD_MODEL_FILE_NAME)) {
                // read old file
                final Item item = itemContext.readModelFile(OLD_MODEL_FILE_NAME);
                // ensure the item version is up to date
                item.setVersion(NEW_MODEL_VERSION);

                // remove old file from repository
                gitClient.deleteFileAndStage(OLD_MODEL_FILE_NAME);

                // write new model file
                gitClient.writeModelFile(item);

                // stage new model file
                gitClient.stageFiles(RepositoryUtil.getModelFileName());

                gitClient.commit(migration.getMigrationDescription());
                gitClient.push();

                branchInfo.setSuccess(true);
            }
        } catch (Exception e) {
            branchInfo.setSuccess(false);
            branchInfo.setLoadError(true);
            branchInfo.setErrorMessage(ExceptionUtils.getRootCauseMessage(e));
        }

        return branchInfo.isSuccess() ? branchMigration : null;
    }
}
