package org.opentestsystem.ap.migration.migrator;

import java.nio.file.Path;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.BranchMigration;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.model.MigrationState;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.opentestsystem.ap.migration.util.Constants.ITEM_MIGRATION_FILE_NAME;
import static org.opentestsystem.ap.migration.util.Constants.MASTER_BRANCH_NAME;

@Slf4j
@Component
public class ItemMigrator {

    private final Util util;

    private final ItemRepository itemRepository;

    private final GitlabClient gitlabClient;

    private final MigratorFactory migratorFactory;

    public ItemMigrator(final Util util, final MigratorFactory migratorFactory) {
        this.util = util;
        this.gitlabClient = util.getGitlabClient();
        this.itemRepository = util.getItemRepository();
        this.migratorFactory = migratorFactory;
    }

    public void migrateItem(final ItemInfo itemInfo) {
        if (itemInfo != null) {
            log.info("Begin migration of item {}", itemInfo.getItemId());

            final MigrationState migrationState = getMigrationState(itemInfo);

            final GitClient gitClient = itemRepository.cloneRemoteRepository(util.getUser(), itemInfo.getItemId());

            try {
                if (isNotEmpty(itemInfo.getBranches())) {
                    itemInfo.getBranches().forEach(branchInfo -> {
                        log.debug(branchInfo.toString());
                        migrateBranch(itemInfo, branchInfo, migrationState, gitClient);
                    });
                }

                // update the migration file
                saveMigrationState(gitClient, migrationState, itemInfo.getItemId());

            } finally {
                if (gitClient != null) {
                    gitClient.deleteLocalRepo();
                }
            }
        }
    }

    private void migrateBranch(final ItemInfo itemInfo,
                               final BranchInfo branchInfo,
                               final MigrationState migrationState,
                               final GitClient gitClient) {

        // this is the migration the branch last ran
        BranchMigration currentBranchMigration = migrationState.getBranchMigration(branchInfo.getBranchName());

        while (currentBranchMigration != null) {

            final MigrationDefinition nextMigration = migratorFactory.getNextMigration(currentBranchMigration
                .getMigrationName());

            // null means there are no migrations to run
            if (nextMigration != null) {
                final BranchMigrator migrator = migratorFactory.getMigrator(nextMigration.getMigrationName());

                // update the current
                currentBranchMigration = migrator.migrate(itemInfo, branchInfo, nextMigration, gitClient);

                if (currentBranchMigration != null) {
                    migrationState.updateMigrations(currentBranchMigration);
                }
            } else {
                currentBranchMigration = null;
            }
        }
    }

    private void saveMigrationState(final GitClient gitClient,
                                    final MigrationState migrationState,
                                    final String itemId) {
        log.debug("save migration state for item {}", itemId);

        final ItemContext itemContext = gitClient.getItemContext();
        final Path pathToMigrationFile = itemContext.getLocalRepositoryPath().resolve(ITEM_MIGRATION_FILE_NAME);

        gitClient.checkoutMasterBranch();

        util.writeMigrationState(migrationState, pathToMigrationFile);

        gitClient.stageFiles(ITEM_MIGRATION_FILE_NAME);
        gitClient.commit("Updating");
        gitClient.push();
    }

    private MigrationState getMigrationState(final ItemInfo itemInfo) {
        log.debug("get migration state for item {}", itemInfo.getItemId());

        final byte[] fileBytes = gitlabClient.getFile(
            itemInfo.getProjectId(), ITEM_MIGRATION_FILE_NAME, MASTER_BRANCH_NAME);

        return fileBytes != null ? util.readJsonObject(fileBytes, MigrationState.class) : new MigrationState();
    }
}
