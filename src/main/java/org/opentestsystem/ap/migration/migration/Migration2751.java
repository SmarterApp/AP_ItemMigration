package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Asl;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import static java.lang.String.format;
import static org.apache.commons.io.FileUtils.copyFile;
import static org.apache.commons.lang3.StringUtils.isBlank;

@Slf4j
@Component
public class Migration2751 extends AbstractImportMigration {

    public Migration2751(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {

        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, attachmentManager,
                applicationDependencyProvider);
    }

    @Override
    protected void checkSkipMigration(ItemEntity itemEntity) {
        final Item item = itemEntity.getItemJson();
        if (isBlank(item.getItsId())) {
            throw new SkipMigration(format("%s Skipped: Item %s has no ITS ID", getMigrationName(), item.getId()));
        }
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        Asl mappedAsl = mappedItem.getAsl();

        if (mappedItem.getAsl().getAttachments().isEmpty()) {
            throw new SkipMigration("Migration2751: No asl attachments to migrate");
        }

        try {
            Path aslFilesToSync = Files.createTempDirectory("Migration2751-" + dataStoreItem.getId());

            List<String> aslFileNames = mappedAsl.getAttachments().stream().map(Attachment::getFileName).collect(Collectors.toList());

            Arrays.stream(itemSyncDir.toFile().listFiles()).forEach(file -> {
                if(aslFileNames.contains(file.getName())) {
                    try {
                        copyFile(file, new File(aslFilesToSync.toFile(), file.getName()));
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            });

            return new ItemMerge(dataStoreItem, aslFilesToSync, true);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.emptyList();
    }
}
