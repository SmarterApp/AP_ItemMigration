package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.content.TextEditorTypeEnums;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.Map;

/**
 * Set the response type attrib in the SAAIF file to the appropriate default for all existing SA items.
 * <p>
 * The default value is based on the SA item's subject:
 * * ELA = PlainText
 * * MATH = HTMLEditor
 * * [no subject] = Empty string
 * </p>
 * <p>
 * The [no subject] situation _should_ be a rare case, but it's possible.  In that case, we don't know what the default
 * should be, so the response type attribute will be set to an empty string.
 * </p>
 */
@Component
public class Migration3306 extends AbstractMigration {
    private final Map<String, TextEditorTypeEnums> subjectToEditorMap = ImmutableMap.<String, TextEditorTypeEnums>builder()
            .put(ModelConstants.ItemSubject.SUBJECT_ELA, TextEditorTypeEnums.PlainText)
            .put(ModelConstants.ItemSubject.SUBJECT_MATH, TextEditorTypeEnums.RichText)
            .build();

    public Migration3306(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final DataStoreItemManager dataStoreItemManager,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider,
                applicationProperties,
                dataManager,
                dataStoreItemManager,
                dataStoreUtility,
                dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        if (!ModelConstants.ItemType.TYPE_SA.equalsIgnoreCase(itemEntity.getItemJson().getType())) {
            throw new SkipMigration(String.format("Item ID %s is not an SA item; no migration necessary",
                    itemEntity.getItemId()));
        }

        final SaItem saItem = (SaItem) itemEntity.getItemJson();
        saItem.getCore()
                .getEn()
                .setTextEditorType(subjectToEditorMap.getOrDefault(saItem.getCore().getMetadata().getSubject(),
                        TextEditorTypeEnums.NoneSelected));

        return itemEntity;
    }
}
