package org.opentestsystem.ap.migration.migration;

import org.gitlab4j.api.models.Project;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Component
public class Migration2673 extends AbstractDataStoreMigration {

    private final GitlabClient gitlabClient;
    private final AppAssembler appAssembler;
    private final MigrationFileUtil migrationFileUtil;
    private final IatModelMapperFactory iatModelMapperFactory;

    public Migration2673(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                         final MigrationFileUtil migrationFileUtil,
                         final IatModelMapperFactory iatModelMapperFactory) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
        this.gitlabClient = applicationDependencyProvider.getGitlabClient();
        this.appAssembler = applicationDependencyProvider.getAppAssembler();
        this.migrationFileUtil = migrationFileUtil;
        this.iatModelMapperFactory = iatModelMapperFactory;
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        if (Integer.parseInt(itemEntity.getItemId()) < 200000 &&
                itemEntity.getItemJson().getType().equals(ItemConstants.ItemType.TYPE_EBSR)) {
            try {
                Project glProject = gitlabClient.lookupProjectByName(itemEntity.getItemId());
                if (glProject != null) {
                    applyEbsrMigration(itemEntity, glProject);
                }
            } catch (Exception ex) {
                throw new SkipMigration(String.format("Unable to migrate item %s. %s", itemEntity.getItemId(), ex.getMessage()));
            }
        } else {
            throw new SkipMigration(String.format("Item %s is not imported or not EBSR type.  No updates necessary", itemEntity.getItemId()));
        }
        return itemEntity;
    }


    private void applyEbsrMigration(ItemEntity itemEntity, Project project) throws Exception {
        // Pull import.zip from the items master branch. Expand import.zip to a temporary directory
        Path expandedZip = migrationFileUtil.getExpandedImportZipFile(itemEntity.getItemId(),
                gitlabClient.getFile(project.getId(), MigrationFileUtil.IMPORT_ZIP_FILENAME, BRANCH_MASTER));

        if (expandedZip.toFile().exists()) {
            // import.zip can contain multiple directories or none at all. Identify the imported item source directory
            Path itemSourceDir = MigrationFileUtil.getItemSourceDir(expandedZip, itemEntity.getItemJson().getItsId());
            // Find the main item file in the source location
            File itemFile = MigrationFileUtil.getItemFileInDirectory(itemSourceDir, itemEntity.getItemJson().getItsId());

            if (itemFile != null) {
                // Load imported item xml data
                final ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                        .readXmlFromFile(itemFile.toPath());

                // Create item-specific mapper
                final IatModelMapper mapper = iatModelMapperFactory.newModelMapper(itemEntity.getItemJson().getType());

                // Load Jsoup document with item Qti content
                final ItemRelease.Item.Content itemContent = itemRelease.getItem().getContent().get(0);
                Document itemBody = Jsoup.parseBodyFragment(itemContent.getQti().getValue(), "UTF-8");
                itemBody.outputSettings(new Document.OutputSettings().prettyPrint(false));
                itemBody.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

                if (itemBody.getElementsByTag("p").size() > 0) {
                    // Create temporary directory to store attachment files that might need synching to S3
                    Path itemSyncDir = Files.createTempDirectory(itemEntity.getItemId());

                    String qtiFirstParagraph = itemBody.getElementsByTag("p").first().outerHtml();

                    //Casting item
                    EbsrItem ebsrItem = (EbsrItem) itemEntity.getItemJson();

                    ItemMappingProperties mappingProperties = new ItemMappingProperties(
                            ebsrItem.getAudio().getAudioResources().size(),
                            ebsrItem.getImages().getImageResources().size());

                   mapper.mapSingleRichTextContent(itemContent.getLanguage(), qtiFirstParagraph,
                           itemRelease.getItem().getContent().get(0).getApipAccessibility(),
                           mappingProperties);

                    ebsrItem.getCore().getEn().setPrompt(mappingProperties.getContent());

                    itemEntity.setItemJson(ebsrItem);

                    //Process Image Resources
                    mapper.processImageResources(mappingProperties,
                            ebsrItem,
                            itemSourceDir.toString(),
                            itemSyncDir.toString());

                    itemBankSyncManager.syncAttachmentsToDataStore(itemEntity.getItemId(), BRANCH_MASTER, itemSyncDir);
                }

            } else {
                throw new Exception(String.format("Unable to find item file in %s for item %s", itemSourceDir, itemEntity.getItemId()));
            }
        }
    }
}
