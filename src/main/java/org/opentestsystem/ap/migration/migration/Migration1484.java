package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

import java.io.FileNotFoundException;
import java.io.FileReader;

import static org.opentestsystem.ap.common.repository.RepositoryUtil.getModelFileName;

@Slf4j
@Component
public class Migration1484 extends AbstractMigration {

    public Migration1484(Util util) {
        super(util);
    }

    @Override
    protected void runMigration(final ItemInfo itemInfo,
                                final BranchInfo branchInfo,
                                final MigrationDefinition migration,
                                final GitClient gitClient) {

        JSONParser parser = new JSONParser();

        final Item item = gitClient.readModelFile();

        if (!item.getType().equals(ItemConstants.ItemType.TYPE_TUT)) {
            try {
                Object itemObject = parser
                        .parse(new FileReader(
                                gitClient.getItemContext().getLocalModelFilePath().toString()));

                JSONObject jsonItem = (JSONObject) itemObject;
                JSONObject jsonCore = (JSONObject) jsonItem.get("core");
                JSONObject jsonMetadata = (JSONObject) jsonCore.get("metadata");

                String allowCalculator = (String) jsonMetadata.get("calculator");
                String contentDomain = (String) jsonMetadata.get("contentDomain");
                String grade = (String) jsonMetadata.get("grade");
                String itemPoint = (String) jsonMetadata.get("itemPoint");
                String knowledgeDemands = (String) jsonMetadata.get("knowledgeDemands");
                String passageName = (String) jsonMetadata.get("passageName");
                String primaryTarget = (String) jsonMetadata.get("primaryAssessmentTarget");
                String secondaryTarget = (String) jsonMetadata.get("secondaryAssessmentTarget");
                String tertiaryTarget = (String) jsonMetadata.get("tertiaryAssessmentTarget");
                String quaternaryTarget = (String) jsonMetadata.get("quaternaryAssessmentTarget");
                String scoringPoints = (String) jsonMetadata.get("scoringPoints");

                item.getCore().getMetadata().setAllowCalculator(allowCalculator != null ? allowCalculator : "");
                item.getCore().getMetadata().setPrimaryContentDomain(contentDomain != null ? contentDomain : "");
                item.getCore().getMetadata().setIntendedGrade(grade != null ? grade : "");
                item.getCore().getMetadata().setMaximumPoints(itemPoint != null ? itemPoint : "");
                item.getCore().getMetadata().setStimulusLiteraryKnowledgeDemands(knowledgeDemands != null ? knowledgeDemands : "");
                item.getCore().getMetadata().setStimulusName(passageName != null ? passageName : "");
                item.getCore().getMetadata().setPrimaryTarget(primaryTarget != null ? primaryTarget : "");
                item.getCore().getMetadata().setSecondaryTarget(secondaryTarget != null ? secondaryTarget : "");
                item.getCore().getMetadata().setTertiaryTarget(tertiaryTarget != null ? tertiaryTarget : "");
                item.getCore().getMetadata().setQuaternaryTarget(quaternaryTarget != null ? quaternaryTarget : "");
                item.getCore().getMetadata().setScorePoints(scoringPoints != null ? scoringPoints : "");
                item.getCore().getMetadata().setVersion("0.0");

                //     write new model file
                gitClient.writeModelFile(item);

                //     stage model file
                gitClient.stageFiles(getModelFileName());

            } catch(FileNotFoundException fe){
                log.error("Unable to load item: " + fe.getMessage());
            } catch(Exception e){
                log.error("Error running migration: " + e.getMessage());
            }
        }
    }
}
