package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

import java.io.FileNotFoundException;
import java.io.FileReader;

@Slf4j
@Component
public class Migration1484 extends AbstractMigration {

    public Migration1484(Util util) {
        super(util);
    }

    @Override
    protected void runMigration(final ItemInfo itemInfo,
                                final BranchInfo branchInfo,
                                final MigrationDefinition migration,
                                final GitClient gitClient) {

        JSONParser parser = new JSONParser();

        final Item item = gitClient.readModelFile();

        if (!item.getType().equals(ItemConstants.ItemType.TYPE_TUT)) {
            try {
                Object itemObject = parser
                        .parse(new FileReader(
                                gitClient.getItemContext().getLocalModelFilePath().toString()));

                JSONObject jsonItem = (JSONObject) itemObject;
                JSONObject jsonCore = (JSONObject) jsonItem.get("core");
                JSONObject jsonMetadata = (JSONObject) jsonCore.get("metadata");

                String allowCalculator = jsonMetadata.get("calculator") != null ? (String) jsonMetadata.get("calculator") : "";
                String contentDomain = jsonMetadata.get("contentDomain") != null ? (String) jsonMetadata.get("contentDomain") : "";
                String grade = jsonMetadata.get("grade") != null ? (String) jsonMetadata.get("grade") : "";
                String itemPoint = jsonMetadata.get("itemPoint") != null ? (String) jsonMetadata.get("itemPoint") : "";
                String knowledgeDemands = jsonMetadata.get("knowledgeDemands") != null ? (String) jsonMetadata.get("knowledgeDemands") : "";
                String passageName = jsonMetadata.get("passageName") != null ? (String) jsonMetadata.get("passageName") : "";
                String primaryTarget = jsonMetadata.get("primaryAssessmentTarget") != null ? (String) jsonMetadata.get("primaryAssessmentTarget") : "";
                String secondaryTarget = jsonMetadata.get("secondaryAssessmentTarget") != null ? (String) jsonMetadata.get("secondaryAssessmentTarget") : "";
                String tertiaryTarget = jsonMetadata.get("tertiaryAssessmentTarget") != null ? (String) jsonMetadata.get("tertiaryAssessmentTarget") : "";
                String quaternaryTarget =  jsonMetadata.get("quaternaryAssessmentTarget") != null ? (String) jsonMetadata.get("quaternaryAssessmentTarget") : "";
                String scoringPoints = jsonMetadata.get("scoringPoints") != null ? (String) jsonMetadata.get("scoringPoints") : "";

                item.getCore().getMetadata().setAllowCalculator(allowCalculator);
                item.getCore().getMetadata().setPrimaryContentDomain(contentDomain);
                item.getCore().getMetadata().setIntendedGrade(grade);
                item.getCore().getMetadata().setMaximumPoints(itemPoint);
                item.getCore().getMetadata().setStimulusLiteraryKnowledgeDemands(knowledgeDemands);
                item.getCore().getMetadata().setStimulusName(passageName);
                item.getCore().getMetadata().setPrimaryTarget(primaryTarget);
                item.getCore().getMetadata().setSecondaryTarget(secondaryTarget);
                item.getCore().getMetadata().setTertiaryTarget(tertiaryTarget);
                item.getCore().getMetadata().setQuaternaryTarget(quaternaryTarget);
                item.getCore().getMetadata().setScorePoints(scoringPoints);
                item.getCore().getMetadata().setVersion("0.0");

                //     write new model file
                gitClient.writeModelFile(item);

                SmarterAppMetadata saaifMetadata = gitClient.getItemContext().readMetadataFile();
                saaifMetadata = item.toSaaifMetadata(saaifMetadata);
                //     write new metadata file
                gitClient.writeMetadataFile(saaifMetadata);

                //     stage model file
                gitClient.stageFiles();

            } catch(FileNotFoundException fe){
                log.error("Unable to load item: " + fe.getMessage());
            } catch(Exception e){
                log.error("Error running migration: " + e.getMessage());
            }
        }
    }
}
