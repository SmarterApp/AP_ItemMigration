package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

@Component
public class Migration3486 extends AbstractMigration {
    public Migration3486(final ApplicationDependencyProvider applicationDependencyProvider, final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final DataStoreItemManager dataStoreItemManager, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        if(!ModelConstants.ItemType.TYPE_HTQS.equals(itemEntity.getItemJson().getType())) {
            throw new SkipMigration("Item %s is not an htqs item.", itemEntity.getItemId());
        }

        if(!itemEntity.getItemJson().isImported()) {
            throw new SkipMigration("Item %s is not imported.", itemEntity.getItemId());
        }

        HtqsItem model = (HtqsItem) itemEntity.getItemJson();
        if (!model.getCore().getEn().getHtqSelectable().isManagedByIat()) {
            model.getSaaif().setQrx(createQrxAttachment(model.getId()));
        } else {
            throw new SkipMigration("HTQS item %s machine scoring is not managed by TIMS", itemEntity.getItemId());
        }

        return itemEntity;
    }

    private Attachment createQrxAttachment(final String itemId) {
        Attachment qrxAttachment = new Attachment();
        qrxAttachment.setFileName(RepositoryUtil.getQrxFileName(itemId));
        return qrxAttachment;
    }
}
