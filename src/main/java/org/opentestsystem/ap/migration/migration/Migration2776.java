package org.opentestsystem.ap.migration.migration;

import org.jsoup.nodes.Document;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.transformer.MapperUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdateCommand;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdateCommandResult;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

import static org.apache.commons.lang.StringUtils.isBlank;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TUT;

@Component
public class Migration2776 extends AbstractMigration {

    private List<String> styleBlackList = new ArrayList<>();

    public Migration2776(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         DataStoreItemManager dataStoreItemManager,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);

        styleBlackList.add("line-height:0.2402in;");
        styleBlackList.add("color:#000000;");
//        styleBlackList.add("font-weight:bold;");
        styleBlackList.add("font-style:normal;");
        styleBlackList.add("font-weight:normal;");
        styleBlackList.add("font-variant:normal;");
        styleBlackList.add("text-transform:none;");
        styleBlackList.add("background-color:transparent;");
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        if (shouldMigrate(itemEntity)) {
            Migration2776Command migration2776Command = new Migration2776Command();
            return migrateEntityContent(itemEntity, migration2776Command);
        } else {
            throw new SkipMigration(String.format("Item %s is not imported or a Tutorial. No updates necessary", itemEntity.getItemId()));
        }
    }

    public class Migration2776Command extends ContentUpdateCommand {
        @Override
        public ContentUpdateCommandResult applyEnglishContentUpdate(String englishContentHtml) {
            final Document doc = newJsoupDocument(englishContentHtml);
            removeStyleValuesFromElement(doc, "p");
            removeStyleValuesFromElement(doc, "span");
            removeStyleValuesFromElement(doc, "sup");
            // Important to remove new lines on mapped content
            return new ContentUpdateCommandResult(true, MapperUtil.removeNewLine(doc.body().html()));
        }

        @Override
        public ContentUpdateCommandResult applyTranslatedContentUpdate(String language, String translatedContent, String englishContent) {
            return this.applyEnglishContentUpdate(translatedContent);
        }

    }

    private boolean shouldMigrate(ItemEntity itemEntity) {
        return itemEntity.getItemJson().isImported() && !TYPE_TUT.equals(itemEntity.getItemJson().getType());
    }

    private void removeStyleValuesFromElement(Document document, String elementName) {
        document.getElementsByTag(elementName).forEach(paragraph -> {
            if (paragraph.hasAttr("style")) {
                String paragraphStyle = paragraph.attr("style");

                for (String blackStyle : styleBlackList) {
                    paragraphStyle = paragraphStyle.replace(blackStyle, "");
                }

                if (isBlank(paragraphStyle.trim())) {
                    paragraph.removeAttr("style");
                } else {
                    paragraph.attr("style", paragraphStyle.trim());
                }
            }
        });

    }
}
