package org.opentestsystem.ap.migration.migration;


import com.google.common.collect.Sets;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.FailedMigrationException;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collection;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Component
public class Migration2483 extends AbstractImportMigration {
    private static final String COLSPAN = "colspan";

    public Migration2483(ApplicationProperties applicationProperties, DataStoreDataManager dataManager, ItemManagerEventProducer eventProducer, DataStoreUtility dataStoreUtility, DataStoreAttachmentManager dataStoreAttachmentManager, ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Override
    ItemMerge mergeItem(Item dataStoreItem, Item mappedItem, Path itemSyncDir) {
        dataStoreItem.getCore().setEn(mappedItem.getCore().getEn());
        dataStoreItem.getTranslations().setEsp(mappedItem.getTranslations().getEsp());
        return new ItemMerge(dataStoreItem, itemSyncDir, false);
    }

    @Override
    Collection<String> getEditedSectionsBlockingMigration() {
        return Sets.newHashSet(ItemConstants.Section.SECTION_CORE,
                ItemConstants.Section.SECTION_TRANSLATIONS,
                ItemConstants.Section.SECTION_GLOSSARY,
                ItemConstants.Section.SECTION_IMAGES);
    }

    @Override
    protected void checkSkipMigration(ImportItem importItem) {
        if (!findTextInItemFile(importItem, COLSPAN)) {
            throw new SkipMigration(String.format("the saaif content does not contain %s", COLSPAN));
        }
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return BRANCH_MASTER.equalsIgnoreCase(migratedEntity.getBranchName());
    }
}
