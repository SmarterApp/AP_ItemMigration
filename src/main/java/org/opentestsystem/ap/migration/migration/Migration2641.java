package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Component
public class Migration2641 extends AbstractDataStoreMigration {
    private final MigrationFileUtil migrationFileUtil;

    public Migration2641(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                         final ApplicationDependencyProvider provider) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
        this.migrationFileUtil = provider.getMigrationFileUtil();
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity) {
        if (!itemEntity.getItemJson().getType().equals(ItemConstants.ItemType.TYPE_STIM)) {
            throw new SkipMigration(String.format("Skipping migration 2641 because item %s is not Stim", itemEntity.getItemId()));
        }

        ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() ->
                new SkipMigration(String.format("Skipping migration 2641 because item %s was not imported", itemEntity.getItemId())));

        if (importItem.getItemRelease().getPassage() == null
                || importItem.getItemRelease().getPassage().getContent() == null
                || importItem.getItemRelease().getPassage().getContent().isEmpty()) {
            throw new SkipMigration(String.format("Skipping migration 2641 because item %s does not have a passage", itemEntity.getItemId()));
        }

        StimItem stim = (StimItem) itemEntity.getItemJson();

        final IatModelMapper mapper = IatModelMapperFactory.getInstance().newModelMapper(stim.getType());

        try {
            Path itemSyncDir = Files.createTempDirectory(itemEntity.getItemId());

            StimItem mappedItem = (StimItem) mapper.mapSaaifToIATModel(importItem.getItemProps(),
                    stim,
                    importItem.getItemRelease(),
                    importItem.getSmarterAppMetadata(),
                    importItem.getWordlistreleaseType().orElse(null),
                    importItem.getWordlistPathString(),
                    itemSyncDir,
                    importItem.getItemImportSourcePath().toString());

            itemEntity.setItemJson(mappedItem);

            itemBankSyncManager.syncAttachmentsToDataStore(itemEntity.getItemId(), BRANCH_MASTER, itemSyncDir);
        } catch (IOException e) {
            throw new RuntimeException("Migration2641: Issue migrating item " + itemEntity.getItemId() + " exception: " + e.getCause());
        }

        return itemEntity;
    }
}
