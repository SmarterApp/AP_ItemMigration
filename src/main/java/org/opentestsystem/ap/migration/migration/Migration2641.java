package org.opentestsystem.ap.migration.migration;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.content.StimItemContent;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ItemMappingProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

@Component
public class Migration2641 extends AbstractDataStoreMigration {
    private final MigrationFileUtil migrationFileUtil;
    private final IatModelMapperFactory iatModelMapperFactory;

    public Migration2641(final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                         final MigrationFileUtil migrationFileUtil, final IatModelMapperFactory iatModelMapperFactory) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
        this.migrationFileUtil = migrationFileUtil;
        this.iatModelMapperFactory = iatModelMapperFactory;
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity) {
        if (!itemEntity.getItemJson().getType().equals(ItemConstants.ItemType.TYPE_STIM)) {
            throw new SkipMigration(String.format("Skipping migration 2641 because item %s is not Stim", itemEntity.getItemId()));
        }

        ItemRelease itemRelease = migrationFileUtil.getImportedItemRelease(itemEntity).orElseThrow(() ->
                new SkipMigration(String.format("Skipping migration 2641 because item %s was not imported", itemEntity.getItemId())));


        if (itemRelease.getPassage() == null
                || itemRelease.getPassage().getContent() == null
                || itemRelease.getPassage().getContent().isEmpty()) {
            throw new SkipMigration(String.format("Skipping migration 2641 because item %s does not have a passage", itemEntity.getItemId()));
        }

        String englishTitle = "";
        String spanishTitle = "";

        final IatModelMapper mapper = iatModelMapperFactory.newModelMapper(itemEntity.getItemJson().getType());


        for(ItemRelease.Passage.Content content : itemRelease.getPassage().getContent()) {
            if(ItemConstants.ItemLanguage.LANG_ENU.equals(content.getLanguage())) {
                englishTitle = content.getTitle();
            } else if(ItemConstants.ItemLanguage.LANG_ESN.equals(content.getLanguage())) {
                spanishTitle = content.getTitle();
            }
        }

        StimItem stim = (StimItem) itemEntity.getItemJson();

        if(StringUtils.isNotBlank(englishTitle)) {
            StimItemContent englishStimItemContent = stim.getCore().getEn();
            englishStimItemContent.setContent(englishTitle + englishStimItemContent.getContent());
        }

        if(StringUtils.isNotBlank(spanishTitle)) {
            StimItemContent spanishItemContent = stim.getTranslations().getEsp();
            spanishItemContent.setContent(spanishTitle + spanishItemContent.getContent());
        }


        ItemMappingProperties mappingProperties = mapper.mapSingleRichTextContent(spanishTitle,
                stim,
                itemRelease.getItem().getContent().get(0).getApipAccessibility(),
                itemSourceDir.toString(),
                itemSyncDir.toString());

        mappingProperties = mapper.mapSingleRichTextContent(qtiFirstParagraph,
                itemRelease.getItem().getContent().get(0).getApipAccessibility(), mappingProperties);

        return itemEntity;
    }
}
