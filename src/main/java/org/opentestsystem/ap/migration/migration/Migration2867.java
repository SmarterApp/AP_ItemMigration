package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.Collection;
import java.util.Collections;

@Component
public class Migration2867 extends AbstractImportMigration {
    public Migration2867(ApplicationProperties applicationProperties, DataStoreDataManager dataManager, ItemManagerEventProducer eventProducer, DataStoreUtility dataStoreUtility, DataStoreAttachmentManager dataStoreAttachmentManager, ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider, ItemConstants.ItemType.TYPE_MC, ItemConstants.ItemType.TYPE_MS, ItemConstants.ItemType.TYPE_TI);
    }

    @Override
    protected ItemMerge mergeItem(Item dataStoreItem, Item mappedItem, Path itemSyncDir) {
        if(dataStoreItem instanceof TiItem && mappedItem instanceof TiItem) {
            TiItem dataStoreTi = (TiItem) dataStoreItem;
            TiItem mappedTi = (TiItem) mappedItem;
            dataStoreTi.getTranslations().getEsp().setTable(mappedTi.getTranslations().getEsp().getTable());
        } else if(dataStoreItem instanceof McItem && mappedItem instanceof McItem) {
            McItem dataStoreMc = (McItem) dataStoreItem;
            McItem mappedMc = (McItem) mappedItem;
            dataStoreMc.getTranslations().getEsp().setOptions(mappedMc.getTranslations().getEsp().getOptions());
        } else if(dataStoreItem instanceof MsItem && mappedItem instanceof MsItem) {
            MsItem dataStoreMs = (MsItem) dataStoreItem;
            MsItem mappedMs = (MsItem) mappedItem;
            dataStoreMs.getTranslations().getEsp().setOptions(mappedMs.getTranslations().getEsp().getOptions());
        }

        return new ItemMerge(dataStoreItem, itemSyncDir, false);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.singleton(ItemConstants.Section.SECTION_TRANSLATIONS);
    }
}
