package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.glossary.GlossaryDialect;
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class Migration2082 extends AbstractMigration {
    private final AttachmentValidator attachmentValidator;

    public Migration2082(final Util util, final AttachmentValidator attachmentValidator) {
        super(util);
        this.attachmentValidator = attachmentValidator;
    }

    @Override
    protected void runMigration(final ItemInfo itemInfo,
                                final BranchInfo branchInfo,
                                final String version,
                                final MigrationDefinition migration,
                                final GitClient gitClient) {
        final Item item = gitClient.readModelFile();

        if (item.getGlossary() != null && !item.getGlossary().getTerms().isEmpty()) {
            for (GlossaryTerm term : item.getGlossary().getTerms()) {
                if (term.getLanguages() == null) {
                    continue;
                }

                removeInvalidAttachments(term.getLanguages().getArabic().getDialects());
                removeInvalidAttachments(term.getLanguages().getBurmese().getDialects());
                removeInvalidAttachments(term.getLanguages().getCantonese().getDialects());
                removeInvalidAttachments(term.getLanguages().getEnglish().getDialects());
                removeInvalidAttachments(term.getLanguages().getFilipino().getDialects());
                removeInvalidAttachments(term.getLanguages().getHmong().getDialects());
                removeInvalidAttachments(term.getLanguages().getKorean().getDialects());
                removeInvalidAttachments(term.getLanguages().getMandarin().getDialects());
                removeInvalidAttachments(term.getLanguages().getPunjabi().getDialects());
                removeInvalidAttachments(term.getLanguages().getRussian().getDialects());
                removeInvalidAttachments(term.getLanguages().getSomali().getDialects());
                removeInvalidAttachments(term.getLanguages().getSomali().getDialects());
                removeInvalidAttachments(term.getLanguages().getSpanish().getDialects());
                removeInvalidAttachments(term.getLanguages().getUkrainian().getDialects());
                removeInvalidAttachments(term.getLanguages().getVietnamese().getDialects());
            }
        }

        updateItemFiles(item, gitClient);
    }

    private void removeInvalidAttachments(List<GlossaryDialect> glossaryDialects) {
        if (glossaryDialects.isEmpty()) {
            return;
        }

        for (GlossaryDialect dialect : glossaryDialects) {
            List<Attachment> validAttachments = dialect.getAudioFiles().stream()
                .filter(attachment -> {
                    try {
                        attachmentValidator
                            .validateFileName(attachment.getFileName(), ItemConstants.Section.SECTION_GLOSSARY);
                    } catch (ValidationException e) {
                        return false;
                    }

                    return true;
                }).collect(Collectors.toList());

            dialect.setAudioFiles(validAttachments);
        }
    }
}
