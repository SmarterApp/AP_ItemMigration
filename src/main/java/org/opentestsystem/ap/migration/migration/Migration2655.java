package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Glossary;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.glossary.GlossaryDialect;
import org.opentestsystem.ap.common.model.glossary.GlossaryLanguage;
import org.opentestsystem.ap.common.model.glossary.GlossaryLanguages;
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm;
import org.opentestsystem.ap.common.saaif.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.lang.String.format;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TUT;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_GLOSSARY;

@Slf4j
@Component
public class Migration2655 extends AbstractImportMigration {

    public Migration2655(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {

        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, attachmentManager,
                applicationDependencyProvider);
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        String branch = migratedEntity.getBranchName();
        return BRANCH_MASTER.equalsIgnoreCase(branch)
                || SECTION_GLOSSARY.equalsIgnoreCase(branch)
                || SECTION_CORE.equalsIgnoreCase(branch);
    }

    @Override
    protected void checkSkipMigration(ItemEntity itemEntity) {
        Item item = itemEntity.getItemJson();
        if (TYPE_TUT.equalsIgnoreCase(item.getType())) {
            throw new SkipMigration(format("%s Skipped: Item %s it a tutorial which does not have glossary",
                    getMigrationName(), item.getId()));
        }
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        try {
            Path attachmentSyncDir = Files.createDirectory(new File("Migration2655-" + dataStoreItem.getId()).toPath());
            dataStoreItem.setGlossary(mappedItem.getGlossary());
            Set<String> filesToBeSynced = identifyFilesThatNeedToBeCopied(mappedItem.getGlossary());

            filesToBeSynced.forEach(s -> {
                File fileToCopy = new File(itemSyncDir.toFile(), s);
                if (fileToCopy.exists()) {
                    try {
                        Files.copy(fileToCopy.toPath(), new File(attachmentSyncDir.toFile(), s).toPath());
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            });

            return new ItemMerge(dataStoreItem, attachmentSyncDir, true);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.singleton(SECTION_GLOSSARY);
    }

    private Set<String> identifyFilesThatNeedToBeCopied(Glossary mappedGlossary) {
        return mappedGlossary.getTerms().stream()
                .map(GlossaryTerm::getLanguages)
                .flatMap((Function<GlossaryLanguages, Stream<String>>) glossaryLanguages -> {
                    Set<String> fileNames = new HashSet<>();
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getArabic()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getBurmese()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getCantonese()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getEnglish()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getFilipino()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getHmong()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getKorean()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getMandarin()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getPunjabi()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getRussian()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getSomali()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getSpanish()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getUkrainian()));
                    fileNames.addAll(getAttachmentNames(glossaryLanguages.getVietnamese()));
                    return fileNames.stream();
                })
                .collect(Collectors.toSet());
    }

    private Set<String> getAttachmentNames(GlossaryLanguage glossaryLanguage) {
        return glossaryLanguage.getDialects().stream()
                .map(GlossaryDialect::getAudioFiles)
                .flatMap((Function<List<Attachment>, Stream<Attachment>>) Collection::stream)
                .map(Attachment::getFileName)
                .collect(Collectors.toSet());
    }
}
