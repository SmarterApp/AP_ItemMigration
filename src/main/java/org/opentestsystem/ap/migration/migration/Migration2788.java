package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Asl;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.attachment.AttachmentRenameRequest;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Slf4j
@Component
public class Migration2788 extends AbstractDataStoreMigration {

    public Migration2788(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility,
            dataStoreAttachmentManager);
    }

    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        final Item item = migratedEntity.getItemJson();
        return (BRANCH_MASTER.equalsIgnoreCase(migratedEntity.getBranchName()))
            && (item.getAsl() != null && isNotEmpty(item.getAsl().getAttachments()));
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, MigrationContext migrationContext) {
        final Item item = itemEntity.getItemJson();

        final String itemId = itemEntity.getItemId();

        final Asl asl = itemEntity.getItemJson().getAsl();

        final List<AttachmentRenameRequest> requestList = new ArrayList<>();

        asl.getAttachments().forEach(attachment -> {
            final String existingFileName = attachment.getFileName();

            String targetFileName = existingFileName.toLowerCase();

            // consider imported items that need their ITS ID replaced with item ID
            if (!existingFileName.contains(itemId) && StringUtils.isNotBlank(item.getItsId())) {
                targetFileName = targetFileName.replace(item.getItsId(), item.getId());
            }

            targetFileName = targetFileName.replace("_asl_stem.", "_ASL_STEM.");

            if(targetFileName.equals(existingFileName)) {
                return;
            }

            attachment.setFileName(targetFileName);

            requestList
                .add(new AttachmentRenameRequest(itemId, itemEntity.getBranchName(), existingFileName, targetFileName));
        });

        if (!requestList.isEmpty()) {
            dataStoreAttachmentManager.renameAttachments(requestList);
        }

        return itemEntity;
    }
}
