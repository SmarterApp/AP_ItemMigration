package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.springframework.stereotype.Component;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EQ;

/**
 * IAT-2894: 4.6.1 Write EQ spec defining how all right & left label features should be written to SAAIF files
 *
 * We need to regenerated EQ items.  No blocking edits, etc.  Simply regen so the EAX is written in V2 format.
 */
@Component
public class Migration2894 extends AbstractDataStoreMigration {

    public Migration2894(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, attachmentManager);
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return BRANCH_MASTER.equalsIgnoreCase(migratedEntity.getBranchName());
    }

    @Override
    public ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        if (!TYPE_EQ.equalsIgnoreCase(itemEntity.getItemJson().getType())) {
            throw new SkipMigration("item is not EQ");
        }
        EqItem item = (EqItem) itemEntity.getItemJson();
        if (!item.getCore().getEquationEditorConfiguration().isManagedByIat()) {
            throw new SkipMigration("eq item equation editor not managed by IAT");
        }
        return itemEntity;
    }
}
