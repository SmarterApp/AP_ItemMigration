package org.opentestsystem.ap.migration.migration;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.Collection;
import java.util.Collections;

import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TI;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_IMAGES;

@Component
public class Migration3025 extends AbstractImportMigration {

    public Migration3025(final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final ItemManagerEventProducer eventProducer, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager, final ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider, TYPE_EQ, TYPE_GI, TYPE_TI);
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        if(StringUtils.isNotBlank(((AssessmentItem) dataStoreItem).getCore().getScoring().getRubric())) {
            throw new SkipMigration("Skipping Migration3025 for item %s because it has a non blank rubric", dataStoreItem.getId());
        }

        // imported rubrics can have images, must set image resources
        dataStoreItem.setImages(mappedItem.getImages());
        // set scoring.rubric on the model
        ((AssessmentItem) dataStoreItem).getCore().getScoring().setRubric(
                ((AssessmentItem) mappedItem).getCore().getScoring().getRubric());
        // this needs to be true for imported items so the rubric field shows on the scoring tab
        ((AssessmentItem) dataStoreItem).getCore().getScoring().setManagedByIat(true);
        return new ItemMerge(dataStoreItem, itemSyncDir, YES_SYNC_ATTACHMENTS);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.singleton(SECTION_IMAGES);
    }
}
