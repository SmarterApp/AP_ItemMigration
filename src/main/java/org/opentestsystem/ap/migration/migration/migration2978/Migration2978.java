package org.opentestsystem.ap.migration.migration.migration2978;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.ListUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdater;
import org.opentestsystem.ap.migration.migration.AbstractImportMigration;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_TRANSLATIONS;

@Slf4j
@Component
public class Migration2978 extends AbstractImportMigration {

    public Migration2978(ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager,
                         ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility,
            dataStoreAttachmentManager, applicationDependencyProvider);
    }

    /**
     * Migrate master, core, and translations.  Only these have rich text content with image placeholders for MathML
     * equations.
     *
     * @param migratedEntity The entity holding the branch name.
     * @return
     */
    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        String branch = migratedEntity.getBranchName();
        return BRANCH_MASTER.equalsIgnoreCase(branch)
            || SECTION_CORE.equalsIgnoreCase(branch)
            || SECTION_TRANSLATIONS.equalsIgnoreCase(branch);

    }

    @Override
    protected ItemMerge mergeItem(Item dataStoreItem, Item mappedItem, Path itemSyncDir) {
        return new ItemMerge(dataStoreItem, itemSyncDir, DO_NOT_SYNC_ATTACHMENTS);
    }

    @Override
    protected ItemMerge mergeItemFromImportData(ItemMerge itemMerge, ImportItem importItem, Path itemSyncDir) {
        Item item = itemMerge.getMergedItem();

        List<ItemImageResource> imageResources = ListUtils.emptyIfNull(item.getImages().getImageResources());

        MathMLContentUpdateCommand updateCommand = new MathMLContentUpdateCommand(imageResources, itemSyncDir);
        ContentUpdater contentUpdater = this.contentUpdaterFactory.getContentUpdaterForType(item.getType());
        contentUpdater.updateContent(item, updateCommand);

        return new ItemMerge(item, itemSyncDir, DO_NOT_SYNC_ATTACHMENTS);
    }

    @Override
    protected void checkSkipMigration(ImportItem importItem) {
        if (importItem.getItemProps().getItemType().equalsIgnoreCase(ItemConstants.ItemType.TYPE_TUT)) {
            throw new SkipMigration(String
                .format("Item %s is a Tutorial. No migration is necessary.", importItem.getItemProps().getItemId()));
        }
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.emptyList();
    }

}
