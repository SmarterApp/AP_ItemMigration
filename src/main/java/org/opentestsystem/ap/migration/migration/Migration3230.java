package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TI;

@Slf4j
@Component
public class Migration3230 extends AbstractMigration {

    public Migration3230(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility,
            dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, MigrationContext migrationContext) {
        return itemEntity;
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return (BRANCH_MASTER.equalsIgnoreCase(migratedEntity.getBranchName())
            && TYPE_TI.equalsIgnoreCase(migratedEntity.getItemJson().getType()));
    }
}
