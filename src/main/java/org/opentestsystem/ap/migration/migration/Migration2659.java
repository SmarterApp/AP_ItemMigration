package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Cc;
import org.opentestsystem.ap.common.model.attachment.AttachmentRenameRequest;
import org.opentestsystem.ap.common.saaif.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.util.AudioUtil;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_STIM;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CC;

@Slf4j
@Component
public class Migration2659 extends AbstractDataStoreMigration {

    public Migration2659(final ApplicationDependencyProvider applicationDependencyProvider, final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final ItemManagerEventProducer eventProducer, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, MigrationContext migrationContext) {
        if (!BRANCH_MASTER.equalsIgnoreCase(itemEntity.getBranchName()) && !SECTION_CC.equalsIgnoreCase(itemEntity.getBranchName())) {
            throw new SkipMigration(format("Migration2569 Skipped: branch is not impacted by the change for item %s", itemEntity.getItemId()));
        }

        if (!TYPE_STIM.equalsIgnoreCase(itemEntity.getItemJson().getType())) {
            throw new SkipMigration(
                    format("Migration2659: Skipped: Item %s is not a stim and only stims support closed caption", itemEntity.getItemId()));
        }

        if (isBlank(itemEntity.getItemJson().getItsId())) {
            throw new SkipMigration(format("Migration2659 Skipped: Item %s has no ITS ID", itemEntity.getItemId()));
        }

        if (itemEntity.getItemJson().getCc() == null
                || itemEntity.getItemJson().getCc().getItemCcAudioAssociations().isEmpty()) {
            throw new SkipMigration(format("Migration2659: item %s does not have CC so nothing to migrate", itemEntity.getItemId()));
        }

        Cc cc = itemEntity.getItemJson().getCc();
        final String itsId = itemEntity.getItemJson().getItsId();
        final String itemId = itemEntity.getItemId();
        List<AttachmentRenameRequest> renameRequests = new ArrayList<>();

        for (Attachment attachment : cc.getAttachments()) {
            final String existingFileName = attachment.getFileName();
            if (!existingFileName.contains(itemId)) {
                final String targetFileName = AudioUtil.rename(attachment.getFileName(), itemId, itsId);

                //Rename the attachment
                attachment.setFileName(targetFileName);

                //Rename all the attachment associations
                itemEntity.getItemJson().getCc().getItemCcAudioAssociations().stream()
                        .filter(itemCcAudioAssociation -> itemCcAudioAssociation.getCcFileName().equals(existingFileName))
                        .forEach(itemCcAudioAssociation -> itemCcAudioAssociation.setCcFileName(targetFileName));

                renameRequests.add(new AttachmentRenameRequest(itemId, itemEntity.getBranchName(), existingFileName, targetFileName));
            }
        }

        if (!renameRequests.isEmpty()) {
            dataStoreAttachmentManager.renameAttachments(renameRequests);
        } else {
            throw new SkipMigration(format("Migration 2659: item %s did not have any attachments to rename", itemId));
        }

        return itemEntity;
    }
}
