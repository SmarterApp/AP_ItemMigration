package org.opentestsystem.ap.migration.migration;

import java.util.List;

import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.util.SpringUtil;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.apache.commons.lang3.StringUtils.isNotBlank;

@Component
public class MigrationFactory {

    private final Util util;

    private final SpringUtil springUtil;

    public MigrationFactory(final Util util, final SpringUtil springUtil) {
        this.util = util;
        this.springUtil = springUtil;
    }

    public List<MigrationDefinition> getMigrations(final String migrationKey) {
        return util.getMigrations(migrationKey);
    }

    public String getNextMigrationKey(final String migrationKey) {
        final List<String> migrationKeys = util.getMigrationSetKeys();

        String nextMigrationKey = null;

        if (isNotEmpty(migrationKeys)) {
            // initialize to the first migration
            nextMigrationKey = migrationKeys.get(0);

            if (isNotBlank(migrationKey)) {
                int index = migrationKeys.indexOf(migrationKey);
                if (migrationKeys.size() > index + 1) {
                    nextMigrationKey = migrationKeys.get(index + 1);
                } else {
                    nextMigrationKey = null;
                }
            }
        }
        // null means there are no more migrations
        return nextMigrationKey;
    }

    public MigrationDefinition getNextMigration(final String migrationKey, final String migrationName) {
        final List<MigrationDefinition> migrationDefinitions = util.getMigrations(migrationKey);

        MigrationDefinition nextMigration = null;

        if (isNotEmpty(migrationDefinitions)) {
            if (isNotBlank(migrationName)) {
                int index = migrationDefinitions.indexOf(new MigrationDefinition(migrationName, EMPTY));
                if (index == -1) {
                    throw new SystemException(
                        "Can't get the next migration. The one provided does not exist: " + migrationName);
                }
                if (migrationDefinitions.size() > index + 1) {
                    nextMigration = migrationDefinitions.get(index + 1);
                }
            } else {
                // migrationName has no value so return the first migration
                nextMigration = migrationDefinitions.get(0);
            }
        } else {
            final String nextMigrationKey = getNextMigrationKey(migrationKey);

            if (isNotBlank(nextMigrationKey)) {
                nextMigration = getNextMigration(nextMigrationKey, EMPTY);
            }
        }
        // null means there are no more migrations
        return nextMigration;
    }


    public Migration getMigration(final String migrationName) {
        final Migration migration = springUtil.getMigration(migrationName);
        if (migration == null) {
            throw new SystemException("No migration exists for " + migrationName);
        }
        return migration;
    }
}
