package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.DataStoreMigration;
import org.opentestsystem.ap.migration.util.SpringUtil;
import org.opentestsystem.ap.migration.util.ApplicationUtility;
import org.springframework.stereotype.Component;

import java.util.List;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.apache.commons.lang3.StringUtils.isNotBlank;

@Component
public class MigrationFactory {

    private final ApplicationUtility applicationUtility;

    private final ApplicationProperties applicationProperties;

    private final SpringUtil springUtil;

    public MigrationFactory(final ApplicationUtility applicationUtility, final SpringUtil springUtil) {
        this.applicationUtility = applicationUtility;
        this.applicationProperties = applicationUtility.getApplicationProperties();
        this.springUtil = springUtil;
    }

    public List<ApplicationProperties.MigrationDefinition> getMigrations(final String migrationKey) {
        return applicationUtility.getMigrations(migrationKey);
    }

    public String getNextMigrationSetKey(final String currentKey) {
        final List<String> migrationKeys = applicationUtility.getMigrationSetKeys();
        return getNextKey(migrationKeys, currentKey);
    }

    private String getNextKey(List<String> migrationKeys, String currentKey) {
        String nextMigrationKey = null;

        if (isNotEmpty(migrationKeys)) {
            // initialize to the first migration
            nextMigrationKey = migrationKeys.get(0);

            if (isNotBlank(currentKey)) {
                int index = migrationKeys.indexOf(currentKey);
                if (migrationKeys.size() > index + 1) {
                    nextMigrationKey = migrationKeys.get(index + 1);
                } else {
                    nextMigrationKey = null;
                }
            }
        }
        // null means there are no more migrations
        return nextMigrationKey;
    }

    public Migration getMigration(final String migrationName) {
        final Migration migration = springUtil.getMigration(migrationName);
        if (migration == null) {
            throw new SystemException("No migration exists for " + migrationName);
        }
        return migration;
    }
}
