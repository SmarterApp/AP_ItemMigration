package org.opentestsystem.ap.migration.migration;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.springframework.stereotype.Component;

import static java.lang.String.format;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TUT;

@Component
public class Migration2785 extends AbstractDataStoreMigration {

    public Migration2785(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility,
                dataStoreAttachmentManager);
    }

    private void checkSkipMigration(ItemEntity itemEntity) {
        Item item = itemEntity.getItemJson();
        if (Integer.parseInt(itemEntity.getItemId()) >= 200000) {
            throw new SkipMigration(
                    format("Migration2785 Skipped: Item %s is not imported.  No updates necessary",
                            itemEntity.getItemId()));

        }
        if (TYPE_TUT.equalsIgnoreCase(item.getType())) {
            throw new SkipMigration(
                    format("Migration2785 Skipped: Item %s is a tutorial which does not have metadata", item.getId()));
        }
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        this.checkSkipMigration(itemEntity);
        applyMetadataVersionMigration(itemEntity);
        return itemEntity;
    }

    private void applyMetadataVersionMigration(ItemEntity itemEntity) {
        if (StringUtils.isNotBlank(itemEntity.getItemJson().getCore().getMetadata().getVersion())) {
            String version = itemEntity.getItemJson().getCore().getMetadata().getVersion();
            if (!version.contains(".")) {
                itemEntity.getItemJson().getCore().getMetadata().setVersion(version + ".0");
            }
        }
    }
}
