package org.opentestsystem.ap.migration.migration;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

public abstract class AbstractImportMigration extends AbstractDataStoreMigration {
    private final String migrationName;
    private final String migrationItemType;
    private final MigrationFileUtil migrationFileUtil;
    private final GitLabSyncManager itemBankSyncManager;

    public AbstractImportMigration(final ApplicationProperties applicationProperties,
                                   final DataStoreDataManager dataManager,
                                   final ItemManagerEventProducer eventProducer,
                                   final DataStoreUtility dataStoreUtility,
                                   final DataStoreAttachmentManager dataStoreAttachmentManager,
                                   final ApplicationDependencyProvider applicationDependencyProvider) {
        this(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager,
                applicationDependencyProvider, StringUtils.EMPTY);
    }

    public AbstractImportMigration(final ApplicationProperties applicationProperties,
                                   final DataStoreDataManager dataManager,
                                   final ItemManagerEventProducer eventProducer,
                                   final DataStoreUtility dataStoreUtility,
                                   final DataStoreAttachmentManager dataStoreAttachmentManager,
                                   final ApplicationDependencyProvider applicationDependencyProvider,
                                   final String migrationItemType) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility,
                dataStoreAttachmentManager);
        this.migrationName = getClass().getSimpleName();
        this.migrationItemType = migrationItemType;
        this.migrationFileUtil = applicationDependencyProvider.getMigrationFileUtil();
        this.itemBankSyncManager = applicationDependencyProvider.getItemBankSyncManager();
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity) {
        this.checkSkipMigration(itemEntity);

        ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() ->
                new SkipMigration(String.format("%s Skipped: Could not find import files for item %s", migrationName,
                        itemEntity.getItemId())));

        Item tiItem = itemEntity.getItemJson();

        final IatModelMapper mapper = IatModelMapperFactory.getInstance().newModelMapper(tiItem.getType());

        try {
            Path itemSyncDir = Files.createTempDirectory(itemEntity.getItemId());

            Item mappedItem = mapper.mapSaaifToIATModel(importItem.getItemProps(),
                    tiItem,
                    importItem.getItemRelease(),
                    importItem.getSmarterAppMetadata(),
                    importItem.getWordlistreleaseType().orElse(null),
                    importItem.getWordlistPathString(),
                    itemSyncDir,
                    importItem.getExpandedImportItemPath().toString());

            itemEntity.setItemJson(mappedItem);

            if (this.shouldSyncAttachmentsToDataStore(itemEntity)) {
                itemBankSyncManager.syncAttachmentsToDataStore(itemEntity.getItemId(), BRANCH_MASTER, itemSyncDir);
            }
        } catch (IOException e) {
            throw new RuntimeException(
                    String.format("%s: Issue migrating item %s exception: %s", migrationName, itemEntity.getItemId(),
                            e.getMessage()));
        }

        return itemEntity;
    }

    /**
     * Throws {@link SkipMigration} if the migration should be skipped for the given entity.
     *
     * @param itemEntity The entity to check if the migration should be skipped.
     */
    protected void checkSkipMigration(ItemEntity itemEntity) {
        if (isNotBlank(migrationItemType) && !migrationItemType.equals(itemEntity.getItemJson().getType())) {
            throw new SkipMigration(
                    String.format("%s Skipped: item %s is not of type %s", migrationName, itemEntity.getItemId(),
                            migrationItemType));
        }
    }

    /**
     * By passing syncing attachemnts to the data store (e.g. S3) if the migration does not require it.  Also you can
     * skip syncing depending on the branch the entity represents.  For example, sync for master and braille, but skip
     * sync for all other branches.
     *
     * @param itemEntity The entity to check if sync applies.
     * @return True if sync to the data store should be done. False if no sync is required.
     */
    protected boolean shouldSyncAttachmentsToDataStore(ItemEntity itemEntity) {
        return true;
    }
}
