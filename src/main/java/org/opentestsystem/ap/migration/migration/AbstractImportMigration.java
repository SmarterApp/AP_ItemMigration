package org.opentestsystem.ap.migration.migration;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

public abstract class AbstractImportMigration extends AbstractDataStoreMigration {
    private final static Logger log = LoggerFactory.getLogger(AbstractDataStoreMigration.class);

    private final String migrationName;
    private final Set<String> migrationItemType;
    private final MigrationFileUtil migrationFileUtil;
    private final GitLabSyncManager itemBankSyncManager;
    private final ItemFactory itemFactory;

    public AbstractImportMigration(final ApplicationProperties applicationProperties,
                                   final DataStoreDataManager dataManager,
                                   final ItemManagerEventProducer eventProducer,
                                   final DataStoreUtility dataStoreUtility,
                                   final DataStoreAttachmentManager dataStoreAttachmentManager,
                                   final ApplicationDependencyProvider applicationDependencyProvider) {
        this(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager,
                applicationDependencyProvider, StringUtils.EMPTY);
    }

    public AbstractImportMigration(final ApplicationProperties applicationProperties,
                                   final DataStoreDataManager dataManager,
                                   final ItemManagerEventProducer eventProducer,
                                   final DataStoreUtility dataStoreUtility,
                                   final DataStoreAttachmentManager dataStoreAttachmentManager,
                                   final ApplicationDependencyProvider applicationDependencyProvider,
                                   final String... migrationItemType) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility,
                dataStoreAttachmentManager);
        this.migrationName = getClass().getSimpleName();
        this.migrationItemType = Arrays.stream(migrationItemType).filter(s -> !s.isEmpty()).collect(Collectors.toSet());
        this.migrationFileUtil = applicationDependencyProvider.getMigrationFileUtil();
        this.itemBankSyncManager = applicationDependencyProvider.getItemBankSyncManager();
        this.itemFactory = new ItemFactory();
    }

    public MigrationFileUtil getMigrationFileUtil() {
        return migrationFileUtil;
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity) {
        this.checkSkipMigration(itemEntity);

        if (doesItemHaveBlockingUserEdits(itemEntity)) {
            throw new SkipMigration("%s: cannot run migration due to blocking user edits", getMigrationName());
        }

        ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() ->
                new SkipMigration("%s Skipped: Could not find import files for item %s", migrationName,
                        itemEntity.getItemId()));

        IatModelMapper mapper = IatModelMapperFactory.getInstance().newModelMapper(
                itemEntity.getItemJson().getType());

        try {
            Path itemSyncDir = Files.createTempDirectory(itemEntity.getItemId());

            Item newItem = itemFactory.newItem(itemEntity.getItemJson().getId(), itemEntity.getItemJson().getType());
            newItem.setItsId(itemEntity.getItemJson().getItsId());

            Item mappedItem = mapper.mapSaaifToIATModel(importItem.getItemProps(),
                    newItem,
                    importItem.getItemRelease(),
                    importItem.getSmarterAppMetadata(),
                    importItem.getWordlistreleaseType().orElse(null),
                    importItem.getWordlistPathString(),
                    itemSyncDir,
                    importItem.getItemImportSourcePath().toString());

            ItemMerge itemMerge = mergeItem(itemEntity.getItemJson(), mappedItem, itemSyncDir);

            itemEntity.setItemJson(itemMerge.getMergedItem());
            syncAttachmentsToDataStore(itemEntity, itemMerge, BRANCH_MASTER);

            cleanFiles(itemMerge, itemSyncDir);
        } catch (IOException e) {
            throw new RuntimeException(
                    String.format("%s: Issue migrating item %s exception: %s", migrationName, itemEntity.getItemId(),
                            e.getMessage()));
        }

        return itemEntity;
    }

    private void cleanFiles(ItemMerge itemMerge, Path itemSyncDir) {
        try {
            FileUtils.deleteDirectory(itemMerge.getAttachmentSyncDir().toFile());

            if (!itemMerge.getAttachmentSyncDir().equals(itemSyncDir.getFileName())) {
                FileUtils.deleteDirectory(itemSyncDir.toFile());
            }
        } catch (IOException e) {
            log.error("Could not delete import file", e);
        }
    }

    private boolean doesItemHaveBlockingUserEdits(final ItemEntity itemEntity) {
        Optional<String> sectionEditedBlockingMigration = Optional.empty();
        Collection<String> editedSectionsBlockingMigration = getEditedSectionsBlockingMigration();
        if (!editedSectionsBlockingMigration.isEmpty()) {
            List<String> sectionsEdited = dataManager.findSectionsEdited(itemEntity.getItemId());

            sectionEditedBlockingMigration = sectionsEdited
                    .stream()
                    .filter(sectionEdited -> editedSectionsBlockingMigration.stream().anyMatch(sectionEdited::equalsIgnoreCase))
                    .findFirst();
        }

        return sectionEditedBlockingMigration.isPresent();
    }

    abstract ItemMerge mergeItem(Item dataStoreItem, Item mappedItem, Path itemSyncDir);

    abstract Collection<String> getEditedSectionsBlockingMigration();

    /**
     * Throws {@link SkipMigration} if the migration should be skipped for the given entity.
     *
     * @param itemEntity The entity to check if the migration should be skipped.
     */
    protected void checkSkipMigration(ItemEntity itemEntity) {
        if (!migrationItemType.isEmpty() && !migrationItemType.contains(itemEntity.getItemJson().getType())) {
            throw new SkipMigration("%s Skipped: item %s is not of type %s", migrationName, itemEntity.getItemId(),
                    migrationItemType);
        }
    }

    /**
     * Technically we need to sync more than just the 'master' folder in S3.  If a user is editing braille for example
     * they may have uploaded a file(s).  Those files are uploaded to the 'braille' folder in S3.  If migration only
     * syncs to the 'master' when the user commits their braille changes it could overwrite the files on 'master'. It is
     * an edge case because it is unlikely anyone is editing imported items, and it is unlikely the migration and the
     * user are using the same file name.
     * <p>
     * One thought is check in S3 if the folder for the branch exists.  If not then there is no need to sync to the
     * branch folder in S3.  Or we check if the file exists in the branch folder and only sync if it does.
     * <p>
     * Concrete migrations can overwrite this as they see fit.
     *
     * @param itemEntity
     */
    private void syncAttachmentsToDataStore(ItemEntity itemEntity, ItemMerge itemMerge, String branch) {
        if(!itemMerge.isSyncAttachments()) {
            return;
        }

        // if we sync branches then we cannot sync everything in the itemSyncDir
        // braille should only sync braille files to the 'braille' folder in S3
        // asl should only sync asl files to the 'asl' folder in S3
        log.info("Import migration " + migrationName + " syncing attachments");
        itemBankSyncManager.syncAttachmentsToDataStore(itemEntity.getItemId(), branch, itemMerge.getAttachmentSyncDir());
    }

    public String getMigrationName() {
        return migrationName;
    }
}
