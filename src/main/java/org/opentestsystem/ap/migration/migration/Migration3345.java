package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.Set;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_HTQS;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TI;

/**
 * Migrates all items and sets the {@link org.opentestsystem.ap.common.model.Saaif} if not managed by TIMS.  Migrating all
 * items will ensure that the attachments are updated with the version id.
 */
@Component
public class Migration3345 extends AbstractMigration {
    private static final Set<String> SUPPORTED_TYPES = Sets.newHashSet(TYPE_GI, TYPE_TI, TYPE_HTQS, TYPE_EQ);

    public Migration3345(final ApplicationDependencyProvider applicationDependencyProvider, final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final DataStoreItemManager dataStoreItemManager, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        if (!SUPPORTED_TYPES.contains(itemEntity.getItemJson().getType()) || !itemEntity.getItemJson().isImported()) {
            throw new SkipMigration("Item is either TIMS managed or type does not support machine scoring not managed by TIMS " + itemEntity.getItemId());
        }

        AssessmentItem assessmentItem = (AssessmentItem) itemEntity.getItemJson();

        switch (assessmentItem.getType()) {
            case TYPE_GI:
            case TYPE_TI:
                updateQrxForTiAndGi(assessmentItem);
                break;
            case TYPE_EQ:
                updateEqItem(assessmentItem);
                break;
            case TYPE_HTQS:
                updateHtqsItem(assessmentItem);
                break;
        }

        return itemEntity;
    }

    private void updateQrxForTiAndGi(final AssessmentItem assessmentItem) {
        if (!assessmentItem.getCore().getScoring().isMachineScoringManagedByIat()) {
            assessmentItem.getSaaif().setQrx(createQrxAttachment(assessmentItem.getId()));
        }
    }

    private void updateEqItem(final AssessmentItem assessmentItem) {
        EqItem model = (EqItem) assessmentItem;
        if (!model.getCore().getEquationEditorConfiguration().isManagedByIat()) {
            assessmentItem.getSaaif().setQrx(createQrxAttachment(assessmentItem.getId()));
        }
        if (!model.getCore().getScoring().isMachineScoringManagedByIat()) {
            Attachment eaxAttachment = new Attachment();
            eaxAttachment.setFileName(RepositoryUtil.getEaxFileName(assessmentItem.getId()));
            assessmentItem.getSaaif().setEax(eaxAttachment);
        }
    }

    private void updateHtqsItem(final AssessmentItem assessmentItem) {
        HtqsItem model = (HtqsItem) assessmentItem;
        if (!model.getCore().getEn().isManagedByIat() &&
                !model.getCore().getEn().getHtqSelectable().isManagedByIat()) {
            assessmentItem.getSaaif().setQrx(createQrxAttachment(assessmentItem.getId()));
        }
    }

    private Attachment createQrxAttachment(final String itemId) {
        Attachment qrxAttachment = new Attachment();
        qrxAttachment.setFileName(RepositoryUtil.getQrxFileName(itemId));
        return qrxAttachment;
    }
}
