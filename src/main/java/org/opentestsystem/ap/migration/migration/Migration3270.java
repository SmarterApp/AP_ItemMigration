package org.opentestsystem.ap.migration.migration;

import org.jsoup.nodes.Document;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.transformer.MapperUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdateCommand;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TUT;

@Component
public class Migration3270 extends AbstractMigration {

    public static String TAG_MATH = "math";
    public static String TAG_MI = "mi";
    public static String ATTR_MATHVARIANT = "mathvariant";
    public static String ATTR_NORMAL = "normal";

    public Migration3270(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         DataStoreItemManager dataStoreItemManager,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager,
                dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        if (TYPE_TUT.equals(itemEntity.getItemJson().getType()) || !itemEntity.getItemJson().isImported()) {
            throw new SkipMigration("Item %s is not an imported Assessment item", itemEntity.getItemId());
        }

        //TODO: Skip when item has no MathMl

        Migration3270Command migration3270Command = new Migration3270Command();
        return migrateEntityContent(itemEntity, migration3270Command);
    }

    public static class Migration3270Command extends ContentUpdateCommand {
        @Override
        public String applyEnglishContentUpdate(String englishContentHtml) {
            final Document doc = newJsoupDocument(englishContentHtml);

            doc.getElementsByTag(TAG_MATH).forEach(math -> {
                math.getElementsByTag(TAG_MI).forEach(mi -> {
                    if (!mi.hasAttr(ATTR_MATHVARIANT) && mi.hasText()) {
                        mi.attr(ATTR_MATHVARIANT,ATTR_NORMAL);
                    }
                });
            });
            // Important to remove new lines on mapped content
            return MapperUtil.removeNewLine(doc.body().html());
        }

        @Override
        public String applyTranslatedContentUpdate(String language, String translatedContent, String englishContent) {
            return this.applyEnglishContentUpdate(translatedContent);
        }
    }
}
