package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.IatModelMapper;
import org.opentestsystem.ap.common.saaif.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.nio.file.Path;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_BRAILLE;

@Slf4j
@Component
public class Migration2570 extends AbstractMigration {

    protected final GitlabClient gitlabClient;
    protected final AppAssembler appAssembler;
    protected final MigrationFileUtil migrationFileUtil;
    protected final IatModelMapperFactory iatModelMapperFactory;

    public Migration2570(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager,
                         DataStoreItemManager dataStoreItemManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, attachmentManager);
        this.gitlabClient = applicationDependencyProvider.getGitlabClient();
        this.appAssembler = applicationDependencyProvider.getAppAssembler();
        this.migrationFileUtil = applicationDependencyProvider.getMigrationFileUtil();
        this.iatModelMapperFactory = applicationDependencyProvider.getIatModelMapperFactory();
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        String branch = migratedEntity.getBranchName();
        return BRANCH_MASTER.equalsIgnoreCase(branch) || SECTION_BRAILLE.equalsIgnoreCase(branch);
    }

    @Override
    public ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        Item item = itemEntity.getItemJson();

        this.check(item);

        ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() ->
                new SkipMigration(
                        format("Migration 2570 - item %s - error processing import zip", itemEntity.getItemId())));

        // Create temporary directory to store attachment files that will be synced to S3
        Path itemSyncDir = this.createTempDir(item.getId());

        IatModelMapper mapper = this.iatModelMapperFactory.newModelMapper(item.getType());

        Item mappedItem = mapper.mapSaaifToIATModel(
                importItem.getItemProps(),
                item,
                importItem.getItemRelease(),
                importItem.getSmarterAppMetadata(),
                importItem.getWordlistreleaseType().orElse(null),
                importItem.getWordlistPathString(),
                itemSyncDir,
                importItem.getItemImportSourcePath().toString());

        itemEntity.setItemJson(mappedItem);

        this.syncAttachments(itemEntity, itemSyncDir);

        return itemEntity;
    }

    private void check(Item item) {
        if (isBlank(item.getItsId())) {
            throw new SkipMigration(format("Item %s has no ITS ID", item.getId()));
        }
    }
}
