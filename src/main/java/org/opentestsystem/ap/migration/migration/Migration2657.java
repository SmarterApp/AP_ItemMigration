package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.Collection;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static java.lang.String.format;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_STIM;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_AUDIO;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_TRANSLATIONS;

@Slf4j
@Component
public class Migration2657 extends AbstractImportMigration {

    private static final String AUDIO_NAMING_PATTERN = "^(stim|item|passage)_(\\w+).*\\.(m4a|ogg)$";

    private static final Pattern AUDIO_PATTERN = Pattern.compile(AUDIO_NAMING_PATTERN, Pattern.CASE_INSENSITIVE);

    public Migration2657(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {

        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, attachmentManager,
                applicationDependencyProvider);

    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        String branch = migratedEntity.getBranchName();
        return BRANCH_MASTER.equalsIgnoreCase(branch)
                || SECTION_CORE.equalsIgnoreCase(branch)
                || SECTION_AUDIO.equalsIgnoreCase(branch)
                || SECTION_TRANSLATIONS.equalsIgnoreCase(branch);
    }

    @Override
    protected void checkSkipMigration(ItemEntity itemEntity) {
        Item item = itemEntity.getItemJson();

        if (!StringUtils.equalsIgnoreCase(item.getType(), TYPE_STIM)) {
            throw new SkipMigration(format("%s Skipped: Item %s is not a stim", getMigrationName(), item.getId()));
        }
        if (StringUtils.isBlank(item.getItsId())) {
            throw new SkipMigration(format("%s Skipped: Stim %s has no ITS ID", getMigrationName(), item.getId()));
        }

        checkAudio((StimItem) item);
    }

    void checkAudio(StimItem stim) {
        List<String> audioFileNames = this.getAudioFileNames(stim.getCore().getEn().getContent());

        if (CollectionUtils.isEmpty(audioFileNames)) {
            throw new SkipMigration(format("%s Skipped: Stim %s does not have any anchor tag audio references",
                    getMigrationName(), stim.getId()));
        }

        List<Boolean> validNamesCheck = audioFileNames.stream().map(this::isValidAudioFileName)
                .collect(Collectors.toList());

        if (validNamesCheck.contains(Boolean.TRUE)) {
            // there is at least one anchor tag referencing a valid audio file name
            return;
        } else {
            throw new SkipMigration(
                    format(
                            "%s Skipped: Stim %s has anchor tags but none have a valid audio file name %s",
                            getMigrationName(),
                            stim.getId(),
                            audioFileNames));
        }
    }

    List<String> getAudioFileNames(String content) {
        Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        List<String> audioFileNames = doc.getElementsByTag("a").stream()
                .map(anchor -> StringUtils.lowerCase(anchor.attr("href")))
                .collect(Collectors.toList());

        return audioFileNames;
    }

    @Override
    ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        dataStoreItem.getCore().setEn(mappedItem.getCore().getEn());
        dataStoreItem.getTranslations().setEsp(mappedItem.getTranslations().getEsp());
        dataStoreItem.setAudio(mappedItem.getAudio());

        return new ItemMerge(dataStoreItem, itemSyncDir, true);
    }

    @Override
    Collection<String> getEditedSectionsBlockingMigration() {
        return Sets.newHashSet(SECTION_CORE, SECTION_TRANSLATIONS, SECTION_AUDIO);
    }

    private boolean isValidAudioFileName(String fileName) {
        Matcher matcher = AUDIO_PATTERN.matcher(fileName);
        return matcher.matches();
    }
}
