package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.mapper.StimModelMapper;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static java.lang.String.format;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_STIM;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_AUDIO;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;

@Slf4j
@Component
public class Migration2657 extends AbstractDataStoreMigration {

    private static final String AUDIO_NAMING_PATTERN = "^(stim|item|passage)_(\\w+).*\\.(m4a|ogg)$";

    private static final Pattern AUDIO_PATTERN = Pattern.compile(AUDIO_NAMING_PATTERN, Pattern.CASE_INSENSITIVE);

    protected final GitlabClient gitlabClient;
    protected final AppAssembler appAssembler;
    protected final MigrationFileUtil migrationFileUtil;
    protected final IatModelMapperFactory iatModelMapperFactory;

    public Migration2657(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {

        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, attachmentManager);

        this.gitlabClient = applicationDependencyProvider.getGitlabClient();
        this.appAssembler = applicationDependencyProvider.getAppAssembler();
        this.migrationFileUtil = applicationDependencyProvider.getMigrationFileUtil();
        this.iatModelMapperFactory = applicationDependencyProvider.getIatModelMapperFactory();
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        String branch = migratedEntity.getBranchName();
        if (BRANCH_MASTER.equalsIgnoreCase(branch)
                || SECTION_AUDIO.equalsIgnoreCase(branch)
                || SECTION_CORE.equalsIgnoreCase(branch)) {
            return true;
        }
        return false;
    }

    @Override
    public ItemEntity migrateEntity(ItemEntity itemEntity) {
        Item item = itemEntity.getItemJson();
        check(item);

        StimItem stim = (StimItem) item;
        checkAudio(stim);

        String branch = itemEntity.getBranchName();

        ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() ->
                new SkipMigration(
                        format("Migration 2657 - item %s - error processing import zip", itemEntity.getItemId())));

        // Create temporary directory to store attachment files that might need syncing to S3
        Path itemSyncDir = this.createTempDir(stim.getId());

        StimModelMapper mapper = (StimModelMapper) this.iatModelMapperFactory.newModelMapper(TYPE_STIM);

        StimItem mappedStim = (StimItem) mapper.mapSaaifToIATModel(
                importItem.getItemProps(),
                stim,
                importItem.getItemRelease(),
                importItem.getSmarterAppMetadata(),
                importItem.getWordlistreleaseType().orElse(null),
                importItem.getWordlistPathString(),
                itemSyncDir,
                importItem.getItemImportSourcePath().toString());

        itemEntity.setItemJson(mappedStim);

        if (this.shouldSyncAudioFilesToS3(branch)) {
            this.syncAttachments(itemEntity, itemSyncDir);
        }

        return itemEntity;
    }

    void check(Item item) {
        if (!StringUtils.equalsIgnoreCase(item.getType(), TYPE_STIM)) {
            throw new SkipMigration(format("Item %s is not a stim", item.getId()));
        }
        if (StringUtils.isBlank(item.getItsId())) {
            throw new SkipMigration(format("Stim %s has no ITS ID", item.getId()));
        }
    }

    void checkAudio(StimItem stim) {
        List<String> audioFileNames = this.getAudioFileNames(stim.getCore().getEn().getContent());

        if (CollectionUtils.isEmpty(audioFileNames)) {
            throw new SkipMigration(format("Stim %s does not have any anchor tag audio references", stim.getId()));
        }

        List<Boolean> validNamesCheck = audioFileNames.stream().map(this::isValidAudioFileName)
                .collect(Collectors.toList());

        if (validNamesCheck.contains(Boolean.TRUE)) {
            // there is at least one anchor tag referencing a valid audio file name
            return;
        } else {
            throw new SkipMigration(
                    format(
                            "Stim %s has anchor tags but none have a valid audio file name %s",
                            stim.getId(),
                            audioFileNames));
        }
    }

    List<String> getAudioFileNames(String content) {
        Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        List<String> audioFileNames = doc.getElementsByTag("a").stream()
                .map(anchor -> StringUtils.lowerCase(anchor.attr("href")))
                .collect(Collectors.toList());

        return audioFileNames;
    }

    private boolean isValidAudioFileName(String fileName) {
        Matcher matcher = AUDIO_PATTERN.matcher(fileName);
        return matcher.matches();
    }

    private boolean shouldSyncAudioFilesToS3(String branch) {
        return (BRANCH_MASTER.equalsIgnoreCase(branch) || SECTION_AUDIO.equalsIgnoreCase(branch)) ? true : false;
    }
}
