package org.opentestsystem.ap.migration.migration.migration2886;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.migration.AbstractMigration;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.springframework.stereotype.Component;

@Component
public class Migration2886NonImported extends AbstractMigration {

    public Migration2886NonImported(ApplicationDependencyProvider applicationDependencyProvider,
                                    ApplicationProperties applicationProperties,
                                    DataStoreDataManager dataManager,
                                    ItemManagerEventProducer eventProducer,
                                    DataStoreUtility dataStoreUtility,
                                    DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager,
                eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        Item item = itemEntity.getItemJson();
        if (item.isImported()) {
            throw new SkipMigration("not a TIMS created item, skip imported items");
        } else if (!(item instanceof MsItem)) {
            throw new SkipMigration("item not type MS");
        } else {
            // set maxAllowedAnswers to 0 (default value)
            ((AssessmentItem) item).getCore().getMetadata().setMaxAllowedAnswers("0");
            itemEntity.setItemJson(item);
        }
        return itemEntity;
    }
}

