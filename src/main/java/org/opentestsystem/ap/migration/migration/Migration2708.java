package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import static java.lang.String.format;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TUT;

/**
 * Recreates Saaif files for all non-Tutorial items.
 * Reason for this migration is IAT-2708 Validation: Score points error regarding quotes is generated against items with points assigned
 * Updates in AP_Common will fix validation error
 */
@Component
public class Migration2708 extends AbstractMigration {

    public Migration2708(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    private void checkSkipMigration(ItemEntity itemEntity) {
        Item item = itemEntity.getItemJson();

        if (TYPE_TUT.equalsIgnoreCase(item.getType())) {
            throw new SkipMigration(
                    format("Migration2708 Skipped: Item %s is a tutorial which does not have metadata", item.getId()));
        }
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        this.checkSkipMigration(itemEntity);
        return itemEntity;
    }
}