package org.opentestsystem.ap.migration.migration;

import lombok.Getter;
import lombok.Setter;
import org.apache.commons.lang3.StringUtils;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.transformer.MapperUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdateCommand;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdateCommandResult;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.Objects;

import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;
import static org.apache.commons.lang3.StringUtils.defaultString;
import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_TRANSLATIONS;

/**
 * IAT-3246: Imported styling remains on some items and does not render in preview.
 * <p>
 * This migration looks at all rich text fields for all item types.  If it finds in the rich text string the three HTML
 * styles we are looking then we will process the rich text.  The processing pulls 'font-weight:bold',
 * 'font-style:italic', and 'text-decoration:underline' out of the inline style on P tags and SPAN tags only.  It
 * removes it from the inline style and adds it to the inner html of the P or SPAN tag.  The tags added are 'strong',
 * 'em', and 'u'.
 */
@Component
public class Migration3246 extends AbstractMigration {

    public Migration3246(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         final DataStoreItemManager dataStoreItemManager,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility,
            dataStoreAttachmentManager);
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return StringUtils.equalsAny(migratedEntity.getBranchName(),
            BRANCH_MASTER, SECTION_CORE, SECTION_TRANSLATIONS);
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        if (!itemEntity.getItemJson().isImported()) {
            throw new SkipMigration("item %s is not imported", itemEntity.getItemId());
        }
        return this.migrateEntityContent(itemEntity, new Migration3246Command());
    }

    public static class Migration3246Command extends ContentUpdateCommand {

        @Override
        public ContentUpdateCommandResult applyEnglishContentUpdate(String richTextContent) {
            if (this.shouldProcess(richTextContent)) {
                Document doc = this.newJsoupDocument(richTextContent);
                this.updateParagraphStyles(doc);
                this.updateSpanStyles(doc);
                // Important to remove new lines on mapped content
                return new ContentUpdateCommandResult(true, MapperUtil.removeNewLine(doc.body().html()));
            } else {
                return new ContentUpdateCommandResult(false, richTextContent);
            }
        }

        @Override
        public ContentUpdateCommandResult applyTranslatedContentUpdate(String language, String translatedContent, String englishContent) {
            return this.applyEnglishContentUpdate(translatedContent);
        }

        public boolean shouldProcess(String content) {
            // font-weight can have 'bold' and 'bolder' we don't check for 'bolder' but it will match the way we are checking for 'bold'
            return (containsIgnoreCase(content, "font-weight") && containsIgnoreCase(content, "bold"))
                || (containsIgnoreCase(content, "font-style") && containsIgnoreCase(content, "italic"))
                || (containsIgnoreCase(content, "text-decoration") && containsIgnoreCase(content, "underline"));
        }

        private void updateParagraphStyles(Document doc) {
            Elements paragraphs = doc.select("p[style]");
            if (Objects.nonNull(paragraphs) && paragraphs.size() > 0) {
                for (Element paragraph : paragraphs) {
                    this.updateStyles(paragraph);
                }
            }
        }

        private void updateSpanStyles(Document doc) {
            Elements spans = doc.select("span[style]");
            if (Objects.nonNull(spans) && spans.size() > 0) {
                for (Element span : spans) {
                    this.updateStyles(span);
                }
            }
        }

        private void updateStyles(Element element) {
            StyleAttributeParser parser = new StyleAttributeParser(defaultString(element.attr("style")));
            element.attr("style", parser.parse());
            if (parser.isFontWeightBold()) {
                element.html("<strong>" + element.html() + "</strong>");
            }
            if (parser.isFontStyleItalic()) {
                element.html("<em>" + element.html() + "</em>");
            }
            if (parser.isTextDecorationUnderline()) {
                element.html("<u>" + element.html() + "</u>");
            }
        }
    }

    @Getter
    @Setter
    static class StyleAttributeParser {
        private static final String EMPTY = "";
        private static final String SPACE = " ";
        private static final String COLON = ":";
        private static final String SEMICOLON = ";";

        private static final String FONT_WEIGHT_BOLD = "font-weight:bold";
        private static final String FONT_STYLE_ITALIC = "font-style:italic";
        private static final String TEXT_DECORATION_UNDERLINE = "text-decoration:underline";

        private String styleAttributeString;

        private boolean fontWeightBold;
        private boolean fontStyleItalic;
        private boolean textDecorationUnderline;

        StyleAttributeParser(String styleAttributeString) {
            this.styleAttributeString = styleAttributeString;
        }

        public String parse() {
            String[] styles = defaultString(styleAttributeString).replace(SPACE, EMPTY).split(SEMICOLON);
            StringBuilder newStyleString = new StringBuilder();
            for (String style : styles) {
                String styleLowerCased = defaultString(style).toLowerCase();
                String[] split = style.split(COLON);
                if (Objects.nonNull(split)) {
                    if (StringUtils.equals(styleLowerCased, FONT_WEIGHT_BOLD)) {
                        this.fontWeightBold = true;
                    } else if (StringUtils.equals(styleLowerCased, FONT_STYLE_ITALIC)) {
                        this.fontStyleItalic = true;
                    } else if (StringUtils.equals(styleLowerCased, TEXT_DECORATION_UNDERLINE)) {
                        this.textDecorationUnderline = true;
                    } else {
                        newStyleString.append(style).append(SEMICOLON);
                    }
                }
            }
            return newStyleString.toString();
        }
    }
}
