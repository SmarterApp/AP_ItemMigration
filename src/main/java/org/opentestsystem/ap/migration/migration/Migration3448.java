package org.opentestsystem.ap.migration.migration;

import org.apache.commons.io.FilenameUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class Migration3448 extends AbstractMigration {
    public Migration3448(final ApplicationDependencyProvider applicationDependencyProvider, final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final DataStoreItemManager dataStoreItemManager, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        if(!ModelConstants.ItemType.TYPE_TUT.equals(itemEntity.getItemJson().getType())) {
            throw new SkipMigration("Migration3448 only impacts tutorial items: " + itemEntity.getItemId());
        }

        List<Attachment> htmlAttachments = dataStoreAttachmentManager.findAttachmentSummaries(itemEntity.getItemJson(), itemEntity.getBranchName())
                .stream()
                .filter(attachmentSummary -> {
                    final String extension = FilenameUtils.getExtension(attachmentSummary.getTimsFileKey());
                    return "html".equalsIgnoreCase(extension) || "htm".equalsIgnoreCase(extension);
                }).map(attachmentSummary -> {
                    Attachment attachment = new Attachment();
                    attachment.setVersionId(attachmentSummary.getVersionId());
                    attachment.setFileName(attachmentSummary.getTimsFileKey());
                    return attachment;
                }).collect(Collectors.toList());

        itemEntity.getItemJson().getSaaif().getSupplementalHtmlAttachments().addAll(htmlAttachments);

        return itemEntity;
    }
}
