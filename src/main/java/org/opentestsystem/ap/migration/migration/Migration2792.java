package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MS;

@Component
public class Migration2792 extends AbstractMigration {
    public Migration2792(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final DataStoreItemManager dataStoreItemManager,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, MigrationContext migrationContext) {
        final String itemType = itemEntity.getItemJson().getType();
        if(!itemEntity.getItemJson().isImported()
            || (!TYPE_EBSR.equals(itemType) && !TYPE_MS.equals(itemType))) {
            throw new SkipMigration("Migration 2792: Item %s type is not EBSR or MS", itemEntity.getId());
        }

        itemEntity.getItemJson().getCore().getMetadata().setScoringEngine("AutomaticWithKeys");

        return itemEntity;
    }
}
