package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import com.google.common.io.Files;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.eclipse.jgit.util.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collection;
import java.util.Optional;

@Slf4j
@Component
public class Migration2313Htqs extends AbstractImportMigration {

    public Migration2313Htqs(ApplicationProperties applicationProperties,
                             DataStoreDataManager dataManager,
                             ItemManagerEventProducer eventProducer,
                             DataStoreUtility dataStoreUtility,
                             DataStoreAttachmentManager dataStoreAttachmentManager,
                             ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility,
                dataStoreAttachmentManager, applicationDependencyProvider, ItemConstants.ItemType.TYPE_HTQS);
    }

    @Override
    ItemMerge mergeItem(Item dataStoreItem, Item mappedItem, Path itemSyncDir) {
        // This should only happen for ItemType.TYPE_HTQS
        HtqsItem entityHtqsItem = (HtqsItem) dataStoreItem;
        HtqsItem mappedHtqsItem = (HtqsItem) mappedItem;

        entityHtqsItem.setCore(mappedHtqsItem.getCore());
        entityHtqsItem.setTranslations(mappedHtqsItem.getTranslations());
        entityHtqsItem.getCore().getScoring().setManagedByIat(true);
        entityHtqsItem.getCore().getScoring().setMachineScoringManagedByIat(false);

        migrateImportQrxFile(itemSyncDir, dataStoreItem);

        return new ItemMerge(entityHtqsItem, itemSyncDir, true);
    }

    @Override
    Collection<String> getEditedSectionsBlockingMigration() {
        return Sets.newHashSet(ItemConstants.Section.SECTION_CORE,
                ItemConstants.Section.SECTION_GLOSSARY,
                ItemConstants.Section.SECTION_IMAGES);
    }

    private void migrateImportQrxFile(Path itemSyncDir, Item dataStoreItem) {
        Path path = Files.createTempDir().toPath();

        File[] itemSyncDirFiles = itemSyncDir.toFile().listFiles();
        if (itemSyncDirFiles == null) {
            throw new SkipMigration("Migration2313: No QRX file to migrate for item " + dataStoreItem.getId());
        }

        Optional<File> maybeQrxFile = Arrays.stream(itemSyncDirFiles)
                .filter(file -> StringUtils.equalsIgnoreCase("qrx", FilenameUtils.getExtension(file.getName())))
                .findFirst();

        if (!maybeQrxFile.isPresent()) {
            throw new SkipMigration("Migration2313: No QRX file to migrate for item " + dataStoreItem.getId());
        }

        File targetFile = new File(path.toFile(), maybeQrxFile.get().getName());
        try {
            FileUtils.copyFile(maybeQrxFile.get(), targetFile);
        } catch (IOException e) {
            throw new RuntimeException("Migration2313: could not copy qrx file " + maybeQrxFile.get().getName());
        }
    }
}
