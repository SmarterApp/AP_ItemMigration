package org.opentestsystem.ap.migration.migration.migration2888;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.migration.AbstractImportMigration;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.Collection;
import java.util.Collections;

@Component
public class MigrationImport2888 extends AbstractImportMigration {
    public MigrationImport2888(final ApplicationProperties applicationProperties,
                               final DataStoreDataManager dataManager,
                               final DataStoreUtility dataStoreUtility,
                               final DataStoreAttachmentManager dataStoreAttachmentManager,
                               final DataStoreItemManager dataStoreItemManager,
                               final ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider, dataStoreItemManager, ModelConstants.ItemType.TYPE_MI);
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        dataStoreItem.getCore().getMetadata().setMaxAllowedAnswers(mappedItem.getCore().getMetadata().getMaxAllowedAnswers());

        return new ItemMerge(dataStoreItem, itemSyncDir, false);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.emptyList();
    }
}
