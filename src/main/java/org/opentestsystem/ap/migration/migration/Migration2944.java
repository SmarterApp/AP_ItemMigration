package org.opentestsystem.ap.migration.migration;

import org.apache.commons.collections4.ListUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.springframework.stereotype.Component;

import java.util.Comparator;
import java.util.HashSet;
import java.util.Set;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_GLOSSARY;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_IMAGES;

/**
 * IAT-2944: Bulk glossary upload ignores term numbering and is capable of creating dupe numbers
 */
@Component
public class Migration2944 extends AbstractDataStoreMigration {

    public Migration2944(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility,
            dataStoreAttachmentManager);
    }

    /**
     * Migrate master, images, and glossary branches.
     *
     * @param migratedEntity The entity holding the branch name.
     * @return
     */
    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        String branch = migratedEntity.getBranchName();
        return BRANCH_MASTER.equalsIgnoreCase(branch)
            || SECTION_IMAGES.equalsIgnoreCase(branch)
            || SECTION_GLOSSARY.equalsIgnoreCase(branch);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        Item item = itemEntity.getItemJson();
        this.checkMigrateEntity(item);
        this.adjustGlossary(item);
        this.adjustImages(item);
        return itemEntity;
    }

    void adjustGlossary(Item item) {
        Set<String> ids = new HashSet<>();
        ListUtils.emptyIfNull(item.getGlossary().getTerms()).stream().forEach(t -> {
            if (ids.contains(t.getId())) {
                // we have already seen this ID so adjust it
                t.setId(item.getGlossary().nextTermId());
            } else {
                // first time seeing this ID
                ids.add(t.getId());
            }
        });

        // sort the list by ID
        ListUtils.emptyIfNull(item.getGlossary().getTerms()).sort(Comparator.comparing(GlossaryTerm::getId));
    }

    void adjustImages(Item item) {
        Set<String> ids = new HashSet<>();
        ListUtils.emptyIfNull(item.getImages().getImageResources()).stream().forEach(t -> {
            if (ids.contains(t.getId())) {
                // we have already seen this ID so adjust it
                t.setId(item.getImages().nextImageResourceId());
            } else {
                // first time seeing this ID
                ids.add(t.getId());
            }
        });

        // sort the list by ID
        ListUtils.emptyIfNull(item.getImages().getImageResources())
            .sort(Comparator.comparing(ItemImageResource::getId));
    }

    void checkMigrateEntity(Item item) {
        if (ItemConstants.ItemType.TYPE_TUT.equals(item.getType())) {
            throw new SkipMigration("Item %s is a TUT, tutorials which does not have glossary", item.getId());
        }
    }
}
