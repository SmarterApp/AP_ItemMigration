package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.Collection;

@Component
public class Migration2930 extends AbstractImportMigration {
    private static final String ROWSPAN = "rowspan=";


    public Migration2930(ApplicationProperties applicationProperties, DataStoreDataManager dataManager, ItemManagerEventProducer eventProducer, DataStoreUtility dataStoreUtility, DataStoreAttachmentManager dataStoreAttachmentManager, ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Override
    protected ItemMerge mergeItem(Item dataStoreItem, Item mappedItem, Path itemSyncDir) {
        dataStoreItem.getCore().setEn(mappedItem.getCore().getEn());
        dataStoreItem.getTranslations().setEsp(mappedItem.getTranslations().getEsp());
        return new ItemMerge(dataStoreItem, itemSyncDir, false);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Sets.newHashSet(ModelConstants.Section.SECTION_CORE,
                ModelConstants.Section.SECTION_TRANSLATIONS);
    }

    @Override
    protected void checkSkipMigration(ImportItem importItem) {
        if (!findTextInItemFile(importItem, ROWSPAN)) {
            throw new SkipMigration(String.format("the saaif content does not contain %s", ROWSPAN));
        }
    }


}
