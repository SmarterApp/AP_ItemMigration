package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.springframework.stereotype.Component;

/**
 * IAT-2839:  Add human readable rubric for simple machine-scored items MI, HTQO, MS, MC, EBSR
 */
@Component
public class Migration2839 extends AbstractDataStoreMigration {
    public Migration2839(ApplicationDependencyProvider applicationDependencyProvider, ApplicationProperties applicationProperties, DataStoreDataManager dataManager, ItemManagerEventProducer eventProducer, DataStoreUtility dataStoreUtility, DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        Item item = itemEntity.getItemJson();
        final String itemType = itemEntity.getItemJson().getType();
        if (!(item instanceof AssessmentItem)) {
            throw new SkipMigration("Item not an assessment item");
        }
        if(!ItemConstants.ItemType.TYPE_EBSR.equals(itemType)
                && !ItemConstants.ItemType.TYPE_HTQO.equals(itemType)
                && !ItemConstants.ItemType.TYPE_MC.equals(itemType)
                && !ItemConstants.ItemType.TYPE_MI.equals(itemType)
                && !ItemConstants.ItemType.TYPE_MS.equals(itemType)) {
            throw new SkipMigration("Item %s type[%s] is not ebsr, htqo, mc, mi or ms", item.getId(), item.getType());
        }

        // all TIMS created assessment items (non-imported) need the flag set to true
        AssessmentItem assessmentItem = (AssessmentItem) item;
        assessmentItem.getCore().getScoring()
                .setManagedByIat(true);
        assessmentItem.getCore().getScoring()
                .setMachineScoringManagedByIat(false);
        assessmentItem.getCore().getScoring()
                .setRubric(assessmentItem.getCore().getCalculatedScoringRubric());

        itemEntity.setItemJson(assessmentItem);

        return itemEntity;
    }

}
