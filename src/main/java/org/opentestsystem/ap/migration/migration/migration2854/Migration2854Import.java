package org.opentestsystem.ap.migration.migration.migration2854;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.migration.AbstractImportMigration;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;


@Component
public class Migration2854Import extends AbstractImportMigration {
    public Migration2854Import(ApplicationProperties applicationProperties, DataStoreDataManager dataManager, ItemManagerEventProducer eventProducer, DataStoreUtility dataStoreUtility, DataStoreAttachmentManager dataStoreAttachmentManager, ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Override
    protected ItemMerge mergeItem(Item dataStoreItem, Item mappedItem, Path itemSyncDir) {
        if (!(mappedItem instanceof AssessmentItem) || !(dataStoreItem instanceof AssessmentItem)) {
            throw new SkipMigration("Migration2854Import: Item %s is not an assessment item", mappedItem.getId());
        }

        AssessmentItem mappedAssessmentItem = (AssessmentItem) mappedItem;
        AssessmentItem dataStoreAssessmentItem = (AssessmentItem) dataStoreItem;

        if(mappedAssessmentItem.getCore().getEnemyItems().isEmpty()) {
            throw new SkipMigration("Migration2854Import: Item %s does not have enemy items", mappedItem.getId());
        }

        //This warning happens due to the item object model.  This will always be a Collection of Strings
        List<String> enemyItems = mappedAssessmentItem.getCore().getEnemyItems();

        List<String> validEnemyItems = enemyItems.stream()
                .filter(dataManager::doesItemExist)
                .filter(s -> !dataStoreAssessmentItem.getCore().getEnemyItems().contains(s))
                .collect(Collectors.toList());

        dataStoreAssessmentItem.getCore().getEnemyItems().addAll(validEnemyItems);

        return new ItemMerge(dataStoreItem, itemSyncDir, false);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.emptyList();
    }
}
