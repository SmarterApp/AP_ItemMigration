package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.springframework.stereotype.Component;

@Component
public class Migration2668 extends AbstractDataStoreMigration {

    public Migration2668(ApplicationProperties applicationProperties, DataStoreDataManager dataManager, ItemManagerEventProducer eventProducer, DataStoreUtility dataStoreUtility, DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        // This migration just requires the item to be saved
        // Only apply to EBSR, MS and MC items
        if (!itemEntity.getItemJson().getType().equals(ItemConstants.ItemType.TYPE_EBSR) &&
                !itemEntity.getItemJson().getType().equals(ItemConstants.ItemType.TYPE_MC) &&
                !itemEntity.getItemJson().getType().equals(ItemConstants.ItemType.TYPE_MS)) {
            throw new SkipMigration(String.format("Skipping migration item %s is not EBSR, MS or MC.  No updates necessary", itemEntity.getItemId()));
        }
        return itemEntity;
    }

}
