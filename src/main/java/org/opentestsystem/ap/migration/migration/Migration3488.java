package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import org.apache.commons.io.FilenameUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.attachment.AttachmentSummary;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.function.Supplier;

@Component
public class Migration3488 extends AbstractMigration {
    private static final Collection<String> supportedItemTypes = Sets.newHashSet(ModelConstants.ItemType.TYPE_HTQS, ModelConstants.ItemType.TYPE_TI, ModelConstants.ItemType.TYPE_EQ);

    private final MigrationFileUtil migrationFileUtil;

    public Migration3488(final ApplicationDependencyProvider applicationDependencyProvider, final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final DataStoreItemManager dataStoreItemManager, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager, final MigrationFileUtil migrationFileUtil) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
        this.migrationFileUtil = migrationFileUtil;
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        if(!itemEntity.getItemJson().isImported()) {
            throw new SkipMigration("Item %s is not imported so will be skipped", itemEntity.getItemId());
        }

        if(!supportedItemTypes.contains(itemEntity.getItemJson().getType())) {
            throw new SkipMigration("Item %s type %s not a supported type for this migration.", itemEntity.getItemId(), itemEntity.getItemJson().getType());
        }

        Optional<AttachmentSummary> qrxSummary = dataStoreAttachmentManager.findAttachmentSummaries(itemEntity.getItemJson(), itemEntity.getBranchName()).stream()
                .filter(attachmentSummary -> "qrx".equalsIgnoreCase(FilenameUtils.getExtension(attachmentSummary.getTimsFileKey())))
                .findAny();

        if(qrxSummary.isPresent()) {
            throw new SkipMigration("Item %s already has QRX file within TIMS system.", itemEntity.getItemId());
        }

        ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() -> new SystemException("Import files not found for item " + itemEntity.getItemId()));

        //Find qrx file in import and sync to s3


        return null;
    }
}
