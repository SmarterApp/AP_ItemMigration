package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.FailedMigrationException;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collection;

import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_AUDIO;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_GLOSSARY;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_IMAGES;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_TRANSLATIONS;

@Component
public class Migration2816 extends AbstractImportMigration {

    private static final String SAAIF_CONTENT_TO_FIND = ">&#xA0;</p>";

    public Migration2816(final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final DataStoreItemManager dataStoreItemManager,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                         final ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, dataStoreUtility, dataStoreAttachmentManager,
                applicationDependencyProvider, dataStoreItemManager);
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        dataStoreItem.getCore().setEn(mappedItem.getCore().getEn());
        dataStoreItem.getTranslations().setEsp(mappedItem.getTranslations().getEsp());
        return new ItemMerge(dataStoreItem, itemSyncDir, false);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Sets.newHashSet(SECTION_CORE,
                SECTION_TRANSLATIONS,
                SECTION_GLOSSARY,
                SECTION_AUDIO,
                SECTION_IMAGES);
    }

    @Override
    protected void checkSkipMigration(ImportItem importItem) {
        Path itemFilePath = importItem.getItemFile().toPath();
        try {
            String fileAsString = new String(Files.readAllBytes(itemFilePath));

            boolean found = StringUtils.containsIgnoreCase(fileAsString, SAAIF_CONTENT_TO_FIND);

            if (!found) {
                throw new SkipMigration(String.format("the saaif content does not contain %s", SAAIF_CONTENT_TO_FIND));
            }

        } catch (IOException e) {
            throw new FailedMigrationException("unexpected error reading SAAIF xml file " + e.getMessage(), e);
        }
    }
}
