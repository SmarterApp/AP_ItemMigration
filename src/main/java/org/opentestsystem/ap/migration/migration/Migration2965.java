package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TI;

/**
 * IAT-2965:  Imported TI items are failing to convert to SAAIF
 *
 * We need to regenerated TI items, no data changes however the trick is the TI items being addressed
 * do not have an import.zip so this is no an AbstractImportMigration but it does only apply to imported
 * TI item.s
 */
@Component
public class Migration2965 extends AbstractMigration {

    public Migration2965(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         final DataStoreItemManager dataStoreItemManager,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, attachmentManager);
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return BRANCH_MASTER.equalsIgnoreCase(migratedEntity.getBranchName());
    }

    @Override
    public ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        if (!itemEntity.getItemJson().isImported()) {
            throw new SkipMigration("item is not an imported item");
        }
        if (!TYPE_TI.equalsIgnoreCase(itemEntity.getItemJson().getType())) {
            throw new SkipMigration("item is not TI");
        }
        return itemEntity;
    }
}
