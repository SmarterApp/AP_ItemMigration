package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EQ;

@Component
public class Migration3487 extends AbstractMigration {
    public Migration3487(final ApplicationDependencyProvider applicationDependencyProvider, final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final DataStoreItemManager dataStoreItemManager, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        if(!TYPE_EQ.equals(itemEntity.getItemJson().getType()) || !itemEntity.getItemJson().isImported()) {
            throw new SkipMigration("Item %s is not an imported EQ item", itemEntity.getItemId());
        }

        EqItem assessmentItem = (EqItem) itemEntity.getItemJson();

        if(assessmentItem.getCore().getEquationEditorConfiguration().isManagedByIat()
                && assessmentItem.getCore().getScoring().isMachineScoringManagedByIat()) {
            throw new SkipMigration("Item equation configuration and machine scoring is managed by TIMS", itemEntity.getItemId());
        }

        if (!assessmentItem.getCore().getEquationEditorConfiguration().isManagedByIat()) {
            Attachment eaxAttachment = new Attachment();
            eaxAttachment.setFileName(RepositoryUtil.getEaxFileName(assessmentItem.getId()));
            assessmentItem.getSaaif().setEax(eaxAttachment);

        }

        if (!assessmentItem.getCore().getScoring().isMachineScoringManagedByIat()) {
            assessmentItem.getSaaif().setQrx(createQrxAttachment(assessmentItem.getId()));
        }

        return itemEntity;
    }

    private Attachment createQrxAttachment(final String itemId) {
        Attachment qrxAttachment = new Attachment();
        qrxAttachment.setFileName(RepositoryUtil.getQrxFileName(itemId));
        return qrxAttachment;
    }
}
