package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import org.apache.commons.io.FileUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collection;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;

/**
 * IAT-2834: (3/21) Import Cleanup: Spanish images for GI items are not included in the sample.zip
 */
@Component
public class Migration2834 extends AbstractImportMigration {

    public Migration2834(final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                         final ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager,
            applicationDependencyProvider, TYPE_GI);
    }

    /**
     * The only thing we are doing is updating the gi-sample.zip.  No item data is updated.
     */
    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        try {
            // isolate the zip from all the other files in the syn dir like glossary, etc.
            Path giZip = itemSyncDir.resolve(MigrationFileUtil.GI_SAMPLE_FILE_NAME);
            Path isolatedGiZipDir = Files.createTempDirectory(MigrationFileUtil.GI_SAMPLE_DIRECTORY_NAME);
            Path isolatedGiZip = isolatedGiZipDir.resolve(MigrationFileUtil.GI_SAMPLE_FILE_NAME);
            FileUtils.copyFile(giZip.toFile(), isolatedGiZip.toFile());
            // notice dataStoreItem is never touched
            return new ItemMerge(dataStoreItem, isolatedGiZip.getParent(), YES_SYNC_ATTACHMENTS);
        } catch (IOException e) {
            throw new SystemException("Error copying gi-sample.zip into sync folder: " + e.getMessage(), e);
        }
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Sets.newHashSet(SECTION_CORE);
    }
}
