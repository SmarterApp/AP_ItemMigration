package org.opentestsystem.ap.migration.migration;

import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.transformer.MapperUtil;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdateCommand;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.springframework.stereotype.Component;

@Component
public class Migration1615 extends AbstractDataStoreMigration {

    public Migration1615(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        if (shouldSkipMigration(itemEntity)) {
            throw new SkipMigration(String.format("Item %s is an imported TUT. No updates necessary", itemEntity.getItemId()));
        }
        Migration1615Command migration1615Command = new Migration1615Command();
        return migrateEntityContent(contentUpdaterFactory, itemEntity, migration1615Command);
    }

    public class Migration1615Command extends ContentUpdateCommand {
        @Override
        public String applyContentUpdate(String htmlContent) {
            final Document doc = newJsoupDocument(htmlContent);

            doc.getElementsByTag("img").forEach(image -> {
                if (image.hasClass("iat-text2speech")) {
                    image.wrap("<span></span>");
                    Element span = image.parent();
                    span.addClass("iat-text2speech");
                    if (image.hasAttr("data-iat-tts")) {
                        span.attr("data-iat-tts", image.attr("data-iat-tts"));
                        image.removeAttr("data-iat-tts");
                    }
                    if (image.hasAttr("data-iat-tts-vi")) {
                        span.attr("data-iat-tts-vi", image.attr("data-iat-tts-vi"));
                        image.removeAttr("data-iat-tts-vi");
                    }
                    image.removeClass("iat-text2speech");
                }
            });
            // Important to remove new lines on mapped content
            return MapperUtil.removeNewLine(doc.body().html());
        }
    }

    private boolean shouldSkipMigration(ItemEntity itemEntity) {
        boolean skip = false;
        if (ItemConstants.ItemType.TYPE_TUT.equals(itemEntity.getItemJson().getType()) &&
            !itemEntity.getItemJson().getCore().getEn().isManagedByIat()) {
            skip = true;
        }
        return skip;
    }

}
