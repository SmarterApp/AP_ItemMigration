package org.opentestsystem.ap.migration.migration;

import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdateCommand;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.springframework.stereotype.Component;

@Component
public class Migration1615 extends AbstractDataStoreMigration {

    public Migration1615(ApplicationDependencyProvider applicationDependencyProvider, ApplicationProperties applicationProperties, DataStoreDataManager dataManager, ItemManagerEventProducer eventProducer, DataStoreUtility dataStoreUtility, DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        if (!ItemConstants.ItemType.TYPE_TUT.equals(itemEntity.getItemJson().getType())) {
            Migration1615Command migration1615Command = new Migration1615Command();
            return migrateEntityContent(itemEntity, migration1615Command);
        } else {
            throw new SkipMigration(String.format("Item %s is a TUT. No updates necessary", itemEntity.getItemId()));
        }
    }

    public class Migration1615Command implements ContentUpdateCommand {
        @Override
        public String applyContentUpdate(String htmlContent) {
            final Document doc = Jsoup.parseBodyFragment(htmlContent);
            doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

            doc.getElementsByTag("img").forEach(image -> {
                if (image.hasClass("iat-text2speech")) {
                    image.wrap("<span></span>");
                    Element span = image.parent();
                    span.addClass("iat-text2speech");
                    if (StringUtils.isNotBlank(image.attr("data-iat-tts"))) {
                        span.attr("data-iat-tts", image.attr("data-iat-tts"));
                        image.removeAttr("data-iat-tts");
                    }
                    if (StringUtils.isNotBlank(image.attr("data-iat-tts-vi"))) {
                        span.attr("data-iat-tts-vi", image.attr("data-iat-tts-vi"));
                        image.removeAttr("data-iat-tts-vi");
                    }
                    image.removeClass("iat-text2speech");
                }
            });

            return doc.body().html();
        }
    }

}
