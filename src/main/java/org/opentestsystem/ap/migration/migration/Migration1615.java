package org.opentestsystem.ap.migration.migration;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.reflections.Reflections;
import org.springframework.stereotype.Component;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import java.util.Set;

@Component
public class Migration1615 extends AbstractDataStoreMigration {

    public Migration1615(ApplicationDependencyProvider applicationDependencyProvider, ApplicationProperties applicationProperties, DataStoreDataManager dataManager, ItemManagerEventProducer eventProducer, DataStoreUtility dataStoreUtility, DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        Reflections reflections = new Reflections(this.getClass().getName());
        Set<Class<?>> fixerClasses = reflections.getTypesAnnotatedWith(FixFor.class);

        try {
            for (Class<?> clazz : fixerClasses) {
                if (itemEntity.getItemJson().getType()
                        .equals(clazz.getAnnotation(FixFor.class).type())) {
                    HtmlFixer fixer = (HtmlFixer) clazz.getConstructor().newInstance();
                    fixer.fixHtml(itemEntity.getItemJson());
                }
            }
        } catch (Exception ex) {
            throw new SkipMigration(ex);
        }

        return itemEntity;
    }

    public static class Migration1615Fixer {
        static String applyImageTTSMigration(String htmlContent) {
            return "content fixed";
        }
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.TYPE)
    public @interface FixFor {
        String type();
    }

    public interface HtmlFixer {
        Item fixHtml(Item item);
    }

    @NoArgsConstructor
    @FixFor(type = ItemConstants.ItemType.TYPE_SA)
    public static class SaItemFixer implements HtmlFixer {
        @Override
        public Item fixHtml(Item item) {
            SaItem saItem = (SaItem) item;
            saItem.getCore().getEn().setPrompt(
                    Migration1615Fixer.applyImageTTSMigration(saItem.getCore().getEn().getPrompt()));
            saItem.getTranslations().getEsp().setPrompt(
                    Migration1615Fixer.applyImageTTSMigration(saItem.getTranslations().getEsp().getPrompt()));

            return item;
        }
    }

    @NoArgsConstructor
    @FixFor(type = ItemConstants.ItemType.TYPE_EBSR)
    public static class EbsrItemFixer implements HtmlFixer {
        @Override
        public Item fixHtml(Item item) {
            EbsrItem ebsrItem = (EbsrItem) item;
            ebsrItem.getCore().getEn().setPrompt(
                    Migration1615Fixer.applyImageTTSMigration(ebsrItem.getCore().getEn().getPrompt()));
            ebsrItem.getTranslations().getEsp().setPrompt(
                    Migration1615Fixer.applyImageTTSMigration(ebsrItem.getTranslations().getEsp().getPrompt()));

            return item;
        }
    }

}
