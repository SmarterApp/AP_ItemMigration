package org.opentestsystem.ap.migration.migration.migration3065;

import com.google.common.collect.Sets;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.migration.AbstractMigration;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.Set;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_HTQO;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_HTQS;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MC;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MI;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MS;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TI;

@Component
public class Migration3065 extends AbstractMigration {
    private static final Set<String> supportedItemTypes = Sets.newHashSet(TYPE_EBSR, TYPE_EQ, TYPE_GI, TYPE_HTQO, TYPE_HTQS, TYPE_MC, TYPE_MI, TYPE_TI, TYPE_MS);
    private static final Set<String> machineScoringManagedTimsTypes = Sets.newHashSet(TYPE_EQ, TYPE_TI, TYPE_GI);

    public Migration3065(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                         final DataStoreItemManager dataStoreItemManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        if(itemEntity.getItemJson().isImported()) {
            throw new SkipMigration("Migration3065: item is imported: %s", itemEntity.getItemId());
        }

        if (!supportedItemTypes.contains(itemEntity.getItemJson().getType())) {
            throw new SkipMigration("Migration3065: not a supported item type: %s", itemEntity.getItemId());
        }

        AssessmentItem assessmentItem = (AssessmentItem) itemEntity.getItemJson();

        if(isScoringFlagConfiguredCorrectly(assessmentItem)) {
            throw new SkipMigration("Migration3065: flags already set correctly for %s", itemEntity.getItemId());
        }

        assessmentItem.getCore().getScoring().setManagedByIat(true);
        if(machineScoringManagedTimsTypes.contains(assessmentItem.getType())) {
            assessmentItem.getCore().getScoring().setMachineScoringManagedByIat(true);
        }

        return itemEntity;
    }

    private boolean isScoringFlagConfiguredCorrectly(AssessmentItem assessmentItem) {
        boolean currentManagedByIatFlag = assessmentItem.getCore().getScoring().isManagedByIat();
        if(currentManagedByIatFlag && !machineScoringManagedTimsTypes.contains(assessmentItem.getType())) {
            return true;
        }

        if(currentManagedByIatFlag && assessmentItem.getCore().getScoring().isMachineScoringManagedByIat()) {
            return true;
        }

        return false;
    }
}
