package org.opentestsystem.ap.migration.migration.migration3177;

import lombok.extern.slf4j.Slf4j;
import org.jsoup.nodes.Document;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.item.SaaifContent;
import org.opentestsystem.ap.common.saaif.transformer.MapperUtil;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdateCommand;

import java.util.Optional;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.defaultString;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemLanguage.LANG_ENU;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemLanguage.LANG_ESN;

@Slf4j
public class TtsContentUpdateCommand extends ContentUpdateCommand {

    private final Item item;
    private final ItemRelease itemRelease;
    private final String TTS_ATTRIBUTE = "data-iat-tts";
    private final String TTS_VI_ATTRIBUTE = "data-iat-tts-vi";
    private final String LOG_PREFIX = "[TIMS-MISSING-TTS-MIGRATION]";

    public TtsContentUpdateCommand(Item item, ItemRelease itemRelease) {
        this.itemRelease = itemRelease;
        this.item = item;
    }

    @Override
    public String applyEnglishContentUpdate(String englishContentHtml) {
        return addTTSIfNeeded(englishContentHtml, LANG_ENU);
    }

    @Override
    public String applyTranslatedContentUpdate(String language, String translatedContent, String englishContent) {
        return addTTSIfNeeded(translatedContent, LANG_ESN);
    }

    /**
     * When missing, adds the data-iat-tts attribute and value to an html element
     *
     * @param content  Well formed Html
     * @param language The language where content originated
     * @return Well formed Html
     */
    private String addTTSIfNeeded(String content, String language) {
        Document doc = super.newJsoupDocument(content);
        AtomicBoolean ttsUpdated = new AtomicBoolean(false);
        doc.getElementsByAttribute(TTS_VI_ATTRIBUTE).forEach(element -> {
            if (!element.hasAttr(TTS_ATTRIBUTE)) {
                String ttsVi = element.attr(TTS_VI_ATTRIBUTE);
                String tts = getTtsValue(ttsVi, language);
                ttsUpdated.set(true);
                element.attr(TTS_ATTRIBUTE, tts);
                log.info(String.format("%s TTS value [%s] restored on item: %s", LOG_PREFIX, tts, this.item.getId()));
            }
        });
        if (ttsUpdated.get()) {
            content = MapperUtil.removeNewLine(doc.body().html());
        }
        return content;
    }

    /**
     * Uses the TTS-VI value to Return the TTS value originally provided on the import ItemRelease Xml
     *
     * @param ttsVi    Current TTS-VI value
     * @param language Language where the content originated
     * @return Originally provided TTS value
     */
    private String getTtsValue(String ttsVi, String language) {
        String ttsValue = "";
        if (this.item.isAssessment()) {
            Optional<ItemRelease.Item.Content> languageContent = this.itemRelease.getItem().getContent()
                    .stream()
                    .filter(content -> language.equals(content.getLanguage()))
                    .findFirst();
            if (languageContent.isPresent()) {
                ttsValue = getTtsValue(languageContent.get(), ttsVi);
            }
        } else {
            Optional<ItemRelease.Passage.Content> languageContent = this.itemRelease.getPassage().getContent()
                    .stream()
                    .filter(content -> language.equals(content.getLanguage()))
                    .findFirst();
            if (languageContent.isPresent()) {
                ttsValue = getTtsValue(languageContent.get(), ttsVi);
            }
        }
        return ttsValue;
    }

    /**
     * Uses the TTS-VI value to Return the TTS value originally provided on the import ItemRelease Xml
     *
     * @param content Well formed Html
     * @param ttsVi   TTS-VI value
     * @return Originally provided TTS value
     */
    private String getTtsValue(SaaifContent content, String ttsVi) {
        return content.getApipAccessibility().getAccessibilityInfo()
                .getAccessElement()
                .stream()
                .filter(accessElement -> accessElement.getRelatedElementInfo()
                        .getBrailleText().getBrailleTextString().equals(ttsVi))
                .map(accessElement -> defaultString(accessElement.getRelatedElementInfo()
                        .getReadAloud().getTextToSpeechPronunciationAlternate()))
                .collect(Collectors.joining());
    }
}