package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.item.SaaifAccessElement;
import org.opentestsystem.ap.common.saaif.item.SaaifContent;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.Collection;
import java.util.Optional;

@Component
public class Migration2670 extends AbstractImportMigration {
    private final String CONTENT_LINK_INFO_GRAPHIC_TYPE = "Graphic";

    public Migration2670(final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final ItemManagerEventProducer eventProducer, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager, final ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        dataStoreItem.getCore().setEn(mappedItem.getCore().getEn());
        dataStoreItem.getTranslations().setEsp(mappedItem.getTranslations().getEsp());

        return new ItemMerge(dataStoreItem, itemSyncDir, false);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Sets.newHashSet(ModelConstants.Section.SECTION_CORE,
                ModelConstants.Section.SECTION_TRANSLATIONS,
                ModelConstants.Section.SECTION_GLOSSARY,
                ModelConstants.Section.SECTION_AUDIO,
                ModelConstants.Section.SECTION_IMAGES);
    }

    @Override
    protected void checkSkipMigration(final ItemEntity itemEntity) {
        //TODO - this isn't ideal since this check migration needs the import
        Optional<ImportItem> maybeImportFile = getMigrationFileUtil().getImportItem(itemEntity);

        if (maybeImportFile.isPresent() && checkSkipMigration(itemEntity, maybeImportFile.get())) {
            throw new SkipMigration("Migration2670: Item %s does not have TTS tags", itemEntity.getId());
        }
    }

    private boolean checkSkipMigration(ItemEntity itemEntity, ImportItem importItem) {
        if (itemEntity.getItemJson().getImages().getImageResources().size() > 0) {
            if (!itemEntity.getItemJson().getType().equals(ModelConstants.ItemType.TYPE_STIM)) {
                for (ItemRelease.Item.Content content : importItem.getItemRelease().getItem().getContent()) {
                    if (findGraphicLinkInfoInContent(content)) {
                        return true;
                    }
                }
            } else {
                for (ItemRelease.Passage.Content content : importItem.getItemRelease().getPassage().getContent()) {
                    if (findGraphicLinkInfoInContent(content)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean findGraphicLinkInfoInContent(SaaifContent content) {
        if (content.getApipAccessibility() == null
                || content.getApipAccessibility().getAccessibilityInfo() == null
                || content.getApipAccessibility().getAccessibilityInfo().getAccessElement() == null) {
            return false;
        }

        SaaifAccessElement graphicAccessElement =
                content.getApipAccessibility().getAccessibilityInfo().getAccessElement()
                        .stream()
                        .filter(accessElement -> accessElement.getContentLinkInfo().getType().equals(CONTENT_LINK_INFO_GRAPHIC_TYPE))
                        .findAny().orElse(null);

        return graphicAccessElement != null;
    }

}
