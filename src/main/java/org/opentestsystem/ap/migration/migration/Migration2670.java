package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.item.SaaifAccessElement;
import org.opentestsystem.ap.common.saaif.item.SaaifContent;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

import java.nio.file.Files;
import java.nio.file.Path;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Component
public class Migration2670 extends AbstractDataStoreMigration {
    private final String CONTENT_LINK_INFO_GRAPHIC_TYPE = "Graphic";

    private final MigrationFileUtil migrationFileUtil;
    private final IatModelMapperFactory iatModelMapperFactory;
    private final GitLabSyncManager itemBankSyncManager;
    private final ItemFactory itemFactory;

    public Migration2670(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                         final MigrationFileUtil migrationFileUtil,
                         final IatModelMapperFactory iatModelMapperFactory) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
        this.migrationFileUtil = migrationFileUtil;
        this.iatModelMapperFactory = iatModelMapperFactory;
        this.itemBankSyncManager = applicationDependencyProvider.getItemBankSyncManager();
        this.itemFactory = new ItemFactory();
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() ->
                new SkipMigration(String.format("Migration2670 Skipped: Could not find import files for item %s", itemEntity.getItemId())));

        if (shouldApplyMigration(itemEntity, importItem)) {
            try {
                Path itemSyncDir = Files.createTempDirectory(itemEntity.getItemId());

                IatModelMapper mapper = iatModelMapperFactory.newModelMapper(itemEntity.getItemJson().getType());

                Item mappedItem = mapper.mapSaaifToIATModel(importItem.getItemProps(),
                        itemEntity.getItemJson(),
                        importItem.getItemRelease(),
                        importItem.getSmarterAppMetadata(),
                        importItem.getWordlistreleaseType().orElse(null),
                        importItem.getWordlistPathString(),
                        itemSyncDir,
                        importItem.getExpandedImportItemPath().toString());

                itemEntity.setItemJson(mappedItem);

                itemBankSyncManager.syncAttachmentsToDataStore(itemEntity.getItemId(), BRANCH_MASTER, itemSyncDir);

            } catch (Exception ex) {
                throw new SkipMigration(String.format("Unable to migrate item %s. %s", itemEntity.getItemId(), ex.getMessage()));
            }
        } else {
            throw new SkipMigration(String.format("item %s does not require Migration2670", itemEntity.getItemId()));
        }
        return itemEntity;
    }


    private boolean shouldApplyMigration(ItemEntity itemEntity, ImportItem importItem) {
        if (itemEntity.getItemJson().getImages().getImageResources().size() > 0) {
            if (!itemEntity.getItemJson().getType().equals(ItemConstants.ItemType.TYPE_STIM)) {
                for (ItemRelease.Item.Content content : importItem.getItemRelease().getItem().getContent()) {
                    if (findGraphicLinkInfoInContent(content)) {
                     return true;
                    }
                }
            } else {
                for (ItemRelease.Passage.Content content : importItem.getItemRelease().getPassage().getContent()) {
                    if (findGraphicLinkInfoInContent(content)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean findGraphicLinkInfoInContent(SaaifContent content) {
        SaaifAccessElement graphicAccessElement =
            content.getApipAccessibility().getAccessibilityInfo().getAccessElement()
                    .stream()
                    .filter(accessElement -> accessElement.getContentLinkInfo().getType().equals(CONTENT_LINK_INFO_GRAPHIC_TYPE))
                    .findAny().orElse(null);

        return graphicAccessElement != null;
    }

}
