package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class Migration3221 extends AbstractMigration {

    public Migration3221(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer,
                dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        return removeDuplicateImageResources(itemEntity);
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return migratedEntity.getItemJson().getImages().getImageResources().size() > 0;
    }

    private ItemEntity removeDuplicateImageResources(ItemEntity itemEntity) {
        Item item = itemEntity.getItemJson();
        int initialResourceCount = item.getImages().getImageResources().size();
        List<ItemImageResource> uniqueImageResources = filterUniqueImageResources(item.getImages().getImageResources());
        if (uniqueImageResources.size() != initialResourceCount) {
            item.getImages().setImageResources(uniqueImageResources);
        }
        return itemEntity;
    }

    private List<ItemImageResource> filterUniqueImageResources(List<ItemImageResource> imageResources) {
        List<ItemImageResource> uniqueImageResources = new ArrayList<>();
        List<String> imageFilenames = new ArrayList<>();
        for (ItemImageResource imageResource : imageResources) {
            String prodFileName = imageResource.getProductionFile().getFileName();
            if (!imageFilenames.contains(prodFileName)) {
              List<ItemImageResource> imageLookup = imageResources.stream()
                      .filter(resource -> resource.getProductionFile().getFileName().equals(prodFileName))
                      .collect(Collectors.toList());
              if (imageLookup.size() == 1) {
                  imageFilenames.add(imageLookup.get(0).getProductionFile().getFileName());
                  uniqueImageResources.add(imageLookup.get(0));
              } else {
                  //TODO: Lookup ids in content. Only leave referenced resource
                  imageFilenames.add(imageLookup.get(0).getProductionFile().getFileName());
                  uniqueImageResources.add(imageLookup.get(0));
              }
            }
        }
        return uniqueImageResources;
    }
}
