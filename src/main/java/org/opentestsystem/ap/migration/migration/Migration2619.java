package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

import java.nio.file.Files;
import java.nio.file.Path;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Component
public class Migration2619 extends AbstractDataStoreMigration {

    private final MigrationFileUtil migrationFileUtil;
    private final IatModelMapperFactory iatModelMapperFactory;

    public Migration2619(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                         final MigrationFileUtil migrationFileUtil,
                         final IatModelMapperFactory iatModelMapperFactory) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
        this.migrationFileUtil = migrationFileUtil;
        this.iatModelMapperFactory = iatModelMapperFactory;
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        if (itemEntity.getItemJson().getType().equals(ItemConstants.ItemType.TYPE_MC)) {
            ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() ->
                    new SkipMigration(String.format("Migration2619 Skipped: Item was not imported or could not find import files for item %s", itemEntity.getItemId())));

            //Only apply to imported Mc items
            try {
                Path itemSyncDir = Files.createTempDirectory(itemEntity.getItemId());

                IatModelMapper mapper = iatModelMapperFactory.newModelMapper(itemEntity.getItemJson().getType());

                Item mappedItem = mapper.mapSaaifToIATModel(importItem.getItemProps(),
                        itemEntity.getItemJson(),
                        importItem.getItemRelease(),
                        importItem.getSmarterAppMetadata(),
                        importItem.getWordlistreleaseType().orElse(null),
                        importItem.getWordlistPathString(),
                        itemSyncDir,
                        importItem.getItemImportSourcePath().toString());

                itemEntity.setItemJson(mappedItem);

                itemBankSyncManager.syncAttachmentsToDataStore(itemEntity.getItemId(), BRANCH_MASTER, itemSyncDir);

            } catch (Exception ex) {
                throw new SkipMigration(String.format("Unable to migrate item %s. %s", itemEntity.getItemId(), ex.getMessage()));
            }
        } else {
            throw new SkipMigration(String.format("Item %s is not MC type.  No updates necessary", itemEntity.getItemId()));
        }

        return itemEntity;
    }

}