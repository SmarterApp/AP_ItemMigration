package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.Collection;

@Component
public class Migration2619 extends AbstractImportMigration {
    public Migration2619(final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                         final DataStoreItemManager dataStoreItemManager,
                         final ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider, dataStoreItemManager, ModelConstants.ItemType.TYPE_MC, ModelConstants.ItemType.TYPE_MS);
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        dataStoreItem.getCore().setEn(mappedItem.getCore().getEn());
        dataStoreItem.getTranslations().setEsp(mappedItem.getTranslations().getEsp());
        dataStoreItem.setImages(mappedItem.getImages());
        dataStoreItem.setGlossary(mappedItem.getGlossary());

        return new ItemMerge(dataStoreItem, itemSyncDir, true);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Sets.newHashSet(ModelConstants.Section.SECTION_CORE,
                ModelConstants.Section.SECTION_TRANSLATIONS,
                ModelConstants.Section.SECTION_GLOSSARY,
                ModelConstants.Section.SECTION_AUDIO,
                ModelConstants.Section.SECTION_IMAGES);
    }
}