package org.opentestsystem.ap.migration.migration;

import com.fasterxml.jackson.core.JsonProcessingException;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.model.MigrationResult;
import org.opentestsystem.ap.migration.util.Util;

import static org.opentestsystem.ap.common.repository.RepositoryUtil.getModelFileName;

@Slf4j
public abstract class AbstractMigration implements Migration {

    protected final Util util;

    protected final AppProps appProps;

    protected final GitlabClient gitlabClient;

    protected final ItemRepository itemRepository;

    protected abstract void runMigration(final ItemInfo itemInfo,
                                         final BranchInfo branchInfo,
                                         final MigrationDefinition migration,
                                         final GitClient gitClient);

    protected AbstractMigration(final Util util) {
        this.util = util;
        this.appProps = util.getAppProps();
        this.gitlabClient = util.getGitlabClient();
        this.itemRepository = util.getItemRepository();
    }

    @Override
    public MigrationResult migrate(final ItemInfo itemInfo,
                                   final BranchInfo branchInfo,
                                   final String migrationKey,
                                   final MigrationDefinition migration,
                                   final GitClient gitClient) {
        log.info("running {}", migration.getMigrationName());

        final MigrationResult migrationResult = new MigrationResult(migration.getMigrationName());

        gitClient.checkoutBranch(branchInfo.getBranchName());
        gitClient.pullLatest();

        // if it's the master branch and the item is not public then nothing to migrate
        if (!branchInfo.isMasterBranch() || itemInfo.isItemPublic()) {
            runMigration(itemInfo, branchInfo, migration, gitClient);
            updateItemVersion(migrationKey, gitClient);
            gitClient.stageAll();
            gitClient.commit(migration.getMigrationDescription());
        }

        return migrationResult;
    }

    protected void updateItemVersion(final String migrationKey, final GitClient gitClient) {
        final Item item = gitClient.readModelFile();
        item.setVersion(migrationKey);
        gitClient.writeModelFile(item);
    }

    protected void updateItem(final Item item, final GitClient gitClient) {
        final ItemRelease saaifItem = gitClient.readItemFile();
        final SmarterAppMetadata saaifMetadata = gitClient.readMetadataFile();

        // use the repo instance as a base for the item model to update
        final ItemRelease updatedSaaifItem = item.toSaaif(saaifItem, gitClient.getItemContext());
        final SmarterAppMetadata updatedMetadata = item.toSaaifMetadata(saaifMetadata);

        gitClient.writeItemFiles(item, updatedSaaifItem, updatedMetadata);
    }
}
