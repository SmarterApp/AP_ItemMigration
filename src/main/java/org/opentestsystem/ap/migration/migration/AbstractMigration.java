package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.transformer.ModelTransformer;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.model.MigrationResult;
import org.opentestsystem.ap.migration.util.Util;

@Slf4j
public abstract class AbstractMigration implements Migration {

    protected final Util util;

    protected final AppProps appProps;

    protected final GitlabClient gitlabClient;

    protected final ItemRepository itemRepository;

    protected final TransformerFactory transformerFactory;

    protected abstract void runMigration(final ItemInfo itemInfo,
                                         final BranchInfo branchInfo,
                                         final String version,
                                         final MigrationDefinition migration,
                                         final GitClient gitClient);

    protected AbstractMigration(final Util util) {
        this.util = util;
        this.appProps = util.getAppProps();
        this.gitlabClient = util.getGitlabClient();
        this.itemRepository = util.getItemRepository();
        this.transformerFactory = new TransformerFactory();
    }

    @Override
    public MigrationResult migrate(final ItemInfo itemInfo,
                                   final BranchInfo branchInfo,
                                   final String version,
                                   final MigrationDefinition migration,
                                   final GitClient gitClient) {
        log.info("running {}", migration.getMigrationName());

        final MigrationResult migrationResult = new MigrationResult(migration.getMigrationName());

        // if it's the master branch and the item is not public then nothing to migrate
        if (!branchInfo.isMasterBranch() || itemInfo.isItemPublic()) {
            runMigration(itemInfo, branchInfo, version, migration, gitClient);
            updateItemVersion(version, gitClient);
            gitClient.stageAll();
            gitClient.commit(migration.getMigrationDescription());
        }

        return migrationResult;
    }

    protected void updateItemVersion(final String version, final GitClient gitClient) {
        final Item item = gitClient.readModelFile();
        item.setVersion(version);
        gitClient.writeModelFile(item);
    }

    protected void updateItemFiles(final Item item, final GitClient gitClient) {
        final ModelTransformer transformer = transformerFactory.newTransformer(item.getType());
        transformer.generateSaaifFiles(item, bankKey(), gitClient.getItemContext());
    }

    protected String bankKey() {
        return util.getItemBankProperties().getBankKey();
    }
}
