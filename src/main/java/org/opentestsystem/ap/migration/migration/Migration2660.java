package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Images;
import org.opentestsystem.ap.common.model.attachment.AttachmentRenameRequest;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_IMAGES;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_TRANSLATIONS;

@Slf4j
@Component
public class Migration2660 extends AbstractMigration {
    private static final List<String> branchesToMigrate = Arrays.asList(BRANCH_MASTER, SECTION_CORE, SECTION_IMAGES, SECTION_TRANSLATIONS);

    public Migration2660(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final DataStoreItemManager dataStoreItemManager,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, MigrationContext migrationContext) {
        final String branch = itemEntity.getBranchName();
        final String itemId = itemEntity.getItemId();
        final String itsId = itemEntity.getItemJson().getItsId();

        if(!branchesToMigrate.contains(branch)) {
            throw new SkipMigration(String.format("Migration2660: Skipping branch %s migration for item %s", branch, itemEntity.getItemId()));
        }

        if (isBlank(itsId)) {
            throw new SkipMigration(format("Migration2660: Skipped: Item %s has no ITS ID", itemEntity.getItemId()));
        }


        final Images images = itemEntity.getItemJson().getImages();
        List<AttachmentRenameRequest> requestList = new ArrayList<>();

        images.getImageResources().forEach(imageResource -> {
            final String existingConceptFileName = imageResource.getConceptFile().getFileName() == null ? "" : imageResource.getConceptFile().getFileName();
            final String existingProductionFileName = imageResource.getProductionFile().getFileName() == null ? "" : imageResource.getProductionFile().getFileName();

            if(doesFileNeedToBeRenamed(itemId, itsId, existingConceptFileName)) {
                String targetConceptFileName = existingConceptFileName.replace(itsId, itemId);
                imageResource.getConceptFile().setFileName(targetConceptFileName);
                requestList.add(new AttachmentRenameRequest(itemId, branch, existingConceptFileName, targetConceptFileName));
            }

            if(doesFileNeedToBeRenamed(itemId, itsId, existingProductionFileName)) {
                String targetProductionFileName = existingProductionFileName.replace(itsId, itemId);
                imageResource.getProductionFile().setFileName(targetProductionFileName);
                requestList.add(new AttachmentRenameRequest(itemId, branch, existingProductionFileName, targetProductionFileName));
            }
        });

        if (!requestList.isEmpty()) {
            if(BRANCH_MASTER.equals(branch)) {
                dataStoreAttachmentManager.renameAttachments(requestList);
            }
        } else {
            throw new SkipMigration(format("Migration2571: item %s did not have any attachments to rename", itemId));
        }

        return itemEntity;
    }

    private boolean doesFileNeedToBeRenamed(final String itemId, final String itsId, final String fileName) {
        return StringUtils.isNotBlank(fileName) && !fileName.contains(itemId) && fileName.contains(itsId);
    }
}
