package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemSubject.SUBJECT_MATH;

@Component
public class MigrationGenerateSaaifMathOnly extends AbstractMigration {
    public MigrationGenerateSaaifMathOnly(final ApplicationDependencyProvider applicationDependencyProvider,
                                          final ApplicationProperties applicationProperties,
                                          final DataStoreDataManager dataManager,
                                          final DataStoreUtility dataStoreUtility,
                                          final DataStoreAttachmentManager dataStoreAttachmentManager,
                                          final DataStoreItemManager dataStoreItemManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        if (ModelConstants.ItemType.TYPE_TUT.equals(itemEntity.getItemJson().getType())
                || !SUBJECT_MATH.equals(itemEntity.getItemJson().getCore().getMetadata().getSubject())) {
            throw new SkipMigration("Item %s is not a math item so will be skipped", itemEntity.getItemId());
        }

        return itemEntity;
    }
}
