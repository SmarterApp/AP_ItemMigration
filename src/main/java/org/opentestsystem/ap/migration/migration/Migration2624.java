package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Component
public class Migration2624 extends AbstractDataStoreMigration {
    private final MigrationFileUtil migrationFileUtil;
    private final GitLabSyncManager itemBankSyncManager;

    public Migration2624(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
        this.migrationFileUtil = applicationDependencyProvider.getMigrationFileUtil();
        this.itemBankSyncManager = applicationDependencyProvider.getItemBankSyncManager();
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity) {
        if (!ItemConstants.ItemType.TYPE_TI.equals(itemEntity.getItemJson().getType())) {
            throw new SkipMigration(String.format("Migration2624 Skipped: item %s is not of type TI", itemEntity.getItemId()));
        }

        ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() ->
                new SkipMigration(String.format("Migration2624 Skipped: Could not find import files for item %s", itemEntity.getItemId())));

        if (importItem.getItemRelease().getItem() == null
                || importItem.getItemRelease().getItem().getContent() == null
                || importItem.getItemRelease().getItem().getContent().isEmpty()) {
            throw new SkipMigration(String.format("Migration2624 Skipped: item %s was not imported due to missing item release content", itemEntity.getItemId()));
        }

        TiItem tiItem = (TiItem) itemEntity.getItemJson();

        final IatModelMapper mapper = IatModelMapperFactory.getInstance().newModelMapper(tiItem.getType());

        try {
            Path itemSyncDir = Files.createTempDirectory(itemEntity.getItemId());

            TiItem mappedItem = (TiItem) mapper.mapSaaifToIATModel(importItem.getItemProps(),
                    tiItem, importItem.getItemRelease(),
                    importItem.getSmarterAppMetadata(),
                    importItem.getWordlistreleaseType().orElse(null),
                    importItem.getWordlistPathString(),
                    itemSyncDir,
                    importItem.getExpandedImportItemPath().toString());

            tiItem.getCore().getEn().setPrompt(mappedItem.getCore().getEn().getPrompt());
            tiItem.getTranslations().getEsp().setPrompt(mappedItem.getTranslations().getEsp().getPrompt());
            itemBankSyncManager.syncAttachmentsToDataStore(itemEntity.getItemId(), BRANCH_MASTER, itemSyncDir);
        } catch (IOException e) {
            throw new RuntimeException("Migration2624: Issue migrating item " + itemEntity.getItemId());
        }

        return itemEntity;
    }
}
