package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Sets;
import lombok.Data;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.model.ImportItem;
import org.opentestsystem.ap.common.saaif.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_IMAGES;

@Component
public class Migration2957 extends AbstractImportMigration {

    private static String CONTENTLINKINFO_TYPE_EQUATION = "Equation";

    private List<accessElementInfo> accessElementInfoList;

    public Migration2957(ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager,
                         ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility,
                dataStoreAttachmentManager, applicationDependencyProvider);

        this.accessElementInfoList = new ArrayList<>();
    }

    @Override
    protected ItemMerge mergeItem(Item dataStoreItem, Item mappedItem, Path itemSyncDir) {
        if (dataStoreItem.getType().equalsIgnoreCase(ItemConstants.ItemType.TYPE_SA)) {
            mergeSaEquationTTS(dataStoreItem, mappedItem);
        }

        //TODO: Apply item specific logic to set TTS on Rich Text
        return null;
//        return new ItemMerge(dataStoreItem, itemSyncDir, DO_NOT_SYNC_ATTACHMENTS);
    }

    @Override
    protected void checkSkipMigration(ImportItem importItem) {
        if (!importItem.getItemProps().getItemType().equalsIgnoreCase(ItemConstants.ItemType.TYPE_TUT)) {
            this.accessElementInfoList = loadEquationAccessElements(importItem.getItemRelease());
            if (this.accessElementInfoList.size() == 0) {
                throw new SkipMigration(String
                        .format("Item %s does not contain any Equation TTS to apply", importItem.getItemProps().getItemId()));
            }
        } else {
            throw new SkipMigration(String
                    .format("Item %s is a Tutorial. No migration is necessary.", importItem.getItemProps().getItemId()));
        }
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Sets.newHashSet(SECTION_IMAGES);
    }

    // ------------------------------------------------------------------------

    private void mergeSaEquationTTS(Item dataStoreItem, Item mappedItem) {
        SaItem saDataStoreItem = (SaItem) dataStoreItem;
        saDataStoreItem.getCore().getEn()
                .setPrompt(updateTTSOnEquationImages(
                        saDataStoreItem.getCore().getEn().getPrompt(),
                        dataStoreItem,
                        ItemConstants.ItemLanguage.LANG_ENU));

        saDataStoreItem.getTranslations().getEsp()
                .setPrompt(updateTTSOnEquationImages(
                        saDataStoreItem.getTranslations().getEsp().getPrompt(),
                        dataStoreItem,
                        ItemConstants.ItemLanguage.LANG_ESN));
        // TODO: Look for images to add TTS in Spanish Prompt, Rubric List and Exemplar Response List
    }

    // ------------------------------------------------------------------------

    private List<accessElementInfo> loadEquationAccessElements(ItemRelease release) {
        if (release.getItem().getFormat().equalsIgnoreCase(ItemConstants.ItemType.TYPE_STIM)) {
            return loadPassageEquationAccessElements(release.getPassage());
        } else {
            return loadItemEquationAccessElements(release.getItem());
        }
    }

    // ------------------------------------------------------------------------

    private List<accessElementInfo> loadItemEquationAccessElements(ItemRelease.Item item) {
        List<accessElementInfo> accessElementInfoList = new ArrayList<>();
        item.getContent().forEach(content -> content.getApipAccessibility().getAccessibilityInfo()
                .getAccessElement().forEach(accessElement -> {
                    if (accessElement.getContentLinkInfo().getType().equalsIgnoreCase(CONTENTLINKINFO_TYPE_EQUATION)) {
                        accessElementInfoList.add(new accessElementInfo(content.getLanguage(),
                                accessElement.getContentLinkInfo().getItsLinkIdentifierRef(),
                                accessElement.getRelatedElementInfo().getReadAloud().getAudioShortDesc()));
                    }
                }));
        updateFileNamesOnAccessElementInfoList(item, accessElementInfoList);
        return accessElementInfoList;
    }

    private void updateFileNamesOnAccessElementInfoList(ItemRelease.Item item, List<accessElementInfo> accessElementInfoList) {
        if (item.getFormat().equalsIgnoreCase(ItemConstants.ItemType.TYPE_SA)) {
            item.getContent().forEach(content -> {
                Document stemDoc = newDocument(content.getStem());
                accessElementInfoList.forEach(accessElementInfo -> {
                    Element image = stemDoc.getElementById(accessElementInfo.getItsLinkIdentifierRef());
                    if (Objects.nonNull(image)) {
                        accessElementInfo.setFileName(image.attr("src"));
                    }
                });
                //TODO: Look at Rubrics and Exemplar Responses which contain Rich Text
            });
        }
        // TODO: Apply item specific logic to read filenames from Rich Text
    }

    private List<accessElementInfo> loadPassageEquationAccessElements(ItemRelease.Passage passage) {
        return null;
    }

    private String updateTTSOnEquationImages(String htmlContent, Item dataStoreItem, String language) {
        Document document = newDocument(htmlContent);
        this.accessElementInfoList.forEach(accessElementInfo -> {
            if (accessElementInfo.getLanguage().equalsIgnoreCase(language)) {
                Optional<ItemImageResource> imageResource = dataStoreItem.getImages()
                        .getImageResources().stream()
                        .filter(resource -> resource.getProductionFile().getFileName().equalsIgnoreCase(accessElementInfo.getFileName()))
                        .findFirst();
                if (imageResource.isPresent()) {
                    String imageResourceId = imageResource.get().getId();
                    Element image = document.getElementsByAttributeValue("data-iat-image-resource-id", imageResourceId).first();
                    if (image != null) {
                        Element ttsElement = image.parent();
                        if (!ttsElement.nodeName().equalsIgnoreCase("span")) {
                            image.wrap("<span></span>");
                            ttsElement = image.parent();
                        }
                        updateTTSTag(ttsElement, accessElementInfo.getAudioShortDesc());
                    }
                }
            }
        });
        return document.body().html();
    }

    // ------------------------------------------------------------------------

    private void updateTTSTag(Element ttsTag, String ttsValue) {
        if (!ttsTag.hasClass("iat-text2speech")) {
            ttsTag.addClass("iat-text2speech");
        }
        if (isNotBlank(ttsValue)) {
            ttsTag.attr("data-iat-tts", ttsValue);
        }
    }

    private Document newDocument(String modelContent) {
        Document doc = Jsoup.parseBodyFragment(modelContent);
        doc.outputSettings(new Document.OutputSettings().prettyPrint(false));
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);
        return doc;
    }

    @Data
    private class accessElementInfo {
        private String language;
        private String itsLinkIdentifierRef;
        private String audioShortDesc;
        private String fileName;

        accessElementInfo(String language, String itsLinkIdentifierRef, String audioShortDesc) {
            this.language = language;
            this.itsLinkIdentifierRef = itsLinkIdentifierRef;
            this.audioShortDesc = audioShortDesc;
        }
    }
}
