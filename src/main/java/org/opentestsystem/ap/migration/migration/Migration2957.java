package org.opentestsystem.ap.migration.migration;

import lombok.Data;
import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.content.SaItemContent;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.item.SaaifContent;
import org.opentestsystem.ap.common.saaif.model.ImportItem;
import org.opentestsystem.ap.common.saaif.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import javax.xml.bind.JAXBElement;
import java.io.Serializable;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

@Component
public class Migration2957 extends AbstractImportMigration {

    private static String CONTENTLINKINFO_TYPE_EQUATION = "Equation";

    public Migration2957(ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager,
                         ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility,
                dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Override
    protected ItemMerge mergeItem(Item dataStoreItem, Item mappedItem, Path itemSyncDir) {
        return new ItemMerge(dataStoreItem, itemSyncDir, DO_NOT_SYNC_ATTACHMENTS);
    }

    @Override
    protected ItemMerge mergeItemFromImportData(ItemMerge itemMerge, ImportItem importItem, Path itemSyncDir) {
        List<accessElementInfo> accessElementInfoList = loadEquationAccessElements(importItem.getItemRelease());

        if (itemMerge.getMergedItem().getType().equalsIgnoreCase(ItemConstants.ItemType.TYPE_SA)) {
            mergeSaEquationTTS(itemMerge.getMergedItem(), accessElementInfoList);
        }

        //TODO: Apply item specific logic to set TTS on Rich Text
        return null;
//        return new ItemMerge(itemMerge.getMergedItem(), itemSyncDir, DO_NOT_SYNC_ATTACHMENTS);
    }

    @Override
    protected void checkSkipMigration(ImportItem importItem) {
        if (!importItem.getItemProps().getItemType().equalsIgnoreCase(ItemConstants.ItemType.TYPE_TUT)) {
            if (!hasEquationTTS(importItem)) {
                throw new SkipMigration(String
                        .format("Item %s does not contain any Equation TTS to apply", importItem.getItemProps().getItemId()));
            }
        } else {
            throw new SkipMigration(String
                    .format("Item %s is a Tutorial. No migration is necessary.", importItem.getItemProps().getItemId()));
        }
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.emptyList();
    }


    // ------------------------------------------------------------------------
    // Main Rich Text update method

    private String updateTTSOnEquationImages(String htmlContent, Item dataStoreItem, List<accessElementInfo> accessElementInfoList) {
        Document document = newDocument(htmlContent);
        accessElementInfoList.forEach(accessElementInfo -> {
            Optional<ItemImageResource> imageResource = dataStoreItem.getImages()
                    .getImageResources().stream()
                    .filter(resource -> resource.getProductionFile()
                            .getFileName().equalsIgnoreCase(accessElementInfo.getFileName()))
                    .findFirst();
            if (imageResource.isPresent()) {
                String imageResourceId = imageResource.get().getId();
                Element image = document.getElementsByAttributeValue("data-iat-image-resource-id", imageResourceId).first();
                if (image != null) {
                    Element ttsElement = image.parent();
                    if (!ttsElement.nodeName().equalsIgnoreCase("span")) {
                        image.wrap("<span></span>");
                        ttsElement = image.parent();
                    }
                    updateTTSTag(ttsElement, accessElementInfo.getAudioShortDesc());
                }
            }
        });
        return document.body().html();
    }

    // ------------------------------------------------------------------------
    // SaItem methods

    private void mergeSaEquationTTS(Item dataStoreItem, List<accessElementInfo> accessElementInfoList) {
        SaItem saDataStoreItem = (SaItem) dataStoreItem;

        setSaEquationTTS(saDataStoreItem.getCore().getEn(), dataStoreItem, accessElementInfoList);
        setSaEquationTTS(saDataStoreItem.getTranslations().getEsp(), dataStoreItem, accessElementInfoList);
    }

    private void setSaEquationTTS(SaItemContent itemContent, Item dataStoreItem, List<accessElementInfo> accessElementInfoList) {
        itemContent.setPrompt(updateTTSOnEquationImages(
                itemContent.getPrompt(),
                dataStoreItem,
                accessElementInfoList));

        itemContent.getExemplarResponses()
                .forEach(exemplar -> exemplar = updateTTSOnEquationImages(
                        exemplar, dataStoreItem, accessElementInfoList
                ));

        itemContent.getRubrics()
                .forEach(rubric -> rubric = updateTTSOnEquationImages(
                        rubric, dataStoreItem, accessElementInfoList
                ));
    }

    private void updateFileNamesFromSaItem(ItemRelease.Item item, List<accessElementInfo> accessElementInfoList){
        item.getContent().forEach(content -> {
            // Look for filenames on Stem
            setFileNamesOnAccessElementInfoList(content.getStem(), accessElementInfoList);
            // Look for filenames on Rubric list
            for (Serializable element : content.getRubriclist().getContent()) {
                JAXBElement jaxbElement = (JAXBElement) element;
                if (jaxbElement.getName().toString().equalsIgnoreCase("rubric")) {
                    ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                            (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                    setFileNamesOnAccessElementInfoList(rubric.getVal(), accessElementInfoList);
                } else if (jaxbElement.getName().toString().equals("samplelist")) {
                    ItemRelease.Item.Content.Rubriclist.Samplelist samplelist =
                            (ItemRelease.Item.Content.Rubriclist.Samplelist) jaxbElement.getValue();
                    for (ItemRelease.Item.Content.Rubriclist.Samplelist.Sample sample : samplelist.getSample()) {
                        if (StringUtils.isNotBlank(sample.getSamplecontent())) {
                            setFileNamesOnAccessElementInfoList(sample.getSamplecontent(), accessElementInfoList);
                        }
                    }
                }
            }
        });
    }

    // ------------------------------------------------------------------------
    // Methods used to load a list of accessElementInfo objects which contain
    // the information necessary to set the TSS value on images

    private List<accessElementInfo> loadEquationAccessElements(ItemRelease release) {
        if (release.getItem().getFormat().equalsIgnoreCase(ItemConstants.ItemType.TYPE_STIM)) {
            return loadPassageEquationAccessElements(release.getPassage());
        } else {
            return loadItemEquationAccessElements(release.getItem());
        }
    }

    private List<accessElementInfo> loadPassageEquationAccessElements(ItemRelease.Passage passage) {
        return null;
    }

    private List<accessElementInfo> loadItemEquationAccessElements(ItemRelease.Item item) {
        List<accessElementInfo> accessElementInfoList = new ArrayList<>();
        item.getContent().forEach(content -> content.getApipAccessibility().getAccessibilityInfo()
                .getAccessElement().forEach(accessElement -> {
                    if (accessElement.getContentLinkInfo().getType().equalsIgnoreCase(CONTENTLINKINFO_TYPE_EQUATION)) {
                        accessElementInfoList.add(new accessElementInfo(content.getLanguage(),
                                accessElement.getContentLinkInfo().getItsLinkIdentifierRef(),
                                accessElement.getRelatedElementInfo().getReadAloud().getAudioShortDesc()));
                    }
                }));
        updateFileNamesOnAccessElementInfoList(item, accessElementInfoList);
        return accessElementInfoList;
    }

    private void updateFileNamesOnAccessElementInfoList(ItemRelease.Item item, List<accessElementInfo> accessElementInfoList) {
        if (item.getFormat().equalsIgnoreCase(ItemConstants.ItemType.TYPE_SA)) {
            updateFileNamesFromSaItem(item, accessElementInfoList);
        }
        // TODO: Apply item specific logic to read filenames from Rich Text
    }

    private void setFileNamesOnAccessElementInfoList(String richText, List<accessElementInfo> accessElementInfoList) {
        Document stemDoc = newDocument(richText);
        accessElementInfoList.forEach(accessElementInfo -> {
            Element image = stemDoc.getElementById(accessElementInfo.getItsLinkIdentifierRef());
            if (Objects.nonNull(image)) {
                accessElementInfo.setFileName(image.attr("src"));
            }
        });
    }


    // ------------------------------------------------------------------------
    // Used in checkSkipMigration. Determine is item has Equation accessibilityInfo.accessElement (TTS)
    private boolean hasEquationTTS(ImportItem importItem) {
        if (importItem.getItemProps().getItemType().equals(ItemConstants.ItemType.TYPE_STIM)) {
            return passageContentHasEquationTTS(importItem.getItemRelease().getPassage(), ItemConstants.ItemLanguage.LANG_ENU) ||
                    passageContentHasEquationTTS(importItem.getItemRelease().getPassage(), ItemConstants.ItemLanguage.LANG_ESN);
        } else {
            return itemContentHasEquationTTS(importItem.getItemRelease().getItem(), ItemConstants.ItemLanguage.LANG_ENU) ||
                    itemContentHasEquationTTS(importItem.getItemRelease().getItem(), ItemConstants.ItemLanguage.LANG_ESN);
        }
    }

    private boolean passageContentHasEquationTTS(ItemRelease.Passage passage, String language) {
        boolean hasEquationTTS = false;
        Optional<ItemRelease.Passage.Content> passageContent =
                passage.getContent().stream()
                        .filter(content -> language.equalsIgnoreCase(content.getLanguage())).findAny();
        if (passageContent.isPresent()) {
            ItemRelease.Passage.Content content = passageContent.get();
            hasEquationTTS = contentHasEquationTTS(content);
        }
        return hasEquationTTS;
    }

    private boolean itemContentHasEquationTTS(ItemRelease.Item item, String language) {
        boolean hasEquationTTS = false;
        Optional<ItemRelease.Item.Content> itemContent =
                item.getContent().stream()
                        .filter(content -> language.equalsIgnoreCase(content.getLanguage())).findAny();
        if (itemContent.isPresent()) {
            ItemRelease.Item.Content content = itemContent.get();
            hasEquationTTS = contentHasEquationTTS(content);
        }
        return hasEquationTTS;
    }

    private boolean contentHasEquationTTS(SaaifContent content) {
        boolean hasEquation = false;
        if (content.getApipAccessibility() != null) {
            hasEquation = content.getApipAccessibility().getAccessibilityInfo().getAccessElement()
                    .stream()
                    .anyMatch(accessElement -> accessElement.getContentLinkInfo()
                            .getType().equalsIgnoreCase(CONTENTLINKINFO_TYPE_EQUATION));
        }
        return hasEquation;
    }

    // ------------------------------------------------------------------------
    // Helper methods

    private void updateTTSTag(Element ttsTag, String ttsValue) {
        if (!ttsTag.hasClass("iat-text2speech")) {
            ttsTag.addClass("iat-text2speech");
        }
        if (isNotBlank(ttsValue)) {
            ttsTag.attr("data-iat-tts", ttsValue);
        }
    }

    private Document newDocument(String modelContent) {
        Document doc = Jsoup.parseBodyFragment(modelContent);
        doc.outputSettings(new Document.OutputSettings().prettyPrint(false));
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);
        return doc;
    }

    @Data
    private class accessElementInfo {
        private String language;
        private String itsLinkIdentifierRef;
        private String audioShortDesc;
        private String fileName;

        accessElementInfo(String language, String itsLinkIdentifierRef, String audioShortDesc) {
            this.language = language;
            this.itsLinkIdentifierRef = itsLinkIdentifierRef;
            this.audioShortDesc = audioShortDesc;
        }
    }
}
