package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.mapper.MapperUtil;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

@Slf4j
@Component
public class Migration1703 extends AbstractMigration {

    public Migration1703(Util util) {
        super(util);
    }

    @Override
    protected void runMigration(final ItemInfo itemInfo,
                                final BranchInfo branchInfo,
                                final MigrationDefinition migration,
                                final GitClient gitClient) {

        final ItemRelease release = gitClient.readItemFile();

        // This migration only applies to non-stimulus and non-tutorial items
        if (release.getItem() != null
                && !release.getItem().getFormat().equals(ItemConstants.ItemType.TYPE_TUT)
                && !release.getItem().getFormat().equals(ItemConstants.ItemType.TYPE_STIM)) {

            final AssessmentItem item = (AssessmentItem) gitClient.readModelFile();

            //Check if item is not associated with a stimulus
            if (StringUtils.isEmpty(item.getCore().getStimulusId())) {
                ItemRelease.Item.Attriblist.Attrib layoutAttrib = getAttribute(release, "itm_att_Page Layout");
                if (null != layoutAttrib) {
                    if (!layoutAttrib.getVal().equals("8")) {
                        // Read file content and remove line breaks (double spacing)
                        String fileContent = RepositoryUtil.readFileToString(
                                gitClient.getItemContext().getLocalItemFilePath());
                        fileContent = MapperUtil.removeNewLine(fileContent);

                        // Write file contents with no double spaces back to file
                        gitClient.writeFileContents(item.getId() + ".xml", fileContent, false);

                        // Read item file one more time
                        final ItemRelease flatRelease = gitClient.readItemFile();

                        // Get layout attribute
                        final ItemRelease.Item.Attriblist.Attrib flatAttrib =
                                getAttribute(flatRelease, "itm_att_Page Layout");

                        // Set to correct layout value
                        if (null != flatAttrib) {
                            flatAttrib.setVal("8");
                        }
                        // write new model file
                        gitClient.writeItemFile(flatRelease);

                        // stage model file
                        gitClient.stageFiles();
                    }
                }
            }
        }
    }

    private ItemRelease.Item.Attriblist.Attrib getAttribute(ItemRelease release, String attribId) {
        return release.getItem().getAttriblist().getAttrib()
                .stream()
                .filter(attrib -> attribId.equals(attrib.getAttid()))
                .findAny()
                .orElse(null);
    }
}
