package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.springframework.stereotype.Component;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_ASL;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_BRAILLE;

@Slf4j
@Component
public class Migration2807 extends AbstractDataStoreMigration {

    public Migration2807(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility,
            dataStoreAttachmentManager);
    }

    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        boolean shouldMigrate = BRANCH_MASTER.equalsIgnoreCase(migratedEntity.getBranchName())
            || SECTION_ASL.equalsIgnoreCase(migratedEntity.getBranchName())
            || SECTION_BRAILLE.equalsIgnoreCase(migratedEntity.getBranchName());

        final Item item = migratedEntity.getItemJson();

        shouldMigrate = shouldMigrate &&
            (item.getAsl() == null || item.getAsl().getAttachments().isEmpty()) &&
            (item.getBraille() == null || item.getBraille().getAttachments().isEmpty());

        return shouldMigrate;
    }

    /**
     * No need to persist a new record as this migration is a item bank resync.
     */
    @Override
    protected ItemEntity migrateAndSave(ItemEntity entityToMigrate, String version) {
        return entityToMigrate;
    }

    /**
     * Never gets called as the migrateAndSave means it never gets this far.
     */
    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity) {
        return itemEntity;
    }
}
