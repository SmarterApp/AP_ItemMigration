package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

import java.nio.file.Path;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_HTQO;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_HTQS;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_MI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_STIM;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TI;

@Slf4j
@Component
public class Migration2750 extends AbstractDataStoreMigration {

    protected final GitlabClient gitlabClient;
    protected final AppAssembler appAssembler;
    protected final MigrationFileUtil migrationFileUtil;
    protected final IatModelMapperFactory iatModelMapperFactory;

    public Migration2750(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {

        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility,
                attachmentManager);

        this.gitlabClient = applicationDependencyProvider.getGitlabClient();
        this.appAssembler = applicationDependencyProvider.getAppAssembler();
        this.migrationFileUtil = applicationDependencyProvider.getMigrationFileUtil();
        this.iatModelMapperFactory = applicationDependencyProvider.getIatModelMapperFactory();
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return true;
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        Item item = itemEntity.getItemJson();

        ImportItem importItem = migrationFileUtil.getImportItem(itemEntity).orElseThrow(() ->
                new SkipMigration(
                        format("Migration 2571 - item %s - error processing import zip", itemEntity.getItemId())));

        // Create temporary directory to store attachment files that will be synced to S3
        Path itemSyncDir = this.createTempDir(item.getId());

        IatModelMapper mapper = this.iatModelMapperFactory.newModelMapper(item.getType());

        Item mappedItem = mapper.mapSaaifToIATModel(
                importItem.getItemProps(),
                item,
                importItem.getItemRelease(),
                importItem.getSmarterAppMetadata(),
                importItem.getWordlistreleaseType().orElse(null),
                importItem.getWordlistPathString(),
                itemSyncDir,
                importItem.getItemImportSourcePath().toString());

        itemEntity.setItemJson(mappedItem);

        this.syncAttachments(itemEntity, itemSyncDir);

        return itemEntity;
    }

    private void check(Item item) {
        if (!TYPE_EBSR.equalsIgnoreCase(item.getType())
                && !TYPE_EQ.equalsIgnoreCase(item.getType())
                && !TYPE_HTQO.equalsIgnoreCase(item.getType())
                && !TYPE_HTQS.equalsIgnoreCase(item.getType())
                && !TYPE_GI.equalsIgnoreCase(item.getType())
                && !TYPE_MI.equalsIgnoreCase(item.getType())
                && !TYPE_TI.equalsIgnoreCase(item.getType())) {
            throw new SkipMigration(
                    format("Item %s is type %s which does not support QRX ", item.getId(), item.getType()));
        }
        if (isBlank(item.getItsId())) {
            throw new SkipMigration(format("Item %s has no ITS ID", item.getId()));
        }
    }
}
