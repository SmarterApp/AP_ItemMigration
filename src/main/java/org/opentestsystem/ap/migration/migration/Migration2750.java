package org.opentestsystem.ap.migration.migration;

import com.google.common.io.Files;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.eclipse.jgit.util.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Optional;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_HTQO;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_HTQS;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MI;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TI;

@Slf4j
@Component
public class Migration2750 extends AbstractImportMigration {

    public Migration2750(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         DataStoreItemManager dataStoreItemManager,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {

        super(applicationProperties, dataManager, dataStoreUtility, attachmentManager,
                applicationDependencyProvider, dataStoreItemManager);
    }

    @Override
    protected void checkSkipMigration(ItemEntity itemEntity) {
        final String type = itemEntity.getItemJson().getType();
        if (!TYPE_EBSR.equalsIgnoreCase(type)
                && !TYPE_EQ.equalsIgnoreCase(type)
                && !TYPE_HTQO.equalsIgnoreCase(type)
                && !TYPE_HTQS.equalsIgnoreCase(type)
                && !TYPE_GI.equalsIgnoreCase(type)
                && !TYPE_MI.equalsIgnoreCase(type)
                && !TYPE_TI.equalsIgnoreCase(type)) {
            throw new SkipMigration(format("%s Skipped: Item %s is type %s which does not support QRX ",
                    getMigrationName(), itemEntity.getItemId(), type));
        }
        if (isBlank(itemEntity.getItemJson().getItsId())) {
            throw new SkipMigration(format("%s Skipped: Item %s has no ITS ID", getMigrationName(), itemEntity.getItemId()));
        }
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        Path path = Files.createTempDir().toPath();

        File[] itemSyncDirFiles = itemSyncDir.toFile().listFiles();
        if (itemSyncDirFiles == null) {
            throw new SkipMigration("Migration2750: No QRX file to migrate for item " + dataStoreItem.getId());
        }

        Optional<File> maybeQrxFile = Arrays.stream(itemSyncDirFiles)
                .filter(file -> StringUtils.equalsIgnoreCase("qrx", FilenameUtils.getExtension(file.getName())))
                .findFirst();

        if (!maybeQrxFile.isPresent()) {
            throw new SkipMigration("Migration2750: No QRX file to migrate for item " + dataStoreItem.getId());
        }

        File targetFile = new File(path.toFile(), maybeQrxFile.get().getName());
        try {
            FileUtils.copyFile(maybeQrxFile.get(), targetFile);
        } catch (IOException e) {
            throw new RuntimeException("Migration2750: could not copy qrx file " + maybeQrxFile.get().getName());
        }

        return new ItemMerge(dataStoreItem, path, true);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.emptyList();
    }
}
