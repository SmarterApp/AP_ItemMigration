package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

import java.nio.file.Path;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_HTQO;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_HTQS;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_MI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TI;

@Slf4j
@Component
public class Migration2750 extends AbstractImportMigration {

    public Migration2750(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {

        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, attachmentManager,
                applicationDependencyProvider);
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return BRANCH_MASTER.equalsIgnoreCase(migratedEntity.getBranchName());
    }

    @Override
    protected void checkSkipMigration(ItemEntity itemEntity) {
        final String type = itemEntity.getItemJson().getType();
        if (!TYPE_EBSR.equalsIgnoreCase(type)
                && !TYPE_EQ.equalsIgnoreCase(type)
                && !TYPE_HTQO.equalsIgnoreCase(type)
                && !TYPE_HTQS.equalsIgnoreCase(type)
                && !TYPE_GI.equalsIgnoreCase(type)
                && !TYPE_MI.equalsIgnoreCase(type)
                && !TYPE_TI.equalsIgnoreCase(type)) {
            throw new SkipMigration(format("%s Skipped: Item %s is type %s which does not support QRX ",
                    migrationName, itemEntity.getItemId(), type));
        }
        if (isBlank(itemEntity.getItemJson().getItsId())) {
            throw new SkipMigration(format("%s Skipped: Item %s has no ITS ID", migrationName, itemEntity.getItemId()));
        }
    }
}
