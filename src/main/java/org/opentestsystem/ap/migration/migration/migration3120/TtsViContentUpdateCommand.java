package org.opentestsystem.ap.migration.migration.migration3120;

import org.apache.commons.lang3.StringUtils;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.Images;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.common.model.content.EbsrItemContent;
import org.opentestsystem.ap.common.model.content.EqItemContent;
import org.opentestsystem.ap.common.model.content.GiItemContent;
import org.opentestsystem.ap.common.model.content.HtqoItemContent;
import org.opentestsystem.ap.common.model.content.HtqsItemContent;
import org.opentestsystem.ap.common.model.content.McItemContent;
import org.opentestsystem.ap.common.model.content.MiItemContent;
import org.opentestsystem.ap.common.model.content.MsItemContent;
import org.opentestsystem.ap.common.model.content.SaItemContent;
import org.opentestsystem.ap.common.model.content.StimItemContent;
import org.opentestsystem.ap.common.model.content.TiItemContent;
import org.opentestsystem.ap.common.model.content.TutItemContent;
import org.opentestsystem.ap.common.model.content.WerItemContent;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdateCommand;

import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_HTQO;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_HTQS;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_MC;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_MI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_MS;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_STIM;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TUT;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_WER;

public class TtsViContentUpdateCommand extends ContentUpdateCommand {
    private static final String TTS_VI_ATTRIBUTE = "data-iat-tts-vi";
    private static final String IMG_RESOURCE_ID_ATTRIBUTE = "data-iat-image-resource-id";

    //Image File name , TTS VI
    private final Map<String, String> imageFilenameToTtsVi = new HashMap<>();

    //Image resource id, image file name
    private Map<String, String> dataStoreImageResourceToFileName;

    TtsViContentUpdateCommand(Item mappedItem, Images dataStoreImages) {
        dataStoreImageResourceToFileName = getImageResourceIdToFileName(dataStoreImages);
        populateImageMap(mappedItem);
    }

    @Override
    public String applyEnglishContentUpdate(final String englishContentHtml) {
        return addTtsViWhereNeeded(super.newJsoupDocument(englishContentHtml)).html();
    }

    @Override
    public String applyTranslatedContentUpdate(final String language, final String translatedContent, final String englishContent) {
        return translatedContent;
    }

    private void updateImageFileNameToTtsViMap(Map<String, String> mappedIdToFilename, String html) {
        Document document = super.newJsoupDocument(html);
        document.getElementsByTag("img").stream()
                .filter(element -> element.parent().nodeName().equals("span"))
                .map(element -> {
                    String resourceId = element.attr(IMG_RESOURCE_ID_ATTRIBUTE);
                    String fileName = StringUtils.defaultString(mappedIdToFilename.get(resourceId));
                    String ttsVi = StringUtils.defaultString(element.parent().attr(TTS_VI_ATTRIBUTE));
                    return new ImageResourceInformation(resourceId, fileName, ttsVi);
                }).collect(Collectors.toList())
                .forEach(imageResourceInformation -> imageFilenameToTtsVi.put(imageResourceInformation.fileName, imageResourceInformation.ttsVi));
    }

    private Map<String, String> getImageResourceIdToFileName(Images images) {
        Map<String, String> imageMap = new HashMap<>();
        images.getImageResources()
                .forEach(itemImageResource -> imageMap.put(itemImageResource.getId(), itemImageResource.getProductionFile().getFileName()));

        return imageMap;
    }

    private Document addTtsViWhereNeeded(Document document) {
        document.getElementsByTag("img").stream().filter(element -> {
            String resourceId = element.attr(IMG_RESOURCE_ID_ATTRIBUTE);
            String fileName = dataStoreImageResourceToFileName.get(resourceId);
            Element parent = element.parent();
            if(!parent.nodeName().equals("span")) {
                return false;
            }
            String ttsVi = parent.attr(TTS_VI_ATTRIBUTE);
            return isBlank(ttsVi) && isNotBlank(fileName) && imageFilenameToTtsVi.containsKey(fileName);
        }).forEach(element -> {
            String resourceId = element.attr(IMG_RESOURCE_ID_ATTRIBUTE);
            String fileName = dataStoreImageResourceToFileName.get(resourceId);
            String mappedTtsVi = imageFilenameToTtsVi.get(fileName);
            element.parent().attr(TTS_VI_ATTRIBUTE, mappedTtsVi);
        });

        //Use the map
        return document;
    }

    private void populateImageMap(Item mappedItem) {
        switch (mappedItem.getType()) {
            case TYPE_EQ:
                updateEqData((EqItem) mappedItem);
                break;
            case TYPE_EBSR:
                updateEbsrData((EbsrItem) mappedItem);
                break;
            case TYPE_GI:
                updateGiData((GiItem) mappedItem);
                break;
            case TYPE_HTQO:
                updateHtqoData((HtqoItem) mappedItem);
                break;
            case TYPE_HTQS:
                updateHtqsData((HtqsItem) mappedItem);
                break;
            case TYPE_MC:
                updateMcData((McItem) mappedItem);
                break;
            case TYPE_MI:
                updateMiData((MiItem) mappedItem);
                break;
            case TYPE_MS:
                updateMsData((MsItem) mappedItem);
                break;
            case TYPE_SA:
                updateSaData((SaItem) mappedItem);
                break;
            case TYPE_STIM:
                updateStimData((StimItem) mappedItem);
                break;
            case TYPE_TI:
                updateTiData((TiItem) mappedItem);
                break;
            case TYPE_TUT:
                updateTutData((TutItem) mappedItem);
                break;
            case TYPE_WER:
                updateWerData((WerItem) mappedItem);
                break;
        }
    }

    private void updateWerData(WerItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        WerItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getRubric());
        content.getExemplarResponses().forEach(s -> updateImageFileNameToTtsViMap(mappedIdToFilename, s));
    }

    private void updateEqData(EqItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        EqItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());
    }

    private void updateStimData(StimItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        StimItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getContent());
    }

    private void updateTutData(TutItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        TutItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getContent());
    }

    private void updateMiData(MiItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        MiItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());
        processTable(content.getTable(), true, mappedIdToFilename);
    }

    private void updateTiData(TiItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        TiItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());
        processTable(content.getTable(), false, mappedIdToFilename);
    }

    private void updateMsData(MsItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        MsItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());
        content.getOptions().forEach(itemOption -> {
            updateImageFileNameToTtsViMap(mappedIdToFilename, itemOption.getRationale());
            updateImageFileNameToTtsViMap(mappedIdToFilename, itemOption.getText());
        });
    }

    private void updateMcData(McItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        McItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());
        content.getOptions().forEach(itemOption -> {
            updateImageFileNameToTtsViMap(mappedIdToFilename, itemOption.getRationale());
            updateImageFileNameToTtsViMap(mappedIdToFilename, itemOption.getText());
        });
    }

    private void updateGiData(GiItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        GiItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());
    }

    private void updateHtqoData(HtqoItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        HtqoItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());

        content.getHtqOrderable().getOrderableStrings().forEach(s -> updateImageFileNameToTtsViMap(mappedIdToFilename, s));
    }

    private void updateHtqsData(HtqsItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        HtqsItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getHtqSelectable().getInteractiveText());
    }

    private void updateEbsrData(EbsrItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());

        EbsrItemContent content = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPrompt());
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPartAPrompt());
        updateImageFileNameToTtsViMap(mappedIdToFilename, content.getPartBPrompt());

        content.getPartAOptions().forEach(itemOption -> {
            updateImageFileNameToTtsViMap(mappedIdToFilename, itemOption.getRationale());
            updateImageFileNameToTtsViMap(mappedIdToFilename, itemOption.getText());
        });

        content.getPartBOptions().forEach(itemOption -> {
            updateImageFileNameToTtsViMap(mappedIdToFilename, itemOption.getRationale());
            updateImageFileNameToTtsViMap(mappedIdToFilename, itemOption.getText());
        });
    }

    private void updateSaData(SaItem mappedItem) {
        Map<String, String> mappedIdToFilename = getImageResourceIdToFileName(mappedItem.getImages());
        SaItemContent saItemContent = mappedItem.getCore().getEn();
        updateImageFileNameToTtsViMap(mappedIdToFilename, saItemContent.getPrompt());

        saItemContent.getExemplarResponses().forEach(s -> updateImageFileNameToTtsViMap(mappedIdToFilename, s));
        saItemContent.getRubrics().forEach(s -> updateImageFileNameToTtsViMap(mappedIdToFilename, s));
    }

    private void processTable(Table table, boolean labelsOnly, Map<String, String> mappedIdToFilename) {
        table.getColumns().forEach(column -> updateImageFileNameToTtsViMap(mappedIdToFilename, column.getLabel()));

        table.getRows().forEach(row -> {
            row.getCells().forEach(cell -> {
                if (!labelsOnly || cell.isLabel()) {
                    updateImageFileNameToTtsViMap(mappedIdToFilename, (String) cell.getValue());
                }
            });
        });
    }

    private static class ImageResourceInformation {
        String imageResourceId;
        String fileName;
        String ttsVi;

        ImageResourceInformation(final String imageResourceId, final String fileName, final String ttsVi) {
            this.imageResourceId = imageResourceId;
            this.fileName = fileName;
            this.ttsVi = ttsVi;
        }
    }
}
