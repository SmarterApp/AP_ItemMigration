package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.Collection;

/**
 * Sets the "isMachineScoringManagedByIat" to false for items that do not have their machine scoring rules handled by
 * TIMS.
 * <p>
 *     Refer to https://smarterbalanced.atlassian.net/wiki/spaces/IAT/pages/6815825/Scoring+Tab+Rules for the details on
 *     which item types have their machine scoring handled by TIMS.
 * </p>
 */
@Component
public class Migration3204 extends AbstractMigration {
    // A list of the item types that have their machine scoring managed by TIMS.
    private static final Collection<String> itemTypesToExclude = Arrays.asList(
            ModelConstants.ItemType.TYPE_EQ,
            ModelConstants.ItemType.TYPE_GI,
            ModelConstants.ItemType.TYPE_TI);

    public Migration3204(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final DataStoreItemManager dataStoreItemManager,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider,
                applicationProperties,
                dataManager,
                dataStoreItemManager,
                dataStoreUtility,
                dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, final MigrationContext migrationContext) {
        // if the item is an EQ, GI or TI:  skip migration - items of these types should not be touched by this
        // migration.
        if (itemTypesToExclude.contains(itemEntity.getItemJson().getType())) {
            throw new SkipMigration(String.format("Item id %s is a(n) %s item, thus should not be affected by this migration.",
                    itemEntity.getItemId(),
                    itemEntity.getItemJson().getType()));
        }

        if(!(itemEntity.getItemJson() instanceof AssessmentItem)) {
            throw new SkipMigration(String.format("Item %s is not an assessment item", itemEntity.getItemId()));
        }

        // Update the machineScoringManagedByIat to false
        final AssessmentItem assessmentItem = (AssessmentItem) itemEntity.getItemJson();
        assessmentItem.getCore().getScoring().setMachineScoringManagedByIat(false);

        return itemEntity;
    }
}
