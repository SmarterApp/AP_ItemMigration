package org.opentestsystem.ap.migration.migration;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

@Component
public class Migration3297 extends AbstractMigration {

    public Migration3297(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         DataStoreItemManager dataStoreItemManager,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        if (!ModelConstants.ItemType.TYPE_MI.equalsIgnoreCase(itemEntity.getItemJson().getType())) {
            throw new SkipMigration(String.format("Item %s is not an MI item; no migration necessary",
                    itemEntity.getItemId()));
        }

        final MiItem miItem = (MiItem) itemEntity.getItemJson();

        miItem.getCore().getEn().getTable().getColumns().forEach(column -> {
            column.setLabel(applyMiHeaderFormatting(column.getLabel()));
        });
        miItem.getCore().getEn().getTable().getRows().forEach(row -> {
            row.getCells().forEach(cell -> {
                if (cell.getType().equals("label")) {
                    cell.setValue(applyMiHeaderFormatting((String) cell.getValue()));
                }
            });
        });

        return itemEntity;
    }

    private String applyMiHeaderFormatting(String value) {
        if (StringUtils.isNotBlank(value)) {
            if (!value.startsWith("<strong>")) {
                return String.format("<strong>%s</strong>", value);
            }
        }
        return value;
    }
}
