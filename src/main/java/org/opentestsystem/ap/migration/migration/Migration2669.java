package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.ServerManaged;
import org.opentestsystem.ap.common.util.ContentSpecIdUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemSubject.SUBJECT_MATH;

@Component
public class Migration2669  extends AbstractMigration {

    public Migration2669(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, MigrationContext migrationContext) {
        final Item item = itemEntity.getItemJson();
        final ServerManaged serverManaged = item.getServerManaged();
        final String itemId = item.getId();

        serverManaged.setItsId(item.getItsId());
        serverManaged.setVersion(item.getVersion());
        serverManaged.setType(item.getType());
        serverManaged.setId(itemId);

        //Default all to empty as we'll regenerate
        serverManaged.setPrimaryEnhancedId(EMPTY);
        serverManaged.setSecondaryEnhancedId(EMPTY);
        serverManaged.setTertiaryEnhancedId(EMPTY);
        serverManaged.setQuaternaryEnhancedId(EMPTY);


        if(ModelConstants.ItemType.TYPE_TUT.equals(item.getType()) || ModelConstants.ItemType.TYPE_STIM.equals(item.getType())){
            return itemEntity;
        }

        updateServerManagedEnhancedIds(item, serverManaged, itemId);
        return itemEntity;
    }

    private void updateServerManagedEnhancedIds(final Item item, final ServerManaged serverManaged, final String itemId) {
        ItemMetadata metadata = item.getCore().getMetadata();
        final String subject = metadata.getSubject();
        final String grade = metadata.getIntendedGrade();

        serverManaged.setPrimaryEnhancedId(ContentSpecIdUtil.formatId(
                itemId,
                subject,
                grade,
                metadata.getPrimaryClaim(),
                metadata.getPrimaryTarget(),
                metadata.getPrimaryCommonCoreStandard(),
                metadata.getPrimaryContentDomain(),
                metadata.getPrimaryEmphasis()));

        if (SUBJECT_MATH.equals(subject)) {
            serverManaged.setSecondaryEnhancedId(ContentSpecIdUtil.formatId(
                    itemId,
                    subject,
                    grade,
                    metadata.getSecondaryClaim(),
                    metadata.getSecondaryTarget(),
                    metadata.getSecondaryCommonCoreStandard(),
                    metadata.getSecondaryContentDomain()));

            serverManaged.setTertiaryEnhancedId(ContentSpecIdUtil.formatId(
                    itemId,
                    subject,
                    grade,
                    metadata.getTertiaryClaim(),
                    metadata.getTertiaryTarget(),
                    metadata.getTertiaryCommonCoreStandard(),
                    metadata.getTertiaryContentDomain()));

            serverManaged.setQuaternaryEnhancedId(ContentSpecIdUtil.formatId(
                    itemId,
                    subject,
                    grade,
                    metadata.getQuaternaryClaim(),
                    metadata.getQuaternaryTarget(),
                    metadata.getQuaternaryCommonCoreStandard(),
                    metadata.getQuaternaryContentDomain()));
        }
    }
}
