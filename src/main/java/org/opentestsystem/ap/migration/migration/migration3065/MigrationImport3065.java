package org.opentestsystem.ap.migration.migration.migration3065;

import com.google.common.io.Files;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.scoring.Scoring;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.model.ImportItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.migration.AbstractImportMigration;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Collections;
import java.util.Optional;

import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TI;

@Slf4j
@Component
public class MigrationImport3065 extends AbstractImportMigration {
    public MigrationImport3065(final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final ItemManagerEventProducer eventProducer, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager, final ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider, TYPE_EQ, TYPE_GI, TYPE_TI);
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        return new ItemMerge(dataStoreItem, itemSyncDir, false);
    }

    @Override
    protected ItemMerge mergeItemFromImportData(final ItemMerge itemMerge, final ImportItem importItem, final Path itemSyncDir) {
        AssessmentItem assessmentItem = (AssessmentItem) itemMerge.getMergedItem();
        Scoring scoring = assessmentItem.getCore().getScoring();
        scoring.setManagedByIat(true);

        if(scoring.isMachineScoringManagedByIat()) {
            return itemMerge;
        }

        Optional<Path> syncPath = updateItemWithImportedQrx(itemMerge.getMergedItem().getId(), importItem.getExpandedImportItemPath(), importItem.getItemRelease().getItem());
        return new ItemMerge(itemMerge.getMergedItem(), syncPath.orElse(itemSyncDir), syncPath.isPresent());
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.emptyList();
    }

    private Optional<Path> updateItemWithImportedQrx(final String itemId, Path itemSyncDir, ItemRelease.Item itemRelease) {
        Path newSyncDir = Files.createTempDir().toPath();

        Optional<String> maybeQrxFileName = getMachineRubricFromItemRelease(itemRelease);

        if(!maybeQrxFileName.isPresent()) {
            return Optional.empty();
        }

        Optional<Path> maybeQrxFile = findQrxFileInImportFiles(maybeQrxFileName.get(), itemSyncDir);

        if(!maybeQrxFile.isPresent()) {
            return Optional.empty();
        }

        File targetFile = new File(newSyncDir.toFile(), RepositoryUtil.getQrxFileName(itemId));

        try {
            FileUtils.copyFile(maybeQrxFile.get().toFile(), targetFile);
        } catch (IOException e) {
            throw new RuntimeException("Migration2750: could not copy qrx file " + maybeQrxFile.get().toFile().getName());
        }

        return Optional.of(newSyncDir);
    }

    private Optional<String> getMachineRubricFromItemRelease(ItemRelease.Item item) {
        if(item.getMachineRubric() != null && !item.getMachineRubric().isEmpty()) {
            return Optional.of(item.getMachineRubric().get(0).getFilename());
        }

        return Optional.empty();
    }

    private Optional<Path> findQrxFileInImportFiles(final String qrxFileName, Path importSyncDirPath) {
        try {
            return java.nio.file.Files.walk(importSyncDirPath).filter(path -> qrxFileName.equals(path.toFile().getName()) && !path.toFile().isDirectory()).findFirst();
        } catch(IOException ioe) {
            log.error("Issue searching the import sync directory");
        }

        return Optional.empty();
    }
}
