package org.opentestsystem.ap.migration.migration.migration3065;

import com.google.common.io.Files;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.eclipse.jgit.util.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.scoring.Scoring;
import org.opentestsystem.ap.common.saaif.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.migration.AbstractImportMigration;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Optional;

import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TI;

@Component
public class MigrationImport3065 extends AbstractImportMigration {
    public MigrationImport3065(final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final ItemManagerEventProducer eventProducer, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager, final ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider, TYPE_EQ, TYPE_GI, TYPE_TI);
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        AssessmentItem assessmentItem = (AssessmentItem) dataStoreItem;
        Scoring scoring = assessmentItem.getCore().getScoring();

        if(scoring.isManagedByIat() && scoring.isMachineScoringManagedByIat()) {
            throw new SkipMigration("MigrationImport3065: Scoring flag is set correctly and machine scoring managed by TIMS");
        }

        scoring.setManagedByIat(true);
        Path syncPath = updateItemWithImportedQrx(dataStoreItem.getId(), itemSyncDir);

        return new ItemMerge(dataStoreItem, syncPath, true);
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.emptyList();
    }

    private Path updateItemWithImportedQrx(final String itemId, Path itemSyncDir) {
        Path path = Files.createTempDir().toPath();

        File[] itemSyncDirFiles = itemSyncDir.toFile().listFiles();
        if (itemSyncDirFiles == null) {
            throw new SkipMigration("Migration2750: No QRX file to migrate for item " + itemId);
        }

        Optional<File> maybeQrxFile = Arrays.stream(itemSyncDirFiles)
                .filter(file -> StringUtils.equalsIgnoreCase("qrx", FilenameUtils.getExtension(file.getName())))
                .findFirst();

        if (!maybeQrxFile.isPresent()) {
            throw new SkipMigration("Migration2750: No QRX file to migrate for item " + itemId);
        }

        File targetFile = new File(path.toFile(), maybeQrxFile.get().getName());
        try {
            FileUtils.copyFile(maybeQrxFile.get(), targetFile);
        } catch (IOException e) {
            throw new RuntimeException("Migration2750: could not copy qrx file " + maybeQrxFile.get().getName());
        }

        return path;
    }
}
