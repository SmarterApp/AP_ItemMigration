package org.opentestsystem.ap.migration.migration;

import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;

/**
 * IAT-3075: Import: machineScoringManagedByIat set to true by import process
 */
@Component
public class Migration3119 extends AbstractImportMigration {

    public Migration3119(final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final ItemManagerEventProducer eventProducer, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager, final ApplicationDependencyProvider applicationDependencyProvider) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Override
    protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
        this.checkSkip(dataStoreItem);

        AssessmentItem item = (AssessmentItem) dataStoreItem;
        item.getCore().getScoring().setMachineScoringManagedByIat(false);

        String qrxFileName = RepositoryUtil.getQrxFileName(item.getId());

        // sync only the QRX
        itemBankSyncManager.syncAttachmentsToDataStore(
                item.getId(),
                BRANCH_MASTER,
                itemSyncDir,
                Arrays.asList(qrxFileName));

        // do not sync
        return new ItemMerge(dataStoreItem, itemSyncDir, DO_NOT_SYNC_ATTACHMENTS);
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return super.shouldMigrateBranch(migratedEntity)
                || SECTION_CORE.equalsIgnoreCase(migratedEntity.getBranchName());
    }

    @Override
    protected Collection<String> getEditedSectionsBlockingMigration() {
        return Collections.emptyList();
    }

    private void checkSkip(Item item) {
        if (!ITEMS_TO_MIGRATION.contains(item.getId())) {
            throw new SkipMigration(String.format("item %s not in list", item.getId()));
        }
        if (!(item instanceof AssessmentItem)) {
            throw new SkipMigration(String.format("item %s is not an assessment", item.getId()));
        }
    }

    private static final List<String> ITEMS_TO_MIGRATION = new ArrayList<>(344);

    static {
        ITEMS_TO_MIGRATION.add("343");
        ITEMS_TO_MIGRATION.add("684");
        ITEMS_TO_MIGRATION.add("740");
        ITEMS_TO_MIGRATION.add("3772");
        ITEMS_TO_MIGRATION.add("784");
    }
}
