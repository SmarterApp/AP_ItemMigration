package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.springframework.stereotype.Component;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.apache.commons.lang3.StringUtils.trim;
import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;

@Slf4j
@Component
public class Migration2391 extends AbstractMigration {

    public Migration2391(final ApplicationDependencyProvider applicationDependencyProvider,
                         final ApplicationProperties applicationProperties,
                         final DataStoreDataManager dataManager,
                         final ItemManagerEventProducer eventProducer,
                         final DataStoreUtility dataStoreUtility,
                         final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility,
            dataStoreAttachmentManager);
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        return BRANCH_MASTER.equalsIgnoreCase(migratedEntity.getBranchName())
            || SECTION_CORE.equalsIgnoreCase(migratedEntity.getBranchName());
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity, MigrationContext migrationContext) {
        Item item = itemEntity.getItemJson();
        if ((item instanceof AssessmentItem)) {
            AssessmentItem assessmentItem = (AssessmentItem) item;
            if (isNotBlank(assessmentItem.getCore().getStimulusId()) || isNotBlank(assessmentItem.getCore().getTutorialId())) {
                assessmentItem.getCore().setStimulusId(trim(assessmentItem.getCore().getStimulusId()));
                assessmentItem.getCore().setTutorialId(trim(assessmentItem.getCore().getTutorialId()));
            } else {
                throw new SkipMigration("assessment item has no associated stimulus or tutorial");
            }
        } else {
            throw new SkipMigration("item is not an assessment item");
        }
        return itemEntity;
    }
}
