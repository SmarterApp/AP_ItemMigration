package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.springframework.stereotype.Component;

import static java.lang.String.format;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TUT;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_ASL;

@Slf4j
@Component
public class Migration2658 extends AbstractImportMigration {

    public Migration2658(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {

        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, attachmentManager,
                applicationDependencyProvider);
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        String branch = migratedEntity.getBranchName();
        return BRANCH_MASTER.equalsIgnoreCase(branch) || SECTION_ASL.equalsIgnoreCase(branch);
    }

    @Override
    protected void checkSkipMigration(ItemEntity itemEntity) {
        Item item = itemEntity.getItemJson();
        if (TYPE_TUT.equalsIgnoreCase(item.getType())) {
            throw new SkipMigration(format("%s Skipped: Item %s it a tutorial which does not have ASL",
                    migrationName, item.getId()));
        }
        if (StringUtils.isBlank(item.getItsId())) {
            throw new SkipMigration(format("%s Skipped: Item %s has no ITS ID", migrationName, item.getId()));
        }
    }
}
