package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.ListUtils;
import org.apache.commons.lang3.StringUtils;
import org.gitlab4j.api.models.RepositoryFile;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.StandardCopyOption;
import java.util.Base64;
import java.util.List;
import java.util.Optional;

import static java.lang.String.format;
import static java.util.stream.Collectors.toList;
import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TUT;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_ASL;
import static org.opentestsystem.ap.migration.util.MigrationFileUtil.IMPORT_ZIP_FILENAME;

@Slf4j
@Component
public class Migration2658 extends AbstractDataStoreMigration {

    protected final GitlabClient gitlabClient;
    protected final AppAssembler appAssembler;
    protected final GitLabSyncManager itemBankSyncManager;
    protected final MigrationFileUtil migrationFileUtil;
    protected final IatModelMapperFactory iatModelMapperFactory;

    public Migration2658(ApplicationDependencyProvider applicationDependencyProvider,
                         ApplicationProperties applicationProperties,
                         DataStoreDataManager dataManager,
                         ItemManagerEventProducer eventProducer,
                         DataStoreUtility dataStoreUtility,
                         DataStoreAttachmentManager attachmentManager) {

        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, attachmentManager);

        this.gitlabClient = applicationDependencyProvider.getGitlabClient();
        this.appAssembler = applicationDependencyProvider.getAppAssembler();
        this.itemBankSyncManager = applicationDependencyProvider.getItemBankSyncManager();
        this.migrationFileUtil = applicationDependencyProvider.getMigrationFileUtil();
        this.iatModelMapperFactory = applicationDependencyProvider.getIatModelMapperFactory();
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        String branch = migratedEntity.getBranchName();
        if (BRANCH_MASTER.equalsIgnoreCase(branch) || SECTION_ASL.equalsIgnoreCase(branch)) {
            return true;
        }
        return false;
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        Item item = itemEntity.getItemJson();

        this.check(item);

        Path unzipPath = this.unzipImportZip(item);

        this.replaceItsId(item, itemEntity.getBranchName(), unzipPath);

        return itemEntity;
    }

    // ------------------------------------------------------------------------
    // Replace ITS ID with new current item ID
    // ------------------------------------------------------------------------

    private void replaceItsId(Item item, String branch, Path srcFolder) {
        List<Path> files = this.findAslFiles(item.getId(), srcFolder);
        this.replaceItsId(item.getId(), item.getItsId(), branch, files);
        this.replaceItsId(item);
    }

    private void replaceItsId(String itemId, String itsId, String branch, List<Path> files) {
        try {
            Path targetFolder = Files.createTempDirectory(itemId);
            for (Path srcFile : files) {
                // assume the file does not need renamed
                Path targetFile = targetFolder.resolve(srcFile.toFile().getName());
                // check if it needs renamed
                if (!srcFile.toFile().getName().contains(itemId)) {
                    // rename the file replacing ITS id with item id
                    targetFile = targetFolder.resolve(srcFile.toFile().getName().replace(itsId, itemId).toLowerCase());
                }
                Files.copy(srcFile, targetFile, StandardCopyOption.REPLACE_EXISTING);
            }
            itemBankSyncManager.syncAttachmentsToDataStore(itemId, branch, targetFolder);
            if (!SECTION_ASL.equalsIgnoreCase(branch)) {
                itemBankSyncManager.syncAttachmentsToDataStore(itemId, SECTION_ASL, targetFolder);
            }
        } catch (IOException e) {
            throw new SkipMigration(
                    format("Item %s - error setting item ID for ITS ID on ASL file - %s", itemId, e.getMessage()));
        }
    }

    private void replaceItsId(Item item) {
        List<Attachment> files = item.getAsl().getAttachments();
        if (isNotEmpty(files)) {
            for (Attachment attachment : files) {
                // make sure the file name isn't already correct
                if (!attachment.getFileName().contains(item.getId())) {
                    attachment.setFileName(attachment.getFileName().replace(item.getItsId(), item.getId()).toLowerCase());
                }
            }
        }
    }

    // ------------------------------------------------------------------------
    // Private helpers
    // ------------------------------------------------------------------------

    private List<Path> findAslFiles(String itemId, Path srcFolder) {
        FileSystem fileSystem = FileSystems.getDefault();
        PathMatcher fileFilter = fileSystem.getPathMatcher("glob:**.{mp4,webm}");
        try {
            return ListUtils.emptyIfNull(Files.walk(srcFolder).filter(fileFilter::matches).collect(toList()));
        } catch (IOException e) {
            throw new SkipMigration(format("Item %s - error finding ASL files - %s", itemId, e.getMessage()));
        }
    }

    private Path unzipImportZip(Item item) {
        Optional<RepositoryFile> importZip = gitlabClient.lookUpFileOnMaster(item.getId(), IMPORT_ZIP_FILENAME);

        Path unzipPath = null;

        // rename the files on disk
        if (importZip.isPresent()) {
            RepositoryFile repoFile = importZip.get();
            if (StringUtils.isNotBlank(repoFile.getContent())) {
                // unzip to a random path
                Path expandedZip = migrationFileUtil.getExpandedImportZipFile(
                        item.getId(), Base64.getDecoder().decode(repoFile.getContent()));

                // import.zip can contain multiple directories or none at all,
                // identify the imported item source directory
                unzipPath = MigrationFileUtil.getItemSourceDir(expandedZip, item.getItsId());
            }
        }
        return unzipPath;
    }

    private void check(Item item) {
        if (StringUtils.isBlank(item.getItsId())) {
            throw new SkipMigration(format("Item %s has no ITS ID", item.getId()));
        }
        if (TYPE_TUT.equalsIgnoreCase(item.getType())) {
            throw new SkipMigration(format("Item %s it a tutorial which does not have ASL", item.getId()));
        }
    }
}
