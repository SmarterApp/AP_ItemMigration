package org.opentestsystem.ap.migration.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Braille;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.attachment.AttachmentRenameRequest;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.AbstractDataStoreMigration;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.BrailleUtil;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_BRAILLE;

@Slf4j
@Component
public class Migration2571 extends AbstractDataStoreMigration {

    public Migration2571(final ApplicationDependencyProvider applicationDependencyProvider, final ApplicationProperties applicationProperties, final DataStoreDataManager dataManager, final ItemManagerEventProducer eventProducer, final DataStoreUtility dataStoreUtility, final DataStoreAttachmentManager dataStoreAttachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Override
    protected ItemEntity migrateEntity(final ItemEntity itemEntity) {
        if (!BRANCH_MASTER.equalsIgnoreCase(itemEntity.getBranchName()) && !SECTION_BRAILLE.equalsIgnoreCase(itemEntity.getBranchName())) {
            throw new SkipMigration(format("Migration2571 Skipped: branch is not impacted by the change for item %s", itemEntity.getItemId()));
        }

        final Item item = itemEntity.getItemJson();
        if (isBlank(item.getItsId())) {
            throw new SkipMigration(format("Migration2571 Skipped: Item %s has no ITS ID", item.getId()));
        }

        if (itemEntity.getItemJson().getBraille() == null
                || itemEntity.getItemJson().getBraille().getAttachments().isEmpty()) {
            throw new SkipMigration(format("Migration2571 Skipped: Item %s has no Braille attachments", item.getId()));
        }

        final String itemId = itemEntity.getItemId();
        final Braille braille = itemEntity.getItemJson().getBraille();
        List<AttachmentRenameRequest> requestList = new ArrayList<>();

        braille.getAttachments().forEach(attachment -> {
            final String existingFileName = attachment.getFileName();

            if (BrailleUtil.isValid(existingFileName) && existingFileName.contains(itemId)) {
                return;
            }

            final String targetFileName = BrailleUtil.makeValid(existingFileName)
                    .toLowerCase()
                    .replace(item.getItsId(), item.getId());

            attachment.setFileName(targetFileName);
            requestList.add(new AttachmentRenameRequest(itemId, itemEntity.getBranchName(), existingFileName, targetFileName));
        });

        if (!requestList.isEmpty()) {
            dataStoreAttachmentManager.renameAttachments(requestList);
        } else {
            throw new SkipMigration(format("Migration2571: item %s did not have any attachments to rename", itemId));
        }

        return itemEntity;
    }
}
