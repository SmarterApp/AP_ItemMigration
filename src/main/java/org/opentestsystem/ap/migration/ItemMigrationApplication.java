package org.opentestsystem.ap.migration;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.migration.service.AttachmentService;
import org.opentestsystem.ap.migration.service.CopyService;
import org.opentestsystem.ap.migration.service.DeleteService;
import org.opentestsystem.ap.migration.service.DownloadService;
import org.opentestsystem.ap.migration.service.GitLabSyncService;
import org.opentestsystem.ap.migration.service.MigrationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;

import static java.lang.System.exit;

@Slf4j
@SpringBootApplication
@ComponentScan({
    "org.opentestsystem.ap.common.security",
    "org.opentestsystem.ap.common.rest",
    "org.opentestsystem.ap.migration"
})
@EnableAsync
public class ItemMigrationApplication implements CommandLineRunner {

    static {
        System.setProperty("javax.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory");
        System.setProperty("log4j2.contextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector");
    }

    @Autowired
    private MigrationService migrationService;

    @Autowired
    private DownloadService downloadService;

    @Autowired
    private ApplicationProperties applicationProperties;

    @Autowired
    private GitLabSyncService gitLabSyncService;

    @Autowired
    private AttachmentService attachmentService;

    @Autowired
    private CopyService copyService;

    @Autowired
    private DeleteService deleteService;

    public static void main(String[] args) {
        SpringApplication app = new SpringApplication(ItemMigrationApplication.class);
        app.run(args);
    }

    @Bean
    public Executor asyncExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(applicationProperties.getNumberOfThreads());
        executor.setMaxPoolSize(applicationProperties.getNumberOfThreads());
        executor.setThreadNamePrefix("Migrate-");
        return executor;
    }

    @Override
    public void run(String... args) {
        if (applicationProperties.isSyncFromGitlabEnabled()) {
            this.syncFromGitLabToDataStore();
        } else if (applicationProperties.isCopySourceToTargetEnabled()) {
            this.copy();
        } else if (applicationProperties.isDeleteItemsEnabled()) {
            this.delete();
        } else if (applicationProperties.isAttachmentManagementEnabled()) {
            this.attachmentService.listAttachmentItems();
        } else {
            if (applicationProperties.getDataStoreMigrations().isEnabled()) {
                this.dataStoreMigrate();
            } else {
                log.info("Data store migration are disabled");
            }
            if (applicationProperties.isDownloadItemsEnabled()) {
                this.download();
            } else {
                log.info("Download service is disabled");
            }
        }
        exit(0);
    }

    private void syncFromGitLabToDataStore() {
        applicationProperties.getIncludedItems().stream().forEach(gitLabSyncService::syncGitLabToDataStore);
    }

    private void dataStoreMigrate() {
        try {
            this.migrationService.migrate();
        } catch (Exception e) {
            log.error("Error migrating items.  Message: " + e.getMessage(), e);
        }
    }

    private void download() {
        try {
            this.downloadService.download();
        } catch (Exception e) {
            log.error("Error downloading items.  Message: " + e.getMessage(), e);
        }
    }

    private void copy() {
        try {
            this.copyService.copy();
        } catch (Exception e) {
            log.error("Error copying items.  Message: " + e.getMessage(), e);
        }
    }

    private void delete() {
        try {
            this.deleteService.delete();
        } catch (Exception e) {
            log.error("Error deleting items.  Message: " + e.getMessage(), e);
        }
    }

}
