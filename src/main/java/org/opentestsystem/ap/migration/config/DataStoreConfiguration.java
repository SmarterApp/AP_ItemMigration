package org.opentestsystem.ap.migration.config;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreEventProducer;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.AmazonClient;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.datastore.DataStoreItemMigrationHandler;
import org.opentestsystem.ap.migration.datastore.DataStoreMigrationService;
import org.opentestsystem.ap.migration.datastore.DataStoreMigrationSetHandler;
import org.opentestsystem.ap.migration.repository.ReportRepository;
import org.opentestsystem.ap.migration.util.SpringUtil;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Slf4j
@Configuration
@ConditionalOnProperty(prefix = "migration.data-store-migrations", name = "enabled", havingValue = "true")
public class DataStoreConfiguration {

    private final ItemBankProperties itemBankProperties;

    public DataStoreConfiguration(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    // ------------------------------------------------------------------------

    @Bean
    public AmazonClient amazonClient() {
        log.info("configuring bean amazonClient");
        return new AmazonClient(itemBankProperties);
    }

    @Bean
    public DataStoreUtility dataStoreUtility() {
        log.info("configuring bean dataStoreUtility");
        return new DataStoreUtility();
    }

    @Bean
    public DataStoreAttachmentManager dataStoreAttachmentManager(AmazonClient amazonClient,
                                                                 DataStoreUtility dataStoreUtility) {
        log.info("configuring bean dataStoreAttachmentManager");
        return new DataStoreAttachmentManager(amazonClient, dataStoreUtility);
    }

    @Bean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository,
                                                     WorkflowStatusTransitionRepository workflowStatusTransitionRepository) {
        log.info("configuring bean dataStoreDataManager");
        return new DataStoreDataManager(
            this.itemBankProperties,
            itemEntityRepository,
            workflowStatusRepository,
            workflowStatusTransitionRepository);
    }

    @Bean
    public DataStoreMigrationService dataStoreMigrationService(ApplicationProperties applicationProperties,
                                                               DataStoreDataManager dataManager,
                                                               DataStoreItemMigrationHandler dataStoreItemMigrationHandler,
                                                               ReportRepository reportRepository) {
        log.info("configuring bean dataStoreMigrationService");
        return new DataStoreMigrationService(
            applicationProperties,
            dataManager,
            dataStoreItemMigrationHandler,
            reportRepository);
    }

    @Bean
    public DataStoreMigrationSetHandler DataStoreMigrationSetHandler(ApplicationProperties applicationProperties,
                                                                     DataStoreDataManager dataManager,
                                                                     SpringUtil springUtil) {
        return new DataStoreMigrationSetHandler(applicationProperties, dataManager, springUtil);
    }

    @Bean
    public DataStoreItemMigrationHandler dataStoreItemMigrationHandler(ApplicationProperties applicationProperties,
                                                                       DataStoreDataManager dataManager,
                                                                       DataStoreMigrationSetHandler setHandler) {
        return new DataStoreItemMigrationHandler(applicationProperties, dataManager, setHandler);
    }

    @Bean
    public DataStoreEventProducer dataStoreEventProducer(ItemBankProperties itemBankProperties, RabbitTemplate rabbitTemplate) {
        return new DataStoreEventProducer(itemBankProperties, rabbitTemplate);
    }
}
