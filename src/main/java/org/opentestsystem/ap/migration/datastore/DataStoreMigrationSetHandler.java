package org.opentestsystem.ap.migration.datastore;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.SpringUtil;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static org.apache.commons.collections4.ListUtils.emptyIfNull;

@Slf4j
public class DataStoreMigrationSetHandler {

    private final ApplicationProperties applicationProperties;

    private final ApplicationProperties.DataStoreProperties dataStoreMigrations;

    private final DataStoreDataManager dataManager;

    private final SpringUtil springUtil;

    public DataStoreMigrationSetHandler(ApplicationProperties applicationProperties,
                                        DataStoreDataManager dataManager,
                                        SpringUtil springUtil) {
        this.applicationProperties = applicationProperties;
        this.dataManager = dataManager;
        this.dataStoreMigrations = applicationProperties.getDataStoreMigrations();
        this.springUtil = springUtil;
    }

    @Transactional
    public ItemEntity migrateItem(ItemEntity entity,
                            ApplicationProperties.MigrationSet migrationSet,
                            DataStoreItemResult result) {
        ItemEntity migratedEntity = null;

        String migrationSetVersion = migrationSet.getMigrationSetKey();

        List<ApplicationProperties.MigrationDefinition> migrations = emptyIfNull(
            migrationSet.getMigrationDefinitions());

        for (ApplicationProperties.MigrationDefinition migrationDefinition : migrations) {
            try {
                DataStoreMigration migration = this.getDataStoreMigration(migrationDefinition.getMigrationName());

                migratedEntity = migration.migrate(entity, migrationSetVersion, migrationDefinition, result);

                String successMessage = String.format("item %s | set %s | migration %s",
                    entity.getItemId(),
                    migrationSetVersion,
                    migrationDefinition.getMigrationName());

                result.addSuccessMessage(successMessage);
            } catch (SkipMigration e) {
                String skipMessage = String.format("item %s | set %s | migration %s - %s",
                    entity.getItemId(),
                    migrationSetVersion,
                    migrationDefinition.getMigrationName(),
                    ExceptionUtils.getRootCauseMessage(e));
                result.addSuccessMessage(skipMessage);
            } catch (SystemException e) {
                throw e;
            } catch (Exception e) {
                throw new SystemException(e);
            }
        }

        return migratedEntity;
    }

    public DataStoreMigration getDataStoreMigration(final String migrationName) {
        final DataStoreMigration migration = springUtil.getDataStoreMigration(migrationName);
        if (migration == null) {
            throw new SystemException("No migration exists for data store migration " + migrationName);
        }
        return migration;
    }
}
