package org.opentestsystem.ap.migration.datastore;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.SpringUtil;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static org.apache.commons.collections4.ListUtils.emptyIfNull;

@Slf4j
public class DataStoreMigrationSetHandler {

    private final ApplicationProperties applicationProperties;

    private final ApplicationProperties.DataStoreProperties dataStoreMigrations;

    private final DataStoreDataManager dataManager;

    private final SpringUtil springUtil;

    private final ItemManagerEventProducer eventProducer;

    public DataStoreMigrationSetHandler(ApplicationProperties applicationProperties,
                                        DataStoreDataManager dataManager,
                                        SpringUtil springUtil,
                                        final ItemManagerEventProducer eventProducer) {
        this.applicationProperties = applicationProperties;
        this.dataManager = dataManager;
        this.dataStoreMigrations = applicationProperties.getDataStoreMigrations();
        this.springUtil = springUtil;
        this.eventProducer = eventProducer;
    }

    /**
     * This is where an item is migrated within a transaction.  If there is a failure when migrating the item for this
     * set it should halt the migrations for the item.  The item migration handler will not call any more migration sets
     * for the item and instead will move to the next item.
     * <p>
     * Completion of this method means the item migration was successfully committed to the data store and event
     * messages were fired, events like regenerating the SAAIF in the item bank.
     * </p>
     *
     * @param entity       The entity to migrate
     * @param migrationSet The migration set
     * @param result       The result of the migration
     * @return The migrated master record, it represents the final migrated state for the item.
     */
    @Transactional
    public ItemEntity migrateItem(ItemEntity entity,
                                  ApplicationProperties.MigrationSet migrationSet,
                                  DataStoreItemResult result) {
        ItemEntity migratedEntity = entity;

        String migrationSetVersion = migrationSet.getMigrationSetKey();

        List<ApplicationProperties.MigrationDefinition> migrations = emptyIfNull(
                migrationSet.getMigrationDefinitions());

        StringBuilder commitMessage = new StringBuilder("Migrated item to ").append(migrationSet.getMigrationSetKey()).append("\n");
        boolean containsSuccessfulMigration = false;
        for (ApplicationProperties.MigrationDefinition migrationDefinition : migrations) {
            try {
                DataStoreMigration migration = this.getDataStoreMigration(migrationDefinition.getMigrationName());

                migratedEntity = migration.migrate(migratedEntity, migrationSetVersion, migrationDefinition, result);

                String successMessage = String.format("item %s | %s | %s - %s",
                        entity.getItemId(),
                        migrationSetVersion,
                        migrationDefinition.getMigrationName(),
                        migrationDefinition.getMigrationDescription());

                commitMessage.append(migrationDefinition.getMigrationDescription()).append("\n");
                containsSuccessfulMigration = true;
                result.addSuccessMessage(successMessage);
            } catch (SkipMigration e) {
                String skipMessage = String.format("item %s | %s | %s - %s",
                        entity.getItemId(),
                        migrationSetVersion,
                        migrationDefinition.getMigrationName(),
                        ExceptionUtils.getRootCauseMessage(e));
                result.addSuccessMessage(skipMessage);
            } catch (SystemException e) {
                throw e;
            } catch (Exception e) {
                throw new SystemException(e);
            }
        }

        if (containsSuccessfulMigration) {
            this.broadcastMigration(migratedEntity, commitMessage.toString());
        }

        return migratedEntity;
    }

    /**
     * When migrating using the data store only the master branch needs pushed downstream (e.g into the item bank). If
     * the master branch needs pushed downstream this is what does it.  It puts a commit event on the sync queue.
     *
     * @param entity              The entity record to push downstream.
     * @param migrationDefinition The migration being pushed, this is the commit message you should see in GitLab
     *                            related to this event.
     */
    private void broadcastMigration(ItemEntity entity,
                                    String commitMessage) {
        if (entity.isMaster()) {
            this.eventProducer.
                    sendCommitEvent(systemUser(), entity, entity, commitMessage);
        }
    }

    /**
     * Helper method giving a quick reference to the system user.
     *
     * @return The system user configured in application properties.
     */
    protected ItemBankSystemUser systemUser() {
        return this.applicationProperties.getSystemUser();
    }

    public DataStoreMigration getDataStoreMigration(final String migrationName) {
        final DataStoreMigration migration = springUtil.getDataStoreMigration(migrationName);
        if (migration == null) {
            throw new SystemException("No migration exists for data store migration " + migrationName);
        }
        return migration;
    }
}
