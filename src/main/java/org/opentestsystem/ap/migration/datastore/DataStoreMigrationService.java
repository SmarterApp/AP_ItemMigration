package org.opentestsystem.ap.migration.datastore;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemResult;
import org.opentestsystem.ap.migration.repository.ReportRepository;
import org.opentestsystem.ap.migration.service.AsyncService;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toList;

@Slf4j
public class DataStoreMigrationService {

    private final ApplicationProperties applicationProperties;

    private final ApplicationProperties.DataStoreProperties dataStoreMigrations;

    private final DataStoreDataManager dataManager;

    private final AsyncService asyncService;

    private final ReportRepository reportRepository;

    public DataStoreMigrationService(ApplicationProperties applicationProperties,
                                     DataStoreDataManager dataManager,
                                     AsyncService asyncService,
                                     ReportRepository reportRepository) {
        this.applicationProperties = applicationProperties;
        this.dataStoreMigrations = applicationProperties.getDataStoreMigrations();
        this.dataManager = dataManager;
        this.asyncService = asyncService;
        this.reportRepository = reportRepository;
    }

    /**
     * Executes the migration process against an itembank.
     */
    public void migrate() {
        if (dataStoreMigrations.isEnabled()) {
            log.info("data store migrations are enabled");

//            DataStoreMigrationReport migrationReport = new DataStoreMigrationReport().startMigrationTimer();

            List<String> itemIds = this.getItemsToMigrate();

            List<CompletableFuture<DataStoreItemResult>> futuresList = itemIds.stream()
                .map(asyncService::migrateDataStoreItemsAsync)
                .collect(toList());

            List<DataStoreItemResult> results = futuresList.stream()
                .map(CompletableFuture::join)
                .collect(Collectors.toList());

//            migrationReport
//                .setItemsToProcessCount(itemIds.size())
//                .setItemResults(results)
//                .stopMigrationTimer();

//            publish(migrationReport);

            log.info("migration complete");
        } else {
            log.info("migration is disabled");
        }
    }

    // ------------------------------------------------------------------------

    private List<String> getItemsToMigrate() {
        List<String> itemIds = this.applicationProperties.getIncludedItems();
        return CollectionUtils.isEmpty(itemIds) ? this.dataManager.findActiveItemIds() : itemIds;
    }

//    private void publish(DataStoreMigrationReport migrationReport) {
//        if (applicationProperties.isPublishReportEnabled()) {
//            try {
//                reportRepository.publishReport(migrationReport);
//                reportRepository.deleteLocalReportRepository();
//            } catch (Exception e) {
//                log.error("The migration report failed to publish to the ItemBank", e);
//            }
//        }
//    }
}
