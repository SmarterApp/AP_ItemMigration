package org.opentestsystem.ap.migration.datastore;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreEventProducer;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Slf4j
public abstract class AbstractDataStoreMigration implements DataStoreMigration {

    protected final ApplicationProperties applicationProperties;

    protected final DataStoreDataManager dataManager;

    protected final DataStoreEventProducer eventProducer;

    protected final DataStoreUtility dataStoreUtility;

    protected abstract void migrateEntity(ItemEntity itemEntity);

    protected AbstractDataStoreMigration(ApplicationProperties applicationProperties,
                                         DataStoreDataManager dataManager,
                                         DataStoreEventProducer eventProducer,
                                         DataStoreUtility dataStoreUtility) {
        this.applicationProperties = applicationProperties;
        this.dataManager = dataManager;
        this.eventProducer = eventProducer;
        this.dataStoreUtility = dataStoreUtility;
    }

    @Override
    public ItemEntity migrate(ItemEntity entityToMigrate,
                              String version,
                              ApplicationProperties.MigrationDefinition migrationDefinition,
                              DataStoreItemResult result) {
        log.info("migrateAndSave item {}, branch {}, version {} - {}",
            entityToMigrate.getItemId(),
            entityToMigrate.getBranchName(),
            version,
            migrationDefinition.getMigrationDescription());

        DataStoreItemResult.MigrationResult migrationResult = new DataStoreItemResult.MigrationResult(
            version, migrationDefinition.getMigrationName());

        result.addMigrationResult(migrationResult);

        // this is intended to be the master branch, not required but intended, the idea being always migrate the
        // master branch and push it down stream, there is no need to push non-master branch entities down stream as
        // those should
        ItemEntity migratedEntity = this.migrateBranch(
            entityToMigrate,
            version,
            migrationDefinition, migrationResult,
            true);

        this.pushDownStream(migratedEntity, migrationDefinition);

        this.migrateBranches(migratedEntity.getItemId(), version, migrationDefinition, migrationResult);

        return migratedEntity;
    }

    protected void pushDownStream(ItemEntity entity, ApplicationProperties.MigrationDefinition migrationDefinition) {
        if (this.isPushDownstream(entity, migrationDefinition)) {
            this.eventProducer.
                sendPatchEvent(systemUser(), entity, migrationDefinition.getMigrationDescription());
        }
    }

    protected List<ItemEntity> migrateBranches(String itemId,
                                               String version,
                                               ApplicationProperties.MigrationDefinition migrationDefinition,
                                               DataStoreItemResult.MigrationResult migrationResult) {
        if (migrationDefinition.isMigrateBranches()) {
            return this.findBranches(itemId).stream().map(entity ->
                this.migrateBranch(entity, version, migrationDefinition, migrationResult, false))
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
        }
        return Collections.emptyList();
    }

    protected ItemEntity migrateBranch(ItemEntity entity,
                                       String version,
                                       ApplicationProperties.MigrationDefinition migrationDefinition,
                                       DataStoreItemResult.MigrationResult migrationResult,
                                       boolean throwError) {
        ItemEntity migratedEntity = null;
        try {
            migratedEntity = this.migrateAndSave(entity, version);
            String msg = String.format("success - branch %s for migration set %s, migration %s",
                entity.getBranchName(),
                version,
                migrationDefinition.getMigrationName());
            migrationResult.addSuccessMessage(msg);
        } catch (SkipMigration e) {
            String msg = String.format("skip - branch %s for migration set %s, migration %s - %s",
                entity.getBranchName(),
                version,
                migrationDefinition.getMigrationName(),
                ExceptionUtils.getRootCauseMessage(e));
            migrationResult.addSuccessMessage(msg);
            if (throwError) {
                throw e;
            }
        } catch (Exception e) {
            String msg = String.format("error - branch %s failed for migration set %s, migration %s - %s",
                entity.getBranchName(),
                version,
                migrationDefinition.getMigrationName(),
                ExceptionUtils.getRootCauseMessage(e));
            migrationResult.addFailedeMessage(msg);
            if (throwError) {
                throw new SystemException("Error migrating branch", e);
            }
        }
        return migratedEntity;
    }

    protected ItemEntity migrateAndSave(ItemEntity entityToMigrate, String version) {
        ItemEntity entityClone = this.cloneEntity(entityToMigrate, version);
        this.migrateEntity(entityClone);
        return this.dataManager.insertItem(entityClone);
    }

    protected ItemEntity cloneEntity(ItemEntity entityToMigrate, String version) {
        ItemBankSystemUser systemUser = systemUser();

        Item itemClone = this.dataStoreUtility.cloneItemJson(entityToMigrate.getItemJson());
        itemClone.setVersion(version);

        ItemEntity entityClone = entityToMigrate.cloneFull(systemUser.getUserName());
        entityClone.setItemJson(itemClone);

        return entityClone;
    }

    protected ItemBankSystemUser systemUser() {
        return this.applicationProperties.getSystemUser();
    }

    protected boolean isPushDownstream(ItemEntity entity,
                                       ApplicationProperties.MigrationDefinition migrationDefinition) {
        return entity.isMaster() && migrationDefinition.isPushDownstream();
    }

    /**
     * Finds all branches currently being edited.  Master is excluded.
     *
     * @param itemId The item id.
     * @return The current branch edits for an item.
     */
    protected List<ItemEntity> findBranches(String itemId) {
        List<ItemEntity> entities = this.dataManager.findAllCurrentBranchEdits(itemId);
        return entities.stream().filter(ItemEntity::isNotMaster).collect(Collectors.toList());
    }
}
