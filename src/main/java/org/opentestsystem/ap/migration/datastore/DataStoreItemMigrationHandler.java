package org.opentestsystem.ap.migration.datastore;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.util.ImportFileUtil;

import java.util.List;
import java.util.Objects;

import static org.apache.commons.collections4.ListUtils.emptyIfNull;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Slf4j
public class DataStoreItemMigrationHandler {

    private final ApplicationProperties applicationProperties;

    private final DataStoreDataManager dataManager;

    private final DataStoreMigrationSetHandler setHandler;

    public DataStoreItemMigrationHandler(ApplicationProperties applicationProperties,
                                         DataStoreDataManager dataManager,
                                         DataStoreMigrationSetHandler setHandler) {
        this.applicationProperties = applicationProperties;
        this.setHandler = setHandler;
        this.dataManager = dataManager;
    }

    public DataStoreItemResult migrate(String itemId) {
        DataStoreItemResult result = new DataStoreItemResult(itemId);

        ItemEntity entityMaster = findMaster(itemId);
        Item item = entityMaster.getItemJson();

        String currentVersion = item.getVersion();
        ApplicationProperties.MigrationSet migrationSet = this.getNextDataStoreMigrationSet(currentVersion, true);

        if (Objects.nonNull(migrationSet)) {
            try {
                while (Objects.nonNull(migrationSet)) {
                    if(migrationSet.isIgnoreImportedItemsWithEdits()
                            && ImportFileUtil.isImported(entityMaster.getItemJson())
                            && dataManager.doesItemHaveEdits(entityMaster.getItemId())) {
                        log.info("IGNORE_EDIT_ITEMS: Not running migration set {} for item {} because the imported item has edits", migrationSet.getMigrationSetKey(), entityMaster.getItemId());
                        migrationSet = this.getNextDataStoreMigrationSet(migrationSet.getMigrationSetKey(), false);
                        continue;
                    }

                    setHandler.migrateItem(entityMaster, migrationSet, result);
                    migrationSet = this.getNextDataStoreMigrationSet(migrationSet.getMigrationSetKey(), false);
                }
            } catch (Exception e) {
                log.info("Error migrating master entity {} - {}", item.getId(), ExceptionUtils.getRootCauseMessage(e));
                String errorMsg = String.format("item %s, migration set %s failed - %s",
                    itemId, migrationSet.getMigrationSetKey(), ExceptionUtils.getRootCauseMessage(e));
                result.addFailedeMessage(errorMsg);
                result.setFailed(true);
            }
        } else {
            String message = String.format(
                "Nothing to migrate - item %s | branch %s | item's current -> version %s ",
                item.getId(), BRANCH_MASTER, currentVersion
            );
            result.addSuccessMessage(message);
        }

        return result;
    }

    // ------------------------------------------------------------------------

    private ApplicationProperties.MigrationSet getNextDataStoreMigrationSet(String currenSetKey,
                                                                            boolean defaultToStart) {
        ApplicationProperties.MigrationSet setToFind = new ApplicationProperties.MigrationSet(currenSetKey);

        List<ApplicationProperties.MigrationSet> migrationSets =
            emptyIfNull(applicationProperties.getDataStoreMigrations().getMigrationSets());

        int index = migrationSets.indexOf(setToFind);

        if (defaultToStart && index == -1) {
            return migrationSets.get(0);
        }

        return (index > -1 && index + 1 < migrationSets.size()) ? migrationSets.get(index + 1) : null;
    }

    private ItemEntity findMaster(String itemId) {
        ItemEntity entityMaster = this.dataManager.findLastMasterCommit(itemId);
        if (Objects.isNull(entityMaster)) {
            entityMaster = this.dataManager.findLastMaster(itemId);
        }
        this.checkResourceNotFound(entityMaster, itemId);
        return entityMaster;
    }

    private void checkResourceNotFound(ItemEntity entity, String itemId) {
        if (Objects.isNull(entity)) {
            throw new ResourceNotFoundException("Item " + itemId + " does not exist");
        }
    }
}
