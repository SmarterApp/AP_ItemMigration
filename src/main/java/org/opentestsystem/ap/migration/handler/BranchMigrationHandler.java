package org.opentestsystem.ap.migration.handler;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.migration.migration.MigrationFactory;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.BranchResult;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationSetResult;
import org.springframework.stereotype.Component;

import static org.apache.commons.lang3.StringUtils.EMPTY;

@Slf4j
@Component
public class BranchMigrationHandler {

    private final MigrationSetHandler migrationSetHandler;

    private final MigrationFactory migrationFactory;

    public BranchMigrationHandler(final MigrationSetHandler migrationSetHandler,
                                  final MigrationFactory migrationFactory) {
        this.migrationSetHandler = migrationSetHandler;
        this.migrationFactory = migrationFactory;
    }

    public BranchResult migrateBranch(final ItemInfo itemInfo,
                                      final BranchInfo branchInfo,
                                      final GitClient gitClient) {
        log.info("migrate branch {}", branchInfo.getBranchName());

        final BranchResult branchResult = new BranchResult(itemInfo.getItemId(), branchInfo.getBranchName());

        if (branchInfo.isMasterBranch() && !itemInfo.isItemPublic()) {
            log.info("skip master branch, item is being created");
            branchResult.setCurrent(true);
        } else {
            String itemVersion = EMPTY;

            String nextMigrationKey = EMPTY;

            try {
                gitClient.checkoutBranch(branchInfo.getBranchName());
                gitClient.pullLatest();

                itemVersion = branchInfo.getItemVersion();

                nextMigrationKey = migrationFactory.getNextMigrationKey(itemVersion);

                while (nextMigrationKey != null) {
                    final MigrationSetResult migrationSetResult = migrationSetHandler.migrateSet(
                        itemInfo, branchInfo, gitClient, nextMigrationKey);

                    if (migrationSetResult.isSuccess()) {
                        itemVersion = nextMigrationKey;

                        branchResult.addSuccessfulMigrationSet(migrationSetResult);

                        nextMigrationKey = migrationFactory.getNextMigrationKey(nextMigrationKey);
                    } else {
                        branchResult.setFailedMigrationSetResult(migrationSetResult);
                        // a migration set failure halts processing of more migration sets
                        break;
                    }
                }

                branchResult.setBranchCurrentVersion(itemVersion);

                if (branchResult.isSuccess()) {
                    branchResult.setCurrent(true);
                }
            } catch (Exception e) {
                branchResult.setBranchCurrentVersion(itemVersion);
                branchResult.setMigrationError(nextMigrationKey, ExceptionUtils.getRootCauseMessage(e));
            }
        }

        return branchResult;
    }
}
