package org.opentestsystem.ap.migration.handler;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.BranchResult;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.ItemResult;
import org.springframework.stereotype.Component;

import static org.apache.commons.collections4.ListUtils.emptyIfNull;

@Slf4j
@Component
public class ItemMigrationHandler {

    private final AppProps appProps;

    private final ItemRepository itemRepository;

    private final BranchMigrationHandler branchMigrationHandler;

    public ItemMigrationHandler(final ApplicationDependencyProvider dependencyProvider,
                                final BranchMigrationHandler branchMigrationHandler) {
        this.appProps = dependencyProvider.getAppProps();
        this.itemRepository = dependencyProvider.getItemRepository();
        this.branchMigrationHandler = branchMigrationHandler;
    }

    public ItemResult migrateItem(final ItemInfo itemInfo) {
        log.info("migrate item {}", itemInfo.getItemId());

        final ItemResult itemResult = new ItemResult(itemInfo.getItemId(), new ArrayList<>(32));

        final GitClient gitClient = itemRepository.cloneRemoteRepository(
            appProps.getSystemUser(), itemInfo.getItemId());

        try {
            final List<BranchInfo> branches = emptyIfNull(itemInfo.getBranches());
            branches.forEach(migrate(itemInfo, itemResult, gitClient));
        } finally {
            if (gitClient != null) {
                log.info("deleting local repository for item {}", itemInfo.getItemId());
                gitClient.deleteLocalRepo();
            }
        }
        return itemResult;
    }

    private Consumer<BranchInfo> migrate(final ItemInfo itemInfo,
                                         final ItemResult itemResult,
                                         final GitClient gitClient) {
        return branchInfo -> {
            final BranchResult branchResult = branchMigrationHandler.migrateBranch(
                itemInfo, branchInfo, gitClient);

            if (branchResult.isSuccess()) {
                itemResult.addSuccessfulBranchMigration(branchResult);
            } else {
                itemResult.addFailedBranchMigration(branchResult.getMigrationError());
            }
        };
    }
}
