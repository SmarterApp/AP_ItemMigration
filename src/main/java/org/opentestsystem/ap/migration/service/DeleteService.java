package org.opentestsystem.ap.migration.service;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * Deletes items from the data store and GitLab.
 */
@Slf4j
@Component
public class DeleteService {

    private final ApplicationProperties applicationProperties;

    private final ItemBankProperties itemBankProperties;

    private final ItemManager itemManager;

    public DeleteService(ApplicationDependencyProvider dependencyProvider, ItemManager itemManager) {
        this.applicationProperties = dependencyProvider.getApplicationProperties();
        this.itemBankProperties = dependencyProvider.getItemBankProperties();
        this.itemManager = itemManager;
    }

    /**
     * Executes the migration process against an itembank.
     */
    public void delete() {
        if (applicationProperties.isDeleteItemsEnabled()) {
            log.info("item delete service enabled");

            final List<String> includedItems = applicationProperties.getIncludedItems();

            final List<DeleteContext> results = includedItems
                .stream()
                .map(deleteTargetItem())
                .map(completeDelete())
                .collect(Collectors.toList());

            log.info("Results of deleting from {} group {}",
                this.itemBankProperties.getHost(),
                this.itemBankProperties.getGroup());
            results.forEach(r -> log.info("\t{}", r.getMessage()));
            log.info("delete complete");

        } else {
            log.info("item delete service is disabled");
        }
    }

    private Function<String, DeleteContext> deleteTargetItem() {
        return itemId -> {
            DeleteContext context = new DeleteContext(itemId);
            try {
                this.itemManager.deleteItem(itemId, Boolean.TRUE);
            } catch (Exception e) {
                log.error(e.getMessage(), e);
                context.setFailedMessage(e.getMessage());
            }
            return context;
        };
    }

    private Function<DeleteContext, DeleteContext> completeDelete() {
        return context -> {
            if (context.isNotFailed()) {
                context.setMessage(String.format("Deleted: %s ", context.getItemId())
                );
            }
            return context;
        };
    }

    @Getter
    @ToString
    @RequiredArgsConstructor
    public static class DeleteContext {

        private final String itemId;

        private String message;

        private boolean failed;

        public DeleteContext setMessage(String message) {
            this.message = message;
            return this;
        }

        public DeleteContext setFailedMessage(String message) {
            this.failed = true;
            this.message = "Failed: " + message;
            return this;
        }

        public DeleteContext setFailed(boolean failed) {
            this.failed = failed;
            return this;
        }

        public boolean isNotFailed() {
            return !this.failed;
        }
    }
}
