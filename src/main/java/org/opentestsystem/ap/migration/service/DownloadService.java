package org.opentestsystem.ap.migration.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.ap.common.client.GitClientFactory;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

import static org.opentestsystem.ap.common.repository.RepositoryUtil.generateRepositoryURI;

@Slf4j
@Component
public class DownloadService {

    private final ApplicationProperties applicationProperties;

    private final GitClientFactory gitClientFactory;

    private final ItemBankProperties itemBankProperties;

    private final ItemRepository itemRepository;

    public DownloadService(final ApplicationDependencyProvider dependencyProvider) {
        this.applicationProperties = dependencyProvider.getApplicationProperties();
        this.gitClientFactory = dependencyProvider.getGitClientFactory();
        this.itemBankProperties = dependencyProvider.getItemBankProperties();
        this.itemRepository = dependencyProvider.getItemRepository();
    }

    /**
     * Executes the migration process against an itembank.
     */
    public void download() {
        if (applicationProperties.isDownloadItemsEnabled()) {
            log.info("item download is enabled");
            final List<String> includedItems = applicationProperties.getIncludedItems();
            final List<String> results = includedItems.stream().map(downloadItem()).collect(Collectors.toList());

            log.info("Results:");
            results.forEach(r -> log.info("\t{}", r));
            log.info("download complete");
        } else {
            log.info("item download is disabled");
        }
    }

    private Function<String, String> downloadItem() {
        return itemId -> {
            log.info("downloading {}", itemId);
            try {

                final String legacyId = this.itemRepository.findLegacyItemId(itemId);

                final String repositoryURI = generateRepositoryURI(
                    itemBankProperties.getHost(), applicationProperties.getItemBankNamespace(), itemId);

                gitClientFactory.cloneURL(applicationProperties.getSystemUser(), itemId, legacyId, repositoryURI);

                return itemId + " success";
            } catch (Exception e) {
                return itemId + " failed: " + ExceptionUtils.getRootCauseMessage(e);
            }
        };
    }
}
