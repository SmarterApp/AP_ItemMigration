package org.opentestsystem.ap.migration.service;

import lombok.extern.slf4j.Slf4j;
import org.gitlab4j.api.models.Branch;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemName;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.handler.ItemMigrationHandler;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.ItemResult;
import org.opentestsystem.ap.migration.repository.ReportRepository;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.function.Function;
import java.util.function.Predicate;

import static java.util.stream.Collectors.toList;
import static org.apache.commons.collections4.ListUtils.emptyIfNull;
import static org.apache.commons.lang3.StringUtils.EMPTY;

@Slf4j
@Component
public class AsyncService {

    private final Util util;

    private final AppProps appProps;

    private final GitlabClient gitlabClient;

    private final ItemMigrationHandler itemMigrationHandler;

    private final ReportRepository reportRepository;

    public AsyncService(Util util, AppProps appProps, GitlabClient gitlabClient, ItemMigrationHandler itemMigrationHandler, ReportRepository reportRepository) {
        this.util = util;
        this.appProps = appProps;
        this.gitlabClient = gitlabClient;
        this.itemMigrationHandler = itemMigrationHandler;
        this.reportRepository = reportRepository;
    }

    @Async
    public CompletableFuture<ItemResult> migrateItemsAsync(final ItemInfo itemInfo) {
        return CompletableFuture.completedFuture(itemMigrationHandler.migrateItem(itemInfo));
    }

    @Async
    public CompletableFuture<ItemInfo> loadItemAsync(final ItemName itemName) {
        log.info("item {}", itemName.getName());
        final List<Branch> branches = gitlabClient.lookupAllBranches(itemName.getId());
        final List<BranchInfo> branchNames = branches.stream().map(toBranchInfo(itemName)).collect(toList());
        return CompletableFuture.completedFuture(new ItemInfo(itemName.getId(), itemName.getName(), branchNames));
    }

    private Function<Branch, BranchInfo> toBranchInfo(final ItemName project) {
        return branch -> {
            log.info("\tbranch {}", branch.getName());
            final Item item = util.lookupItemRemotely(project.getName(), branch.getName());
            final String itemVersion = Objects.isNull(item) ? EMPTY : item.getVersion();
            final BranchInfo branchInfo = new BranchInfo(project.getName(), branch.getName(), itemVersion);
            return branchInfo;
        };
    }
}
