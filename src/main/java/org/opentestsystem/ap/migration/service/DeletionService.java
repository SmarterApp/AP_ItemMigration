package org.opentestsystem.ap.migration.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.gitlab4j.api.utils.FileUtils;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.ItemName;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.model.BranchResult;
import org.opentestsystem.ap.migration.model.ItemResult;
import org.opentestsystem.ap.migration.model.MigrationError;
import org.opentestsystem.ap.migration.model.MigrationReport;
import org.opentestsystem.ap.migration.repository.ReportRepository;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.function.Predicate;

import static java.util.Collections.emptyList;
import static java.util.stream.Collectors.toList;
import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;

@Slf4j
@Component
public class DeletionService {

    private final Util util;

    private final AppProps appProps;

    private final ItemBankProperties itemBankProperties;

    private final GitlabClient gitlabClient;

    private final ReportRepository reportRepository;

    public DeletionService(final Util util,
                           final GitlabClient gitlabClient,
                           final ReportRepository reportRepository) {
        this.util = util;
        this.appProps = util.getAppProps();
        this.gitlabClient = gitlabClient;
        this.itemBankProperties = util.getItemBankProperties();
        this.reportRepository = reportRepository;
    }

    public void deleteItems() {
        // Display current run properties
        currentPropList().forEach(System.out::println);

        if (appProps.getIncludedItems().size() > 0) {
            System.out.println("");
            System.out.println(String.format("Are you sure you want to delete items in the following environment: [%s]? [Yes/No] ",
                    itemBankProperties.getGroup()));
            Scanner scanner = new Scanner(System.in);
            String response = scanner.next();

            if (response.equalsIgnoreCase("yes")) {
                log.info("item deletion is enabled");

                final MigrationReport migrationReport = new MigrationReport();
                migrationReport.startMigrationTimer();

                final List<ItemName> itemsToDelete = getItems();
                migrationReport.setItemsToProcessCount(itemsToDelete.size());

                final List<ItemResult> itemResults = deleteProjects(itemsToDelete);
                migrationReport.setItemResults(itemResults);

                migrationReport.stopMigrationTimer();

                if (appProps.isPublishReportEnabled()) {
                    final Path reportFile = reportRepository.publishReport(migrationReport);
                    logReport(reportFile);
                    reportRepository.deleteLocalReportRepository();
                } else {
                    String reportString = reportRepository.generateReport(migrationReport);
                    log.info("\r\n{}", reportString);
                }
            }
        } else {
         log.error("Item deletion requires a list in includedItems to be provided\r\n");
        }

    }

    private List<String> currentPropList() {
        List<String> props = new ArrayList<>();

        props.add("");
        props.add("=========================================================================");
        props.add("Item Bank Properties");
        props.add("=========================================================================");
        props.add("host: " + itemBankProperties.getHost());
        props.add("user: " + itemBankProperties.getUser());
        props.add("group: " + itemBankProperties.getGroup());
        props.add("bankKey: " + itemBankProperties.getBankKey());
        props.add("systemVersion: " + itemBankProperties.getSystemVersion());
        props.add("=========================================================================");
        props.add("Item Migration Properties");
        props.add("=========================================================================");
        props.add("migrationsEnabled: " + appProps.isMigrationsEnabled());
        props.add("downloadItemsEnabled: " + appProps.isDownloadItemsEnabled());
        props.add("deleteItemsEnabled: " + appProps.isDeleteItemsEnabled());
        props.add("includedItemCount: " + appProps.getIncludedItems().size());
        props.add("");
        props.add("publishReportEnabled: " + appProps.isPublishReportEnabled());
        props.add("systemUsername: " + appProps.getSystemUsername());
        props.add("systemFullName: " + appProps.getSystemFullname());
        props.add("");

        return props;
    }

    private List<ItemResult> deleteProjects(final List<ItemName> projects) {
        List<ItemResult> deleteResults = new ArrayList<>();

        if (isNotEmpty(projects)) {
            for (ItemName project : projects) {
              deleteResults.add(deleteProject(project));
            }
        }
        return deleteResults;
    }

    private ItemResult deleteProject(final ItemName project) {
        ItemResult result = new ItemResult();
        String projectName = project.getName();

        result.setItemId(projectName);

        if (StringUtils.isNotEmpty(projectName)) {
            BranchResult branchResult = new BranchResult(projectName, "");
            try {
                gitlabClient.deleteProject(project.getId());
                result.addSuccessfulBranchMigration(branchResult);
            } catch (Exception e) {
                MigrationError migrationError =
                        new MigrationError(projectName, "", "", "",
                        e.getMessage());
                result.addFailedBranchMigration(migrationError);
            }
        }

        return result;
    }

    private List<ItemName> getItems() {
        log.info("getting items to delete");
        final List<ItemName> projects = util.getProjects();
        if (isNotEmpty(projects)) {
            if (appProps.getIncludedItems().size() > 0) {
                return filterProjects(projects);
            } else {
                return emptyList();
            }
        } else {
            return emptyList();
        }
    }

    private List<ItemName> filterProjects(List<ItemName> projects) {
        log.debug("Filtering items");
        final Predicate<ItemName> shouldIncludeItem = project -> includeItem(project);

        return projects.stream().filter(shouldIncludeItem).collect(toList());
    }

    private void logReport(final Path file) {
        try {
            final String reportString = FileUtils.readFileContents(file.toFile());
            log.info("\r\n{}", reportString);
        } catch (IOException e) {
            log.warn("unable to log report file {} - ", file, ExceptionUtils.getRootCauseMessage(e));
        }
    }

    private boolean includeItem(final ItemName item) {
        final List<String> include = appProps.getIncludedItems();
        String parentId = "";
        if (item.getName().length() == 9 && item.getName().startsWith("6")) {
            parentId = StringUtils.stripStart(item.getName().substring(1), "0");
        }
        return !itemBankProperties.getReportRepoName().equalsIgnoreCase(item.getName())
                && (include.contains(item.getName()) || include.contains(parentId));
    }

}
