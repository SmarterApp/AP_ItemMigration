package org.opentestsystem.ap.migration.service;

import java.util.List;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.ItemName;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.apache.commons.collections4.ListUtils.emptyIfNull;
import static org.apache.commons.lang3.StringUtils.equalsIgnoreCase;

@Slf4j
@Component
public class DeletionService {

    private final Util util;

    private final AppProps appProps;

    private final ItemBankProperties itemBankProperties;

    private final GitlabClient gitlabClient;

    public DeletionService(final Util util, final GitlabClient gitlabClient) {
        this.util = util;
        this.appProps = util.getAppProps();
        this.gitlabClient = gitlabClient;
        itemBankProperties = util.getItemBankProperties();
    }

    public void deleteItems() {
        if (appProps.isDeleteItemsEnabled()) {
            log.info("item deletion is enabled");
            logItemsToKeep();
            deleteProjects(util.getProjects());
        } else {
            log.info("item deletion is disabled");
        }
    }

    private void deleteProjects(final List<ItemName> projects) {
        if (isNotEmpty(projects)) {
            projects.forEach(this::deleteProject);
        }
    }

    private void deleteProject(final ItemName project) {
        final List<String> itemsToKeep = emptyIfNull(appProps.getDoNotDeleteItems());

        final String itemId = project.getName();

        // if it's not in the list then delete it
        if (!itemsToKeep.contains(itemId) && !equalsIgnoreCase(itemBankProperties.getReportRepoName(), itemId)) {
            log.info("deleting item {}", itemId);
//            gitlabClient.deleteProject(project.getId());
        } else {
            log.debug("skip deleting item {}", itemId);
        }
    }

    private void logItemsToKeep() {
        if (log.isInfoEnabled()) {
            log.info("Items to keep: {}", String.join(",", appProps.getDoNotDeleteItems()));
        }
    }
}
