package org.opentestsystem.ap.migration.service;

import java.util.List;

import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.gitlab4j.api.models.Branch;
import org.gitlab4j.api.models.Group;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.migrator.MigratorFactory;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

import static java.util.stream.Collectors.toList;
import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;

@Slf4j
@Component
public class MigrationService {

    private final MigratorFactory migrationFactory;

    private final Util util;

    private final AppProps appProps;

    private final GitlabClient gitlabClient;

    public MigrationService(final MigratorFactory migrationFactory, final Util util) {
        this.migrationFactory = migrationFactory;
        this.util = util;
        this.appProps = util.getAppProps();
        this.gitlabClient = util.getGitlabClient();
    }

    public void migrate() {
        final List<ItemInfo> items = lookupAllItems();
    }

    public List<ItemInfo> lookupAllItems() {
        final List<ItemInfo> allItems = Lists.newArrayList();

        final Group group = gitlabClient.lookupGroupAndProjects();
        final List<Project> projects = group.getProjects();

        if (isNotEmpty(projects)) {
            log.debug("# Look up branches for " + projects.size() + " items");

            projects.stream().forEach((Project project) -> {

                if (util.include(appProps.getIncludedItems(), project.getName())) {
                    final List<Branch> branches = gitlabClient.lookupAllBranches(project);

                    final List<BranchInfo> branchNames = branches.stream().map(branch ->
                        new BranchInfo(branch.getName())).collect(toList());

                    allItems.add(new ItemInfo(project.getId(), project.getName(), branchNames));
                }
            });
        }

        return allItems;
    }
}
