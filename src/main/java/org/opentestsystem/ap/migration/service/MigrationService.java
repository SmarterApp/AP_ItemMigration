package org.opentestsystem.ap.migration.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationItemResult;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toList;

@Slf4j
public class MigrationService {

    private final ApplicationProperties applicationProperties;

    private final ApplicationProperties.DataStoreProperties dataStoreMigrations;

    private final DataStoreDataManager dataManager;

    private final AsyncService asyncService;

    public MigrationService(ApplicationProperties applicationProperties,
                            DataStoreDataManager dataManager,
                            AsyncService asyncService) {
        this.applicationProperties = applicationProperties;
        this.dataStoreMigrations = applicationProperties.getDataStoreMigrations();
        this.dataManager = dataManager;
        this.asyncService = asyncService;
    }

    /**
     * Executes the migration process against an itembank.
     */
    public void migrate() {
        if (dataStoreMigrations.isEnabled()) {
            log.info("data store migrations are enabled");

            List<String> itemIds = this.getItemsToMigrate();

            List<CompletableFuture<MigrationItemResult>> futuresList = itemIds.stream()
                .map(asyncService::migrateDataStoreItemsAsync)
                .collect(toList());

            futuresList.stream().map(CompletableFuture::join).collect(Collectors.toList());

            log.info("migration complete");
        } else {
            log.info("migration is disabled");
        }
    }

    // ------------------------------------------------------------------------

    private List<String> getItemsToMigrate() {
        List<String> itemIds = this.applicationProperties.getIncludedItems();
        return CollectionUtils.isEmpty(itemIds) ? this.dataManager.findActiveItemIds() : itemIds;
    }
}
