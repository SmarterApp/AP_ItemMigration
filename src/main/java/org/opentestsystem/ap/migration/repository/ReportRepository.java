package org.opentestsystem.ap.migration.repository;

import java.nio.file.Path;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.PostConstruct;

import lombok.extern.slf4j.Slf4j;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.client.GitClientFactory;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.model.MigrationReport;
import org.opentestsystem.ap.migration.util.Util;
import org.springframework.stereotype.Component;

/**
 * Handles operations associated with the report repository.
 */
@Slf4j
@Component
public class ReportRepository {

    public static final String REPORT_FILE_NAME_PATTERN = "migration-%1$tF-%1$tT.txt";

    public static final String REPORT_TEMPLATE = "migration-report.ftl";

    public static final boolean DO_NOT_DOUBLE_SPACE_REPORT = false;

    private final Util util;

    private final AppProps appProps;

    private final GitClientFactory gitClientFactory;

    private final GitlabClient gitlabClient;

    private final ItemBankProperties itemBankProperties;

    private final String reportRepoName;

    private final StringAssembler stringAssembler;

    private GitClient git;

    public ReportRepository(final Util util,
                            final ApplicationDependencyProvider dependencyProvider) {
        this.util = util;
        this.appProps = dependencyProvider.getAppProps();
        this.gitClientFactory = dependencyProvider.getGitClientFactory();
        this.gitlabClient = dependencyProvider.getGitlabClient();
        this.itemBankProperties = dependencyProvider.getItemBankProperties();
        this.reportRepoName = this.itemBankProperties.getReportRepoName();
        this.stringAssembler = util.newStringAssembler();
    }

    @PostConstruct
    private void initialize() {
        if (appProps.isPublishReportEnabled()) {
            if (shouldCreate()) {
                createReportProject();
                GitClient git = createRepository();
                git.deleteLocalRepo();
            }
        }
    }

    public Path publishReport(final MigrationReport report) {
        final String reportFileName = generateReportFileName(report.getReportDate());
        final String reportString = generateReport(report);
        return publishReport(reportString, reportFileName);
    }

    public Path publishReport(final String report, final String reportFileName) {
        log.info("publishing migration report {}", reportFileName);
        git = gitClientFactory.cloneRemoteRepository(appProps.getSystemUser(), reportRepoName);
        git.writeFileContents(reportFileName, report, DO_NOT_DOUBLE_SPACE_REPORT);
        git.stageFiles(reportFileName);
        git.commit(appProps.getMigrationReportCommitMessage());
        git.push();
        return git.getLocalRepositoryPath().resolve(reportFileName);
    }

    public String generateReport(final MigrationReport report) {
        log.info("generating migration report");

        final Map<String, Object> input = new HashMap<>();
        input.put("report", report);

        return stringAssembler.generate(REPORT_TEMPLATE, input);
    }

    public void deleteLocalReportRepository() {
        git.deleteLocalRepo();
    }

    // ------------------------------------------------------------------------

    private String generateReportFileName(final Date date) {
        return String.format(REPORT_FILE_NAME_PATTERN, date).replace(':', '_');
    }

    private GitClient createRepository() {
        log.info("creating report repository");
        final GitClient git = gitClientFactory.cloneRemoteRepository(appProps.getSystemUser(), reportRepoName);
        git.createRepository("creating report repository");
        return git;
    }

    private Project createReportProject() {
        log.info("creating report project {}", reportRepoName);
        final Project project = gitlabClient.createProject(reportRepoName);
        return project;
    }

    private boolean shouldCreate() {
        log.info("checking if report project {} exists", reportRepoName);
        Project project = null;
        try {
            project = gitlabClient.lookupProjectByName(reportRepoName);
        } catch (ResourceNotFoundException e) {

        }
        return project == null;
    }
}


