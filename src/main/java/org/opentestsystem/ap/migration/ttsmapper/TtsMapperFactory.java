package org.opentestsystem.ap.migration.ttsmapper;

import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

@Component
public class TtsMapperFactory {

    private static final Map<String, TtsMapper> TTS_MAPPER_MAP = buildTtsMapperMap();

    @SuppressWarnings("unchecked")
    private static Map<String, TtsMapper> buildTtsMapperMap() {
        Map ttsMapperMap = new HashMap<String, TtsMapper>();
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_EBSR, new EbsrTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_EQ, new EqTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_GI, new GiTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_HTQO, new HtqoTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_HTQS, new HtqsTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_MC, new McTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_MI, new MiTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_MS, new MsTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_SA, new SaTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_STIM, new StimTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_TI, new TiTtsMapper());
        ttsMapperMap.put(ItemConstants.ItemType.TYPE_WER, new WerTtsMapper());

        return ttsMapperMap;
    }

    public TtsMapper getTtsMapper(String itemType) {
        if (!TTS_MAPPER_MAP.containsKey(itemType.toLowerCase())) {
            throw new SystemException(String.format("TtsMapper class for item type %s was not found.", itemType));
        }
        return TTS_MAPPER_MAP.get(itemType.toLowerCase());
    }
}
