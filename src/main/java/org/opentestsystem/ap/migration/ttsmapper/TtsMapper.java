package org.opentestsystem.ap.migration.ttsmapper;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

public abstract class TtsMapper {

    public abstract void mergeEquationTTS(Item dataStoreItem, List<ttsElementInfo> ttsElementInfoList);

    public abstract void updateFileNamesFromItem(ItemRelease.Item item, List<ttsElementInfo> ttsElementInfoList);

    String updateTTSOnEquationImages(String htmlContent, Item dataStoreItem, List<ttsElementInfo> ttsElementInfoList) {
        Document document = newDocument(htmlContent);
        ttsElementInfoList.forEach(accessElementInfo -> {
            Optional<ItemImageResource> imageResource = dataStoreItem.getImages()
                    .getImageResources().stream()
                    .filter(resource -> resource.getProductionFile()
                            .getFileName().equalsIgnoreCase(accessElementInfo.getFileName()))
                    .findFirst();
            if (imageResource.isPresent()) {
                String imageResourceId = imageResource.get().getId();
                Element image = document.getElementsByAttributeValue("data-iat-image-resource-id", imageResourceId).first();
                if (image != null) {
                    Element ttsElement = image.parent();
                    if (!ttsElement.nodeName().equalsIgnoreCase("span")) {
                        image.wrap("<span></span>");
                        ttsElement = image.parent();
                    }
                    updateTTSTag(ttsElement, accessElementInfo.getAudioShortDesc());
                }
            }
        });
        return document.body().html();
    }

    void setFileNamesOnAccessElementInfoList(String richText, List<ttsElementInfo> ttsElementInfoList) {
        Document stemDoc = newDocument(richText);
        ttsElementInfoList.forEach(accessElementInfo -> {
            Element image = stemDoc.getElementById(accessElementInfo.getItsLinkIdentifierRef());
            if (Objects.nonNull(image)) {
                accessElementInfo.setFileName(image.attr("src"));
            }
        });
    }

    // ------------------------------------------------------------------------
    // Helper methods

    private void updateTTSTag(Element ttsTag, String ttsValue) {
        if (!ttsTag.hasClass("iat-text2speech")) {
            ttsTag.addClass("iat-text2speech");
        }
        if (isNotBlank(ttsValue)) {
            ttsTag.attr("data-iat-tts", ttsValue);
        }
    }

    private Document newDocument(String modelContent) {
        Document doc = Jsoup.parseBodyFragment(modelContent);
        doc.outputSettings(new Document.OutputSettings().prettyPrint(false));
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);
        return doc;
    }

}
