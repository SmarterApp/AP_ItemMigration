package org.opentestsystem.ap.migration.ttsmapper;

import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;

import javax.xml.bind.JAXBElement;
import java.io.Serializable;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_HTQO;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_HTQS;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_MC;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_MI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_MS;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TI;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_WER;

public abstract class TtsMapper {

    public abstract void mergeEquationTTS(Item dataStoreItem, List<TtsElementInfo> ttsElementInfoList);

    String updateTTSOnEquationImages(String htmlContent, String language, Item dataStoreItem, List<TtsElementInfo> ttsElementInfoList) {
        Document document = newDocument(htmlContent);
        ttsElementInfoList.forEach(accessElementInfo -> {
            if (accessElementInfo.getLanguage().equalsIgnoreCase(language) &&
                    StringUtils.isNotBlank(accessElementInfo.getFileName())) {
                Optional<ItemImageResource> imageResource = dataStoreItem.getImages()
                        .getImageResources().stream()
                        .filter(resource -> resource.getProductionFile()
                                .getFileName().equalsIgnoreCase(accessElementInfo.getFileName()))
                        .findFirst();
                if (imageResource.isPresent()) {
                    String imageResourceId = imageResource.get().getId();
                    Element image = document.getElementsByAttributeValue("data-iat-image-resource-id", imageResourceId).first();
                    if (image != null) {
                        Element ttsElement = image.parent();
                        if (!ttsElement.nodeName().equalsIgnoreCase("span")) {
                            image.wrap("<span></span>");
                            ttsElement = image.parent();
                        }
                        // Remove TTS values from image
                        updateTTSTag(ttsElement, accessElementInfo.getAudioShortDesc());
                    }
                }
            }
        });
        return document.body().html();
    }

    void setFileNamesOnAccessElementInfoList(String richText, List<TtsElementInfo> ttsElementInfoList) {
        if (StringUtils.isNotBlank(richText)) {
            Document stemDoc = newDocument(richText);
            ttsElementInfoList.forEach(accessElementInfo -> {
                Element image = stemDoc.getElementById(accessElementInfo.getItsLinkIdentifierRef());
                if (Objects.nonNull(image)) {
                    accessElementInfo.setFileName(image.attr("src"));
                }
            });
        }
    }

    public void updateFileNamesFromItem(ItemRelease.Item item, String itemType, List<TtsElementInfo> ttsElementInfoList) {
        switch (itemType.toLowerCase()) {
            case TYPE_EBSR:
                updateFileNamesFromStemQti(item, ttsElementInfoList);
                break;
            case TYPE_SA:
            case TYPE_WER:
                updateFileNamesFromStemRubricSampleList(item, ttsElementInfoList);
                break;
            case TYPE_EQ:
            case TYPE_GI:
            case TYPE_HTQO:
            case TYPE_HTQS:
            case TYPE_TI:
                updateFileNamesFromStemRubric(item, ttsElementInfoList);
                break;
            case TYPE_MC:
            case TYPE_MS:
                updateFileNamesFromStemRationaleListOptionList(item, ttsElementInfoList);
                break;
            case TYPE_MI:
                updateFileNamesFromStemQtiRubricList(item, ttsElementInfoList);
                break;
        }

//        if (itemType.equalsIgnoreCase(TYPE_EBSR)) {
//            updateFileNamesFromStemQti(item, ttsElementInfoList);
//        } else if (itemType.equalsIgnoreCase(TYPE_SA)
//                || itemType.equalsIgnoreCase(TYPE_WER)) {
//            updateFileNamesFromStemRubricSampleList(item, ttsElementInfoList);
//        } else if (itemType.equalsIgnoreCase(TYPE_EQ)
//                || itemType.equalsIgnoreCase(TYPE_GI)
//                || itemType.equalsIgnoreCase(TYPE_HTQO)
//                || itemType.equalsIgnoreCase(TYPE_HTQS)
//                || itemType.equalsIgnoreCase(TYPE_TI)) {
//            updateFileNamesFromStemRubric(item, ttsElementInfoList);
//        } else if (itemType.equalsIgnoreCase(TYPE_MC)
//                || itemType.equalsIgnoreCase(TYPE_MS)) {
//            updateFileNamesFromStemRationaleListOptionList(item, ttsElementInfoList);
//        }
    }

    // Used in Ebsr
    private void updateFileNamesFromStemQti(ItemRelease.Item item, List<TtsElementInfo> ttsElementInfoList) {
        item.getContent().forEach(content -> {
            // Look for filenames on Stem
            setFileNamesOnAccessElementInfoList(content.getStem(), ttsElementInfoList);
            // Look for filenames on Qti
            setFileNamesOnAccessElementInfoList(content.getQti().getValue(), ttsElementInfoList);
        });
    }

    // Used in Sa, Wer
    private void updateFileNamesFromStemRubricSampleList(ItemRelease.Item item, List<TtsElementInfo> ttsElementInfoList) {
        item.getContent().forEach(content -> {
            // Look for filenames on Stem
            setFileNamesOnAccessElementInfoList(content.getStem(), ttsElementInfoList);
            // Look for filenames on Rubric list
            if (Objects.nonNull(content.getRubriclist())) {
                for (Serializable element : content.getRubriclist().getContent()) {
                    JAXBElement jaxbElement = (JAXBElement) element;
                    if (jaxbElement.getName().toString().equalsIgnoreCase("rubric")) {
                        ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                        setFileNamesOnAccessElementInfoList(rubric.getVal(), ttsElementInfoList);
                    } else if (jaxbElement.getName().toString().equals("samplelist")) {
                        ItemRelease.Item.Content.Rubriclist.Samplelist samplelist =
                                (ItemRelease.Item.Content.Rubriclist.Samplelist) jaxbElement.getValue();
                        for (ItemRelease.Item.Content.Rubriclist.Samplelist.Sample sample : samplelist.getSample()) {
                            if (StringUtils.isNotBlank(sample.getSamplecontent())) {
                                setFileNamesOnAccessElementInfoList(sample.getSamplecontent(), ttsElementInfoList);
                            }
                        }
                    }
                }
            }
        });
    }

    //Used in Eq, Gi, Htqo, Htqs, Ti
    private void updateFileNamesFromStemRubric(ItemRelease.Item item, List<TtsElementInfo> ttsElementInfoList) {
        item.getContent().forEach(content -> {
            // Look for filenames on Stem
            setFileNamesOnAccessElementInfoList(content.getStem(), ttsElementInfoList);
            // Look for filenames on Rubric list
            if (Objects.nonNull(content.getRubriclist())) {
                for (Serializable element : content.getRubriclist().getContent()) {
                    JAXBElement jaxbElement = (JAXBElement) element;
                    if (jaxbElement.getName().toString().equalsIgnoreCase("rubric")) {
                        ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                        setFileNamesOnAccessElementInfoList(rubric.getVal(), ttsElementInfoList);
                    }
                }
            }
        });
    }

    // Used in Mc, Ms,
    private void updateFileNamesFromStemRationaleListOptionList(ItemRelease.Item item, List<TtsElementInfo> ttsElementInfoList) {
        item.getContent().forEach(content -> {
            // Look for filenames on Stem
            setFileNamesOnAccessElementInfoList(content.getStem(), ttsElementInfoList);
            // Look for filenames in Rationale list
            if (Objects.nonNull(content.getRationaleoptlist())) {
                content.getRationaleoptlist().getRationale()
                        .forEach(rationale -> setFileNamesOnAccessElementInfoList(
                                rationale.getVal(), ttsElementInfoList));
            }
            // Look for filenames in Option List
            if (Objects.nonNull(content.getOptionlist())) {
                content.getOptionlist().getOption()
                        .forEach(option -> setFileNamesOnAccessElementInfoList(
                                option.getVal(), ttsElementInfoList));
            }
        });
    }

    // Used in Mi
    private void updateFileNamesFromStemQtiRubricList(ItemRelease.Item item, List<TtsElementInfo> ttsElementInfoList) {
        item.getContent().forEach(content -> {
            // Look for filenames on Stem
            setFileNamesOnAccessElementInfoList(content.getStem(), ttsElementInfoList);
            // Look for filenames on Qti
            setFileNamesOnAccessElementInfoList(content.getQti().getValue(), ttsElementInfoList);
            // Look for filenames on Rubric list
            if (Objects.nonNull(content.getRubriclist())) {
                for (Serializable element : content.getRubriclist().getContent()) {
                    JAXBElement jaxbElement = (JAXBElement) element;
                    if (jaxbElement.getName().toString().equalsIgnoreCase("rubric")) {
                        ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                        setFileNamesOnAccessElementInfoList(rubric.getVal(), ttsElementInfoList);
                    }
                }
            }
        });
    }

    // ------------------------------------------------------------------------
    // Helper methods

    private void updateTTSTag(Element ttsTag, String ttsValue) {
        if (!ttsTag.hasClass("iat-text2speech")) {
            ttsTag.addClass("iat-text2speech");
        }
        ttsTag.attr("data-iat-tts", isNotBlank(ttsValue) ? ttsValue : "");
    }

    private Document newDocument(String modelContent) {
        Document doc = Jsoup.parseBodyFragment(modelContent);
        doc.outputSettings(new Document.OutputSettings().prettyPrint(false));
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);
        return doc;
    }

}
