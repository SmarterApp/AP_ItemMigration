package org.opentestsystem.ap.migration.util;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
public class BrailleUtil {

    private static final String BRAILLE_NAMING_PATTERN = "^(stim|item|passage)_(\\d+)_enu_([ue][xc][ntl])" +
            "(_transcript)?\\.(brf|prn)$";

    private static final String BRAILLE_NAMING_PATTERN_INVALID = "^(stim|item|passage)_(\\d+)_enu_(\\w+)_([ue][xc][ntl])" +
            "(_transcript)?\\.(brf|prn)$";

    private static final Pattern BRAILLE_PATTERN = Pattern.compile(BRAILLE_NAMING_PATTERN, Pattern.CASE_INSENSITIVE);

    private static final Pattern BRAILLE_PATTERN_INVALID = Pattern
            .compile(BRAILLE_NAMING_PATTERN_INVALID, Pattern.CASE_INSENSITIVE);

    public static boolean isInvalid(String filename) {
        return BRAILLE_PATTERN_INVALID.matcher(filename).matches();
    }

    public static boolean isValid(String filename) {
        return BRAILLE_PATTERN.matcher(filename).matches();
    }

    public static String makeValid(String filename) {
        if (isInvalid(filename)) {
            Matcher matcher = BRAILLE_PATTERN_INVALID.matcher(filename);
            if (matcher.find()) {
                if (StringUtils.isNotBlank(matcher.group(5))) {
                    return String.format("%s_%s_enu_%s%s.%s",
                            matcher.group(1), matcher.group(2), matcher.group(4), matcher.group(5), matcher.group(6));
                } else {
                    return String.format("%s_%s_enu_%s.%s",
                            matcher.group(1), matcher.group(2), matcher.group(4), matcher.group(6));
                }
            }
        }
        return filename;
    }
}
