package org.opentestsystem.ap.migration.util;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.ListUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.migration.model.SkipMigration;

import java.io.IOException;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.stream.Collectors;

import static java.lang.String.format;

@Slf4j
public class AudioUtil {

    public static void copyAndRename(String itemId, String itsId, Path srcFolder, Path targetFolder) {
        FileSystem fileSystem = FileSystems.getDefault();
        PathMatcher fileFilter = fileSystem.getPathMatcher("glob:**.{ogg,m4a}");
        try {
            List<Path> audioFiles = ListUtils.emptyIfNull(Files.walk(srcFolder)
                    .filter(fileFilter::matches)
                    .collect(Collectors.toList()));

            for (Path srcFile : audioFiles) {
                String targetFilename = srcFile.toFile().getName();
                // make sure the file name isn't already correct
                if (!StringUtils.contains(targetFilename, itemId)) {
                    targetFilename = rename(srcFile.toFile().getName(), itemId, itsId);
                }
                Path targetFile = targetFolder.resolve(targetFilename);
                Files.copy(srcFile, targetFile, StandardCopyOption.REPLACE_EXISTING);
            }
        } catch (IOException e) {
            throw new SkipMigration(format("Item %s - error copying audio files - %s", itemId, e.getMessage()));
        }
    }

    public static String rename(String filename, String itemId, String itsId) {
        return !filename.contains(itemId) ? filename.toLowerCase().replace(itsId, itemId) : filename;
    }
}
