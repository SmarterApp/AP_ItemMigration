package org.opentestsystem.ap.migration.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.math.NumberUtils;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemName;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.JsonModelAssembler;
import org.opentestsystem.ap.migration.config.AppProps;
import org.opentestsystem.ap.migration.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.model.MigrationSet;
import org.springframework.stereotype.Component;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import static java.util.Collections.emptyList;
import static java.util.stream.Collectors.toList;
import static org.apache.commons.collections4.CollectionUtils.isEmpty;
import static org.apache.commons.collections4.ListUtils.emptyIfNull;
import static org.apache.commons.lang.math.NumberUtils.isDigits;

@Slf4j
@Getter
@Component
public class Util {

    private final AppProps appProps;

    private final GitlabClient gitlabClient;

    private final ItemRepository itemRepository;

    private final ItemBankProperties itemBankProperties;

    private final ObjectMapper mapper = new ObjectMapper();

    private final JsonModelAssembler jsonModelAssembler = new JsonModelAssembler();

    final long glossaryIdMin;

    public Util(final ApplicationDependencyProvider dependencyProvider) {
        this.gitlabClient = dependencyProvider.getGitlabClient();
        this.itemBankProperties = dependencyProvider.getItemBankProperties();
        this.appProps = dependencyProvider.getAppProps();
        this.itemRepository = dependencyProvider.getItemRepository();
        this.glossaryIdMin = RepositoryUtil.getGlossaryIdMin();
    }

    public List<String> getMigrationSetKeys() {
        final List<MigrationSet> migrationSets = emptyIfNull(appProps.getMigrationSets());
        return migrationSets.stream().map(MigrationSet::getMigrationSetKey).collect(toList());
    }

    public List<MigrationDefinition> getMigrations(final String migrationKey) {
        final MigrationSet setToFind = new MigrationSet(migrationKey);

        final List<MigrationSet> sets = emptyIfNull(appProps.getMigrationSets());

        return sets.contains(setToFind)
            ? emptyIfNull(sets.get(sets.indexOf(setToFind)).getMigrationDefinitions())
            : emptyList();
    }

    public Item lookupItemRemotely(final String itemId, final String branchName) {
        return itemRepository.loadItemRemotely(itemId, branchName);
    }

    /**
     * Look up all items in the itembank and their associated branches.
     *
     * @return A list of all the items in the itembank.
     */
    public List<ItemName> getProjects() {
        return itemRepository.findAllProjects();
    }

    public boolean includeItem(final ItemName item) {
        final String itemId = item.getName();

        final boolean isItemIdInRange = isDigits(itemId) && (Long.parseLong(itemId) < glossaryIdMin);

        final List<String> include = appProps.getIncludedItems();

        return isItemIdInRange && (isEmpty(include) || include.contains(itemId));
    }

    public void writeItemJsonToConsole(final Item item) {
        jsonModelAssembler.writeItem(item, new PrintWriter(System.out));
    }

    public <T> T readJsonObject(final byte[] bytes, Class<T> type) {
        return jsonModelAssembler.readObject(new ByteArrayInputStream(bytes), type);
    }

    public void writeObjectToConsole(final Object object) {
        try {
            mapper.writerWithDefaultPrettyPrinter().writeValue(new PrintWriter(System.out), object);
        } catch (IOException e) {
            throw new SystemException("Error writing object to JSON", e);
        }
    }
}
