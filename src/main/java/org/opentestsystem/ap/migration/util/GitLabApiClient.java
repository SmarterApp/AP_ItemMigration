package org.opentestsystem.ap.migration.util;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Objects;

/**
 * A client for interfacing with the GitLab API.
 */
@Slf4j
public class GitLabApiClient {

    private final ApplicationProperties.SourceBank sourceBank;

    private final HttpHeaders headers;

    private final RestTemplate restTemplate;

    private final Path localBaseDir;

    public GitLabApiClient(ApplicationProperties applicationProperties,
                           ItemBankProperties itemBankProperties,
                           RestTemplateBuilder restTemplateBuilder) {
        this.sourceBank = applicationProperties.getSourceBank();

        this.restTemplate = restTemplateBuilder
            .additionalMessageConverters(new ByteArrayHttpMessageConverter())
            .build();

        this.headers = new HttpHeaders();
        this.headers.set("PRIVATE-TOKEN", this.sourceBank.getToken());
        this.headers.setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM, MediaType.ALL));

        this.localBaseDir = Paths.get(itemBankProperties.getLocalBaseDir());
    }

    /**
     * Downloads the latest commit on the master branch of the item.  The download is a zip file.  The zip file name is
     * the the legacy item id or just item id if the project hasn't been renamed yet.  For example item-200-1789.zip.
     *
     * @param itemId The item identifier.
     * @return The path to the zip file.
     */
    public Path downloadItem(String itemId) {
        Path archivePath;

        // try item first
        String projectName = RepositoryUtil.getLegacyItemId(itemId, this.sourceBank.getBankKey());
        log.info("first try downloading {} from source bank", projectName);

        try {
            archivePath = this.downloadItemArchiveZip(projectName);
            if (Objects.isNull(archivePath)) {
                // try stim next
                projectName = RepositoryUtil.getLegacyStimId(itemId, this.sourceBank.getBankKey());
                log.info("second try downloading {} from source bank", projectName);
                archivePath = this.downloadItemArchiveZip(projectName);
            }

            if (Objects.isNull(archivePath)) {
                // try just the item ID
                log.info("lastly try downloading {} from source bank", itemId);
                archivePath = this.downloadItemArchiveZip(itemId);
            }

            if (Objects.isNull(archivePath)) {
                // neither item nor stim were found
                log.info("item {} not found in source bank", itemId);
                throw new ResourceNotFoundException("item " + itemId + " not found in source bank");
            }
        } catch (IOException e) {
            throw new SystemException(
                "unexpected error downloading item " + itemId + " from source bank: " + e.getMessage(), e);
        }

        return archivePath;
    }

    /**
     * Below a URI is used so we control the encoding of the url string.  Not using a URI and instead passing the URL
     * string into the exchange call resulted in a bad encoding causing a 404.  The bad encoding is because the URL
     * string has a %2F in it.
     *
     * @param projectName
     * @return
     * @throws IOException
     */
    public Path downloadItemArchiveZip(String projectName) throws IOException {
        ResponseEntity<byte[]> response = this.restTemplate.exchange(
            URI.create(this.getUrl(projectName)),
            HttpMethod.GET,
            new HttpEntity<>(null, this.headers),
            byte[].class);

        Path filePath = null;
        if (response.getStatusCode() == HttpStatus.OK) {
            filePath = this.localBaseDir.resolve(projectName + ".zip");
            if (Files.exists(filePath)) {
                Files.delete(filePath);
            }
            Files.write(filePath, response.getBody());
        } else {
            log.warn("something wrong downloading the zip archive for {}, the HTTP status code was {}",
                projectName, response.getStatusCode().toString());
        }

        return filePath;
    }

    /**
     * The %2F is crucial in getting this to work.  Testing in Postman only worked having that.
     *
     * @param projectName
     * @return
     */
    private String getUrl(String projectName) {
        return this.sourceBank.getHost()
            + "/projects/"
            + this.sourceBank.getGroup()
            + "%2F"
            + projectName
            + "/repository/archive.zip";
    }
}
