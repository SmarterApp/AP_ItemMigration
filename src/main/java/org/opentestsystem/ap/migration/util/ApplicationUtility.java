package org.opentestsystem.ap.migration.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.JsonModelAssembler;
import org.opentestsystem.ap.common.model.ModelObjectMapper;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.springframework.stereotype.Component;

import java.util.List;

import static java.util.Collections.emptyList;
import static java.util.stream.Collectors.toList;
import static org.apache.commons.collections4.ListUtils.emptyIfNull;

@Slf4j
@Getter
@Component
public class ApplicationUtility {

    private final ApplicationProperties applicationProperties;

    private final GitlabClient gitlabClient;

    private final ItemRepository itemRepository;

    private final ItemBankProperties itemBankProperties;

    private final ObjectMapper mapper = new ModelObjectMapper();

    private final JsonModelAssembler jsonModelAssembler = new JsonModelAssembler();

    private final ImageGenerator imageGenerator;

    final long glossaryIdMin;

    public ApplicationUtility(final ApplicationDependencyProvider dependencyProvider) {
        this.gitlabClient = dependencyProvider.getGitlabClient();
        this.itemBankProperties = dependencyProvider.getItemBankProperties();
        this.applicationProperties = dependencyProvider.getApplicationProperties();
        this.itemRepository = dependencyProvider.getItemRepository();
        this.glossaryIdMin = RepositoryUtil.getGlossaryIdMin();
        this.imageGenerator = dependencyProvider.getImageGenerator();
    }

    public List<String> getMigrationSetKeys() {
        final List<ApplicationProperties.MigrationSet> migrationSets = emptyIfNull(
            applicationProperties.getMigrationSets());
        return migrationSets.stream().map(ApplicationProperties.MigrationSet::getMigrationSetKey).collect(toList());
    }

    public List<ApplicationProperties.MigrationDefinition> getMigrations(final String migrationKey) {
        final ApplicationProperties.MigrationSet setToFind = new ApplicationProperties.MigrationSet(migrationKey);

        final List<ApplicationProperties.MigrationSet> sets = emptyIfNull(applicationProperties.getMigrationSets());

        return sets.contains(setToFind)
            ? emptyIfNull(sets.get(sets.indexOf(setToFind)).getMigrationDefinitions())
            : emptyList();
    }
}
