package org.opentestsystem.ap.migration.util;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.springframework.stereotype.Component;

import java.io.File;

@Slf4j
@Component
public class MigrationMapperUtil {

    private static final char CAPITAL_A = 'A';
    private static final String LANGUAGE_DIVIDER_TAG = "<p class=\"languagedivider\">";

    public static String getCapitalLetterFromInt(int value) {
        return Character.toString((char) (value + CAPITAL_A));
    }

    public static int getIntFromLowerCaseLetter(char letter) {
        return Character.getNumericValue(letter) - 9;
    }

    public static String getAttributeValue(ItemRelease release, String attributeName) {
        String value = "";
        ItemRelease.Item.Attriblist.Attrib answerAttrib = release.getItem().getAttriblist()
                .getAttrib().stream()
                .filter(k -> attributeName.equals(k.getAttid()))
                .findAny()
                .orElse(null);

        if (null != answerAttrib) {
            value = answerAttrib.getVal();
        }
        return value;
    }

    public static File getRendererSpecFileFromItemRelease(ItemRelease release, String sourceDir) {
        if (release.getItem().getRendererSpec().size() == 1 &&
                !release.getItem().getRendererSpec().get(0).getFilename().isEmpty()) {
            String gaxFile = release.getItem().getRendererSpec().get(0).getFilename();
            return MigrationFileUtil.getFileFromDirectory(gaxFile, sourceDir);
        }
        return null;
    }

    public static File getMachineRubricFileFromItemRelease(ItemRelease release, String sourceDir) {
        if (release.getItem().getMachineRubric().size() == 1 &&
                !release.getItem().getMachineRubric().get(0).getFilename().isEmpty()) {
            String qrxFile = release.getItem().getMachineRubric().get(0).getFilename();
            return MigrationFileUtil.getFileFromDirectory(qrxFile, sourceDir);
        }
        return  null;
    }

    public static String getEsnContent(String content) {
        int dividerStart = content.indexOf(LANGUAGE_DIVIDER_TAG);

        if (dividerStart != -1) {
            return content.substring(0, dividerStart);
        }

        return content;
    }
}
