package org.opentestsystem.ap.migration.util;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.RandomStringUtils;
import org.springframework.stereotype.Component;

import java.io.*;
import java.nio.file.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

@Slf4j
@Component
public class MigrationFileUtil {
    private static final int RANDOM_DIR_CHAR_LENGTH = 10;

    public static final String IMPORT_ZIP_FILENAME = "import.zip";

    /**
     *
     * @param itemId
     * @param bytes
     * @return
     */
    public Path getExpandedImportZipFile(String itemId, byte[] bytes) {
        try {
            File importZipFile = writeBytesToFile(itemId, IMPORT_ZIP_FILENAME, bytes);
            Path localExpandedPath = Files.createTempDirectory(itemId);

            if (importZipFile.exists()) {
                return expandZipFile(importZipFile, localExpandedPath.toString());
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return null;
    }

    public File getFile(String fileName, Path filePath) {
        return new File(filePath.resolve(fileName).toString());
    }

    /**
     * Expands a ZIP file into the destination directory
     *
     * @param zipFile
     * @param destinationDir
     * @return
     */
    private static Path expandZipFile(final File zipFile,
                                      final String destinationDir) {
        String randomDir = destinationDir + "/" +
                RandomStringUtils.randomAlphabetic(RANDOM_DIR_CHAR_LENGTH);
        File dir = new File(randomDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        unzipFile(zipFile.toString(), randomDir);

        return Paths.get(randomDir);
    }

    /**
     * @param sourceZipFile
     * @param destinationDir
     */
    private static void unzipFile(final String sourceZipFile,
                                  final String destinationDir) {
        byte[] buffer = new byte[1024];

        try{
            //get the zip file content
            ZipInputStream zis =
                    new ZipInputStream(new FileInputStream(sourceZipFile));
            //get the zipped file list entry
            ZipEntry ze = zis.getNextEntry();

            while(ze!=null){

                String fileName = ze.getName();
                File newFile = new File(destinationDir + File.separator + fileName);

                //create all non exists folders
                //else you will hit FileNotFoundException for compressed folder
                new File(newFile.getParent()).mkdirs();

                FileOutputStream fos = new FileOutputStream(newFile);

                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }

                fos.close();
                ze = zis.getNextEntry();
            }

            zis.closeEntry();
            zis.close();


        }catch(IOException ex){
            ex.printStackTrace();
        }
    }

    /**
     *
     * @param itemId
     * @param bytes
     * @return
     */
    private File writeBytesToFile(String itemId, String fileName, byte[] bytes) {
        try {
            Path localZipFilePath = Files.createTempDirectory(itemId);

            FileUtils.writeByteArrayToFile(localZipFilePath.resolve(fileName).toFile(), bytes);

            return localZipFilePath.resolve(fileName).toFile();

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


}
