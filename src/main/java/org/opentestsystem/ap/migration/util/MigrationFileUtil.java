package org.opentestsystem.ap.migration.util;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.apache.commons.lang.RandomStringUtils;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.migration.model.IatImportConstants;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.ItemMappingResult;
import org.opentestsystem.ap.migration.model.ItemProps;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Slf4j
@Component
public class MigrationFileUtil {
    private static final int RANDOM_DIR_CHAR_LENGTH = 10;
    public static final String IMPORT_ZIP_FILENAME = "import.zip";
    public static final String GI_SAMPLE_DIRECTORY_NAME = "gi-sample";
    public static final String GI_SAMPLE_FILE_NAME = "gi-sample.zip";

    private final GitlabClient gitlabClient;
    private final AppAssembler appAssembler;
    private final ItemRepository itemRepository;

    public MigrationFileUtil(final GitlabClient gitlabClient,
                             final AppAssembler appAssembler,
                             final ItemRepository itemRepository) {
        this.gitlabClient = gitlabClient;
        this.appAssembler = appAssembler;
        this.itemRepository = itemRepository;
    }

    /**
     * @param itemId
     * @param bytes
     * @return
     */
    public Path getExpandedImportZipFile(String itemId, byte[] bytes) {
        try {
            String legacyId = this.itemRepository.findLegacyItemId(itemId);
            File importZipFile = writeBytesToFile(legacyId, IMPORT_ZIP_FILENAME, bytes);
            Path localExpandedPath = Files.createTempDirectory(itemId);

            if (importZipFile.exists()) {
                return expandZipFile(importZipFile, localExpandedPath.toString());
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return null;
    }

    /**
     * Gets the import zip file from the master branch, unzips it, and provides the {@link Path} to the expanded
     * directory.
     *
     * @param itemId the item id
     * @return Optional containing path if successfully unzipped otherwise empty
     */
    public Optional<Path> getExpandedImportZipFile(final String itemId) {
        String legacyId;
        try {
            legacyId = this.itemRepository.findLegacyItemId(itemId);
        } catch (ResourceNotFoundException e) {
            return Optional.empty();
        }

        // should never be null given we have a legacy ID
        Project glProject = gitlabClient.lookupProjectByName(legacyId);

        if (glProject == null) {
            return Optional.empty();
        }

        Path path;
        try {
            path = getExpandedImportZipFile(itemId,
                gitlabClient.getFile(glProject.getId(), MigrationFileUtil.IMPORT_ZIP_FILENAME, BRANCH_MASTER));
        } catch (Throwable throwable) {
            log.warn("Issue finding/processing import zip file for item " + itemId);
            return Optional.empty();
        }

        return Optional.ofNullable(path);
    }

    /**
     * Gets the {@link ItemRelease} from the imported zip.
     *
     * @param itemEntity the {@link ItemEntity} to use to get import zip item release
     * @return {@link ItemRelease} if found/able otherwise empty
     */
    public Optional<ItemRelease> getImportedItemRelease(final ItemEntity itemEntity) {
        Optional<Path> maybeImportZip = getExpandedImportZipFile(itemEntity.getItemId());

        if (!maybeImportZip.isPresent()) {
            return Optional.empty();
        }

        return getItemRelease(itemEntity, maybeImportZip.get());
    }

    public Optional<ImportItem> getImportItem(final ItemEntity itemEntity) {
        if (!ImportFileUtil.isImported(itemEntity.getItemJson())) {
            return Optional.empty();
        }

        Optional<Path> maybeImportZip = getExpandedImportZipFile(itemEntity.getItemId());

        if (!maybeImportZip.isPresent()) {
            log.info("Could not find import zip for item {}", itemEntity.getItemId());
            return Optional.empty();
        }

        Path itemSourceDir = MigrationFileUtil
            .getItemSourceDir(maybeImportZip.get(), itemEntity.getItemJson().getItsId());

        // Find the main item file in the source location
        File itemFile = MigrationFileUtil.getItemFileInDirectory(itemSourceDir, itemEntity.getItemJson().getItsId());
        if (itemFile == null) {
            return Optional.empty();
        }

        ItemRelease itemRelease = this.appAssembler.getSaaifAssembler().readXmlFromFile(itemFile.toPath());

        Optional<SmarterAppMetadata> maybeMetadata = ImportFileUtil.getSmarterAppMetadata(appAssembler, itemSourceDir);

        if (!maybeMetadata.isPresent()) {
            log.info("Could not get SmarterAppMetadata for item {}", itemEntity.getItemId());
            return Optional.empty();
        }

        ItemProps itemProps = ImportFileUtil.loadItemProps(itemSourceDir.toFile().getName(), itemRelease);
        Optional<Path> maybeWordlistPath = ImportFileUtil.getWordListDirectory(maybeImportZip.get(), itemProps);

        Optional<WordlistreleaseType> maybeWordlistReleaseType = Optional.empty();
        if (maybeWordlistPath.isPresent()) {
            maybeWordlistReleaseType = ImportFileUtil
                .getWordListRelease(maybeWordlistPath.get().toString(), itemProps.getWordlistId(), appAssembler);
        }

        return Optional
            .of(new ImportItem(
                itemProps,
                maybeImportZip.get(),
                itemRelease,
                maybeMetadata.get(),
                maybeWordlistPath,
                maybeWordlistReleaseType,
                itemSourceDir,
                itemFile));
    }

    private Optional<ItemRelease> getItemRelease(final ItemEntity itemEntity, final Path importZipPath) {
        // import.zip can contain multiple directories or none at all. Identify the imported item source directory
        Path itemSourceDir = MigrationFileUtil.getItemSourceDir(importZipPath, itemEntity.getItemJson().getItsId());
        // Find the main item file in the source location
        File itemFile = MigrationFileUtil.getItemFileInDirectory(itemSourceDir, itemEntity.getItemJson().getItsId());

        if (itemFile == null) {
            return Optional.empty();
        }

        // Load imported item xml data
        return Optional.ofNullable(this.appAssembler.getSaaifAssembler()
            .readXmlFromFile(itemFile.toPath()));
    }

    /**
     * Returns item xml file from a directory
     *
     * @param itemDirectory
     * @param itemId
     * @return
     */
    public static File getItemFileInDirectory(Path itemDirectory, String itemId) {
        return findFileInPath(itemDirectory.toString(), String.format("*%s.xml", itemId.toLowerCase()));
    }

    /**
     * Expands a ZIP file into the destination directory
     *
     * @param zipFile
     * @param destinationDir
     * @return
     */
    private static Path expandZipFile(final File zipFile,
                                      final String destinationDir) {
        String randomDir = destinationDir + "/" +
            RandomStringUtils.randomAlphabetic(RANDOM_DIR_CHAR_LENGTH);
        File dir = new File(randomDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        unzipFile(zipFile.toString(), randomDir);

        return Paths.get(randomDir);
    }

    /**
     * @param sourceZipFile
     * @param destinationDir
     */
    private static void unzipFile(final String sourceZipFile,
                                  final String destinationDir) {
        byte[] buffer = new byte[1024];

        try {
            //get the zip file content
            ZipInputStream zis =
                new ZipInputStream(new FileInputStream(sourceZipFile));
            //get the zipped file list entry
            ZipEntry ze = zis.getNextEntry();

            while (ze != null) {

                String fileName = ze.getName();
                File newFile = new File(destinationDir + File.separator + fileName);

                //create all non exists folders
                //else you will hit FileNotFoundException for compressed folder
                new File(newFile.getParent()).mkdirs();

                FileOutputStream fos = new FileOutputStream(newFile);

                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }

                fos.close();
                ze = zis.getNextEntry();
            }

            zis.closeEntry();
            zis.close();


        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param legacyId
     * @param bytes
     * @return
     */
    private File writeBytesToFile(String legacyId, String fileName, byte[] bytes) {
        try {
            Path localZipFilePath = Files.createTempDirectory(legacyId);
            FileUtils.writeByteArrayToFile(localZipFilePath.resolve(fileName).toFile(), bytes);
            return localZipFilePath.resolve(fileName).toFile();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Converts a text file into a collection. One element per line.
     *
     * @param fileLocation
     * @return
     */
    public static List<String> fileToCollection(String fileLocation) {
        List<String> list = new ArrayList<>();
        try {
            list = FileUtils.readLines(new File(fileLocation), "utf-8");
        } catch (IOException ioe) {
            log.error("Unable to create a list of items to import using: " + fileLocation, ioe);
        }
        return list;
    }

    /**
     * Searches the identified directory for a file
     *
     * @param searchDir
     * @param filePattern
     * @return
     */
    public static File findFileInPath(String searchDir, String filePattern) {
        try {
            File localItemDir = new File(searchDir);
            List<File> files = (List<File>) FileUtils.listFiles(
                localItemDir, new WildcardFileFilter(filePattern.toLowerCase(), IOCase.INSENSITIVE),
                TrueFileFilter.TRUE);

            if (files.size() > 0) {
                files.sort(Collections.reverseOrder());
                return files.get(files.size() - 1);
            }

        } catch (Exception e) {
            log.error("Unable to find item file in: " + searchDir, e);
        }

        return null;
    }

    /**
     * @param sourceDir
     * @param destinationDir
     * @param destinationFileName
     */
    public static void zipDirectory(String sourceDir,
                                    String destinationDir,
                                    String destinationFileName) {
        String zipFile = destinationDir + "/" + destinationFileName;
        try {
            File source = new File(sourceDir);

            if (source.isDirectory()) {
                FileOutputStream fout = new FileOutputStream(zipFile);
                ZipOutputStream zout = new ZipOutputStream(fout);

                List<File> filesToZip = new ArrayList<>();

                getFilesToZip(source, filesToZip);

                filesToZip.forEach(file -> {
                    if (!file.isDirectory()) {
                        addFileToZipOutputStream(sourceDir, file, zout);
                    }
                });

                zout.close();

            } else {
                log.error("Source is not a directory");
            }

        } catch (IOException ioe) {
            log.error("Error creating ZIP file", ioe);
        }
    }

    /**
     * @param sourceLocation
     * @param destLocation
     */
    public static void copyFile(String sourceLocation, String destLocation, ItemMappingResult itemMappingResult) {
        File source = new File(sourceLocation);
        File dest = new File(destLocation);

        copyFile(source, dest, itemMappingResult);
    }

    /**
     * @param sourceFile Source of the file to copy
     * @param destFile   Target/destination of the file once copied.
     */
    public static void copyFile(Path sourceFile, Path destFile, ItemMappingResult itemMappingResult) {
        copyFile(sourceFile.toFile(), destFile.toFile(), itemMappingResult);
    }

    /**
     * @param sourceFile
     * @param destFile
     */
    public static void copyFile(File sourceFile, File destFile, ItemMappingResult itemMappingResult) {
        try {
            if (sourceFile.exists()) {
                if (destFile.isDirectory()) {
                    FileUtils.copyFileToDirectory(sourceFile, destFile);
                } else {
                    FileUtils.copyFile(sourceFile, destFile);
                }
            } else {
                itemMappingResult.setStatus(IatImportConstants.STATUS_ERROR);
                itemMappingResult.getErrorMessages().add(String.format("Source not found: %s", sourceFile.toString()));
            }
        } catch (Exception ex) {
            itemMappingResult.setStatus(IatImportConstants.STATUS_ERROR);
            itemMappingResult.getErrorMessages().add(String.format("Unable to copy file: %s: %s",
                sourceFile.toString(), ex.getMessage()));
        }
    }

    public static void copyDirectoryToDirectory(File sourceDirectory,
                                                File destinationDirectory) throws IOException {
        FileUtils.copyDirectoryToDirectory(sourceDirectory, destinationDirectory);
    }

    public static String fileToString(File file) {
        String content = "";
        try {
            content = new String(Files.readAllBytes(file.toPath()));
        } catch (IOException e) {
            log.error("Unable to read qrx file", e);
        }
        return content;
    }


    public static File[] findFilesWithExtension(String directory, String filePattern) {
        File dir = new File(directory);
        if (dir.exists() && dir.isDirectory()) {
            FileFilter fileFilter = new WildcardFileFilter(filePattern);
            return dir.listFiles(fileFilter);
        }
        return null;
    }

    public static Path createGiSampleDirectory(String directory) {
        Path giSampleDir = Paths.get(directory, GI_SAMPLE_DIRECTORY_NAME);
        try {
            if (!giSampleDir.toFile().exists()) {
                FileUtils.forceMkdir(giSampleDir.toFile());
            }
        } catch (IOException e) {
            log.error(String.format("Unable to createGiSampleDirectory in: %s", directory), e);
        }
        return giSampleDir;

    }

    public static void deleteDirectory(File deleteDir) throws IOException {
        if (deleteDir.exists() && deleteDir.isDirectory()) {
            FileUtils.deleteDirectory(deleteDir);
        }
    }

    public static File getFileFromDirectory(String fileName, String directory) {
        File dir = new File(directory);
        if (dir.exists() && dir.isDirectory()) {
            return dir.toPath().resolve(fileName).toFile();
        } else {
            return null;
        }
    }

    /* ------------------------------------------------------------------------------- */

    /**
     * @param rootDirectory
     * @param fileList
     * @throws IOException
     */
    private static void getFilesToZip(File rootDirectory, List<File> fileList) throws IOException {
        try {
            File[] files = rootDirectory.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (!file.isHidden()) {
                        fileList.add(file);
                        if (file.isDirectory()) {
                            getFilesToZip(file, fileList);
                        }
                    }
                }
            }
        } catch (IOException ioe) {
            log.error("Error getting all files to Zip", ioe);
        }
    }

    /**
     * @param sourceDir
     * @param file
     * @param zout
     */
    private static void addFileToZipOutputStream(String sourceDir, File file, ZipOutputStream zout) {
        byte[] buffer = new byte[1024];
        if (!file.isHidden()) {
            String zipPath = file.getPath().replace(sourceDir, "").replace(file.getName(), "");
            String zipName = zipPath.isEmpty() ? file.getName() : zipPath + "/" + file.getName();
            try {
                FileInputStream fin = new FileInputStream(file);
                zout.putNextEntry(new ZipEntry(zipName));
                int length;
                while ((length = fin.read(buffer)) > 0) {
                    zout.write(buffer, 0, length);
                }
                zout.closeEntry();
                fin.close();
            } catch (IOException ioe) {
                log.error("Error creating ZIP file", ioe);
            }
        }
    }

    /**
     * Creates the local file system path to the item repository in the item bank.  The formatting is
     * {localBaseDir/randomFolderName/itemId}.
     *
     * @param localBaseDir  The base directory of the item repo.
     * @param randomDirName A random directory name appended to the localBaseDir
     * @param itemId        The item identifier.
     * @return The path to the item repository on the local file system.
     */
    public static Path generateLocalItemPath(final String localBaseDir,
                                             final String randomDirName,
                                             final String itemId) {
        return Paths.get(localBaseDir, randomDirName, itemId);
    }

    //    public static String getWordListDirectory(final ApplicationProperties applicationProps,
    //                                              final ItemProps itemProps) throws Exception {
    //        String wordListDirectory = String.format("%s/%s",
    //                                    applicationProps.getWordlistSourceDir(),
    //                                    itemProps.getWordListDirName());
    //        File wordDir = new File(wordListDirectory);
    //        String caseDirectory;
    //        if (wordDir.exists() && wordDir.isDirectory()) {
    //            return wordListDirectory;
    //        } else {
    //            // try with different capitalization on first letter
    //            if (Character.isUpperCase(itemProps.getWordListDirName().charAt(0))) {
    //                caseDirectory = itemProps.getWordListDirName().substring(0,1).toLowerCase() +
    //                        itemProps.getWordListDirName().substring(1);
    //            } else {
    //                caseDirectory = itemProps.getWordListDirName().substring(0,1).toUpperCase() +
    //                        itemProps.getWordListDirName().substring(1);
    //            }
    //            wordListDirectory = String.format("%s/%s", applicationProps.getWordlistSourceDir(), caseDirectory);
    //            wordDir = new File(wordListDirectory);
    //            if (wordDir.exists() && wordDir.isDirectory()) {
    //                return wordListDirectory;
    //            }
    //        }
    //
    //        throw new Exception(String.format("Unable to find Wordlist directory: %s or %s in %s",
    //                itemProps.getWordListDirName(),
    //                caseDirectory,
    //                applicationProps.getWordlistSourceDir()));
    //    }

    public static WordlistreleaseType getWordListRelease(String wordListDirectory,
                                                         String wordListId,
                                                         AppAssembler appAssembler) throws Exception {
        String fileLocation = String.format("%s/%s.xml", wordListDirectory, wordListId);
        File wordListFile = new File(fileLocation);
        if (wordListFile.exists()) {
            return appAssembler.getSaaifAssembler()
                .getWordListAssembler().readXmlFromFile(wordListFile.toPath());
        }

        throw new Exception(String.format("Unable to find Wordlist item file: %s", fileLocation));
    }

    public static File getSourceDirectoryPath(String sourceDirectory, String itemDirectory) throws Exception {
        String itemFullDirectory = String.format("%s/%s", sourceDirectory, itemDirectory);
        File sourcePath = new File(itemFullDirectory);
        String caseDirectory;
        if (sourcePath.exists() && sourcePath.isDirectory()) {
            return sourcePath;
        } else {
            // try with different capitalization on first letter
            if (Character.isUpperCase(itemDirectory.charAt(0))) {
                caseDirectory = itemDirectory.substring(0, 1).toLowerCase() +
                    itemDirectory.substring(1);
            } else {
                caseDirectory = itemDirectory.substring(0, 1).toUpperCase() +
                    itemDirectory.substring(1);
            }
            itemFullDirectory = String.format("%s/%s", sourceDirectory, caseDirectory);
            sourcePath = new File(itemFullDirectory);
            if (sourcePath.exists() && sourcePath.isDirectory()) {
                return sourcePath;
            }
        }

        throw new Exception(String.format("Unable to find Import item directory: %s or %s in %s",
            itemDirectory, caseDirectory, sourceDirectory));
    }

    /**
     * After expanding an import.zip it is not clear which directory contains the imported item files. This function
     * uses the original id to identify the item's expanded directory.  This method does not take capitalization into
     * consideration as it only checks if the there is a folder inside the expanded zip that contains the ITS ID.  If no
     * folder inside the expanded zip contains ITS ID then the rootDirectory is returned under the assumption the root
     * of the expanded zip is the root of the item source files.
     *
     * @param rootDirectory The root folder which is likely the root of the expanded import.zip
     * @param itsId         The ITS ID (i.e. the original item ID)
     * @return The path to the root of the item's source inside the expanded zip
     */
    public static Path getItemSourceDir(Path rootDirectory, String itsId) {
        File[] directories = rootDirectory.toFile().listFiles(File::isDirectory);

        if (directories != null) {
            for (File file : directories) {
                if (file.getName().contains(itsId)) {
                    return rootDirectory.resolve(file.getName());
                }
            }
        }

        return rootDirectory;
    }

}
