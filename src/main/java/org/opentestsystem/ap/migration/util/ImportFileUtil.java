package org.opentestsystem.ap.migration.util;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.apache.commons.lang.RandomStringUtils;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.IatImportConstants;
import org.opentestsystem.ap.migration.model.ItemProps;
import org.opentestsystem.ap.migration.model.report.ImportResult;
import org.springframework.stereotype.Component;

import java.io.*;
import java.nio.file.FileSystem;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

@Slf4j
@Component
public class ImportFileUtil {

    public static final int RANDOM_DIR_CHAR_LENGTH = 10;
    public static final String IMPORT_ZIP_FILENAME = "import.zip";
    public static final String GI_SAMPLE_DIRECTORY_NAME = "gi-sample";
    public static final String GI_SAMPLE_FILE_NAME = "gi-sample.zip";

    /**
     * Converts a text file into a collection. One element per line.
     * @param fileLocation
     * @return
     */
    public static List<String> fileToCollection(String fileLocation) {
        List<String> list = new ArrayList<>();
        try {
            list = FileUtils.readLines(new File(fileLocation), "utf-8");
        } catch (IOException ioe) {
            log.error("Unable to create a list of items to import using: " + fileLocation, ioe);
        }
        return list;
    }

    /**
     * Expands a ZIP file into the destination directory
     * @param zipFile
     * @param destinationDir
     * @return
     */
    public static String expandZipFile(final String zipFile,
                                       final String destinationDir) {
        String randomDir = destinationDir + "/" +
                RandomStringUtils.randomAlphabetic(RANDOM_DIR_CHAR_LENGTH);
        File dir = new File(randomDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        unzipFile(zipFile, randomDir);
        return randomDir;
    }

    /**
     * Searches the identified directory for a file
     * @param searchDir
     * @param filePattern
     * @return
     */
    public static File findItemFileInPath(String searchDir, String filePattern) {
        try {
            File localItemDir = new File(searchDir);
            List<File> files = (List<File>) FileUtils.listFiles(
                    localItemDir, new WildcardFileFilter(filePattern, IOCase.INSENSITIVE), TrueFileFilter.TRUE);

            if (files.size() > 0) {
                files.sort(Collections.reverseOrder());
                return files.get(files.size() - 1);
            }

        } catch(Exception e) {
            log.error("Unable to find item file in: " + searchDir, e);
        }

        return null;
    }

    /**
     *
     * @param sourceDir
     * @param destinationDir
     * @param destinationFileName
     */
    public static void zipDirectory(String sourceDir,
                                    String destinationDir,
                                    String destinationFileName) {
        String zipFile = destinationDir + "/" + destinationFileName;
        try {
            File source = new File(sourceDir);

            if (source.isDirectory()) {
                FileOutputStream fout = new FileOutputStream(zipFile);
                ZipOutputStream zout = new ZipOutputStream(fout);

                List<File> filesToZip = new ArrayList<>();

                getFilesToZip(source, filesToZip);

                filesToZip.forEach(file -> {
                    if (!file.isDirectory()) {
                        addFileToZipOutputStream(sourceDir, file, zout);
                    }
                });

                zout.close();

            } else {
                log.error("Source is not a directory");
            }

        } catch (IOException ioe) {
            log.error("Error creating ZIP file", ioe);
        }
    }

    /**
     *
     * @param sourceLocation
     * @param destLocation
     */
    public static void copyFile(String sourceLocation, String destLocation, ImportResult importResult) {
        File source = new File(sourceLocation);
        File dest = new File( destLocation);

        copyFile(source, dest, importResult);
    }

    /**
     *
     * @param sourceFile
     * @param destFile
     */
    public static void copyFile(File sourceFile, File destFile, ImportResult importResult) {
        try {
            if (sourceFile.exists()) {
                if (destFile.isDirectory()) {
                    FileUtils.copyFileToDirectory(sourceFile, destFile);
                } else {
                    FileUtils.copyFile(sourceFile, destFile);
                }
            } else {
                importResult.setStatus(IatImportConstants.STATUS_ERROR);
                importResult.getErrorMessages().add(String.format("Source not found: %s", sourceFile.toString()));
            }
        } catch (Exception ex) {
            importResult.setStatus(IatImportConstants.STATUS_ERROR);
            importResult.getErrorMessages().add(String.format("Unable to copy file: %s: %s",
                    sourceFile.toString(), ex.getMessage()));
        }
    }

    public static void copyDirectoryToDirectory(File sourceDirectory,
                                                File destinationDirectory) throws IOException{
        FileUtils.copyDirectoryToDirectory(sourceDirectory, destinationDirectory);
    }

    public static String fileToString(File file) {
        String content = "";
        try {
           content = new String(Files.readAllBytes(file.toPath()));
        } catch (IOException e) {
           log.error("Unable to read qrx file", e);
        }
        return content;
    }


    public static File[] findFilesWithExtension(String directory, String filePattern) {
        File dir = new File(directory);
        if (dir.exists() && dir.isDirectory()) {
            FileFilter fileFilter = new WildcardFileFilter(filePattern);
            return dir.listFiles(fileFilter);
        }
        return null;
    }

    public static File createGiSampleDirectory(String directory) {
        File giSampleDir = new File(directory + "/" + GI_SAMPLE_DIRECTORY_NAME);
        try {
            if (!giSampleDir.exists()) {
                FileUtils.forceMkdir(giSampleDir);
            }
        } catch (IOException e) {
            log.error(String.format("Unable to createGiSampleDirectory in: %s", directory), e);
        }
        return giSampleDir;

    }

    public static void deleteDirectory(File deleteDir) throws IOException{
        if (deleteDir.exists() && deleteDir.isDirectory()) {
            FileUtils.deleteDirectory(deleteDir);
        }
    }

    public static File getFileFromDirectory(String fileName, String directory) {
        File dir = new File(directory);
        if (dir.exists() && dir.isDirectory()) {
            return dir.toPath().resolve(fileName).toFile();
        } else {
            return null;
        }
    }

    /* ------------------------------------------------------------------------------- */

    /**
     *
     * @param sourceZipFile
     * @param destinationDir
     */
    private static void unzipFile(String sourceZipFile, String destinationDir) {
        try(ZipFile file = new ZipFile(sourceZipFile)) {
            FileSystem fileSystem = FileSystems.getDefault();

            Enumeration<? extends ZipEntry> entries = file.entries();

            String uncompressedDirectory = destinationDir + "/";

            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                if (entry.isDirectory()) {
                    Files.createDirectories(fileSystem.getPath(uncompressedDirectory + entry.getName()));
                }
                else {
                    InputStream is = file.getInputStream(entry);
                    BufferedInputStream bis = new BufferedInputStream(is);
                    String uncompressedFileName = uncompressedDirectory + entry.getName();
                    Path uncompressedFilePath = fileSystem.getPath(uncompressedFileName);
                    Files.createFile(uncompressedFilePath);
                    FileOutputStream fileOutput = new FileOutputStream(uncompressedFileName);
                    while (bis.available() > 0)
                    {
                        fileOutput.write(bis.read());
                    }
                    fileOutput.close();
                }
            }
        }
        catch(IOException e)
        {
            log.error("Error uncompressing file: " + sourceZipFile, e);
        }
    }

    /**
     *
     * @param rootDirectory
     * @param fileList
     * @throws IOException
     */
    private static void getFilesToZip(File rootDirectory, List<File> fileList) throws IOException{
        try {
            File[] files = rootDirectory.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (!file.isHidden()) {
                        fileList.add(file);
                        if (file.isDirectory()) {
                            getFilesToZip(file, fileList);
                        }
                    }
                }
            }
        } catch (IOException ioe) {
            log.error("Error getting all files to Zip", ioe);
        }
    }

    /**
     *
     * @param sourceDir
     * @param file
     * @param zout
     */
    private static void addFileToZipOutputStream(String sourceDir, File file, ZipOutputStream zout) {
        byte[] buffer = new byte[1024];
        if (!file.isHidden()) {
            String zipPath = file.getPath().replace(sourceDir, "").replace(file.getName(),"");
            String zipName = zipPath.isEmpty() ? file.getName() : zipPath + "/" + file.getName();
            try {
                FileInputStream fin = new FileInputStream(file);
                zout.putNextEntry(new ZipEntry(zipName));
                int length;
                while ((length = fin.read(buffer)) > 0) {
                    zout.write(buffer, 0, length);
                }
                zout.closeEntry();
                fin.close();
            }  catch (IOException ioe) {
                log.error("Error creating ZIP file", ioe);
            }
        }
    }

    /**
     * Creates the local file system path to the item repository in the item bank.  The formatting is
     * {localBaseDir/randomFolderName/itemId}.
     *
     * @param localBaseDir  The base directory of the item repo.
     * @param randomDirName A random directory name appended to the localBaseDir
     * @param itemId        The item identifier.
     * @return The path to the item repository on the local file system.
     */
    public static Path generateLocalItemPath(final String localBaseDir,
                                             final String randomDirName,
                                             final String itemId) {
        return Paths.get(localBaseDir, randomDirName, itemId);
    }

//    public static String getWordListDirectory(final ApplicationProperties applicationProps,
//                                              final ItemProps itemProps) throws Exception {
//        String wordListDirectory = String.format("%s/%s",
//                                    applicationProps.getWordlistSourceDir(),
//                                    itemProps.getWordListDirName());
//        File wordDir = new File(wordListDirectory);
//        String caseDirectory;
//        if (wordDir.exists() && wordDir.isDirectory()) {
//            return wordListDirectory;
//        } else {
//            // try with different capitalization on first letter
//            if (Character.isUpperCase(itemProps.getWordListDirName().charAt(0))) {
//                caseDirectory = itemProps.getWordListDirName().substring(0,1).toLowerCase() +
//                        itemProps.getWordListDirName().substring(1);
//            } else {
//                caseDirectory = itemProps.getWordListDirName().substring(0,1).toUpperCase() +
//                        itemProps.getWordListDirName().substring(1);
//            }
//            wordListDirectory = String.format("%s/%s", applicationProps.getWordlistSourceDir(), caseDirectory);
//            wordDir = new File(wordListDirectory);
//            if (wordDir.exists() && wordDir.isDirectory()) {
//                return wordListDirectory;
//            }
//        }
//
//        throw new Exception(String.format("Unable to find Wordlist directory: %s or %s in %s",
//                itemProps.getWordListDirName(),
//                caseDirectory,
//                applicationProps.getWordlistSourceDir()));
//    }

    public static WordlistreleaseType getWordListRelease(String wordListDirectory,
                                                         String wordListId,
                                                         AppAssembler appAssembler) throws Exception {
        String fileLocation = String.format("%s/%s.xml", wordListDirectory, wordListId);
        File wordListFile = new File(fileLocation);
        if (wordListFile.exists()) {
            return appAssembler.getSaaifAssembler()
                    .getWordListAssembler().readXmlFromFile(wordListFile.toPath());
        }

        throw new Exception(String.format("Unable to find Wordlist item file: %s", fileLocation));
    }

    public static File getSourceDirectoryPath(String sourceDirectory, String itemDirectory) throws Exception {
        String itemFullDirectory = String.format("%s/%s", sourceDirectory, itemDirectory);
        File sourcePath = new File(itemFullDirectory);
        String caseDirectory;
        if (sourcePath.exists() && sourcePath.isDirectory()) {
            return sourcePath;
        } else {
            // try with different capitalization on first letter
            if (Character.isUpperCase(itemDirectory.charAt(0))) {
                caseDirectory = itemDirectory.substring(0,1).toLowerCase() +
                        itemDirectory.substring(1);
            } else {
                caseDirectory = itemDirectory.substring(0,1).toUpperCase() +
                        itemDirectory.substring(1);
            }
            itemFullDirectory = String.format("%s/%s", sourceDirectory, caseDirectory);
            sourcePath = new File(itemFullDirectory);
            if (sourcePath.exists() && sourcePath.isDirectory()) {
                return sourcePath;
            }
        }

        throw new Exception(String.format("Unable to find Import item directory: %s or %s in %s",
                itemDirectory, caseDirectory, sourceDirectory));
    }
}