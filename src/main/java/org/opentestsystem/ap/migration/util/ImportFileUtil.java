package org.opentestsystem.ap.migration.util;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.migration.model.ItemProps;

import java.io.File;
import java.nio.file.Path;
import java.util.Optional;

public class ImportFileUtil {
    private static final String BANKKEY_200 = "200";
    private static final String BANKKEY_187 = "187";

    private static final String PREFIX_17 = "17";
    private static final String PREFIX_18 = "18";
    private static final String PREFIX_19 = "19";

    private static final int MAX_IMPORT_ITEM_ID = 200000;

    private enum ID_TYPE {
        STIMULUS,
        ITEM
    }

    public static boolean isImported(Item item) {
        return Integer.parseInt(item.getId()) < MAX_IMPORT_ITEM_ID;
    }

    public static ItemProps loadItemProps(String itemDirName, ItemRelease release) {
        final String HTQ = "htq";
        final String HT = "ht";
        ItemProps itemProps = new ItemProps();

        if (release.getPassage() != null) {
            itemProps.setItemId(release.getPassage().getId());
            itemProps.setBankKey(release.getPassage().getBankkey());
            itemProps.setItemType(ItemConstants.ItemType.TYPE_STIM);

            setWordListValues(itemDirName, release, itemProps);

            itemProps.setImportItemId(getImportId(ID_TYPE.STIMULUS,
                    release.getPassage().getId(),
                    release.getPassage().getBankkey()));
        }
        if (release.getItem() != null) {
            itemProps.setItemId(release.getItem().getId());
            itemProps.setBankKey(release.getItem().getBankkey());
            itemProps.setItemType(release.getItem().getFormat().toLowerCase());
            if (itemProps.getItemType().equalsIgnoreCase(HTQ)
                    || itemProps.getItemType().equalsIgnoreCase(HT)) {
                itemProps.setItemType(getIatHtqType(release));
            }
            if (itemProps.getItemType().equals("er")) {
                itemProps.setItemType(ItemConstants.ItemType.TYPE_SA);
            }
            itemProps.setAssociatedPassage(release.getItem().getAssociatedpassage());
            itemProps.setTutorialId(release.getItem().getTutorial().getId());

            setWordListValues(itemDirName, release, itemProps);

            itemProps.setImportItemId(getImportId(ID_TYPE.ITEM,
                    release.getItem().getId(),
                    release.getItem().getBankkey()));

            itemProps.setImportAssociatedPassage(getImportId(ID_TYPE.STIMULUS,
                    release.getItem().getAssociatedpassage(),
                    release.getItem().getBankkey()));

            itemProps.setImportTutorialId(getImportId(ID_TYPE.ITEM,
                    release.getItem().getTutorial().getId(),
                    release.getItem().getBankkey()));
        }

        if (itemProps.getItemId() == null || itemProps.getBankKey() == null || itemProps.getItemType() == null) {
            throw new RuntimeException(String.format("Unable to read item id, bank key or item type for item: %s", itemDirName));
        }

        return itemProps;
    }

    private static void setWordListValues(String itemDirName,
                                          ItemRelease release,
                                          ItemProps itemProps) {
        String wlId = "";
        String wlBankKey= "";
        if (release.getPassage() != null
                && release.getPassage().getResourceslist() != null
                && release.getPassage().getResourceslist().getResource() != null
                && release.getPassage().getResourceslist().getResource().size() == 1) {
            wlId = release.getPassage().getResourceslist().getResource().get(0).getId();
            wlBankKey = release.getPassage().getResourceslist().getResource().get(0).getBankkey();
        } else if (release.getItem() != null
                && release.getItem().getResourceslist() != null
                && release.getItem().getResourceslist().getResource() != null
                && release.getItem().getResourceslist().getResource().size() == 1) {
            wlId = release.getItem().getResourceslist().getResource().get(0).getId();
            wlBankKey = release.getItem().getResourceslist().getResource().get(0).getBankkey();

        }
        if (StringUtils.isNotBlank(wlId) && StringUtils.isNotBlank(wlBankKey)) {
            itemProps.setWordlistId(String.format("item-%s-%s", wlBankKey, wlId));
            String wordListDirName = itemProps.getWordlistId();
            if (itemDirName.startsWith("Item") || itemDirName.startsWith("Stim")) {
                wordListDirName = itemProps.getWordlistId().replace("item", "Item");
            }
            itemProps.setWordListDirName(wordListDirName);
        }
    }

    private static String getImportId(ID_TYPE idType, String itemId, String bankKey) {
        String importId = "";
        if (itemId == null) {
            return null;
        }

        if (ID_TYPE.ITEM.equals(idType)) {
            if (bankKey.equals(BANKKEY_200)) {
                importId = itemId;
            } else if (bankKey.equals(BANKKEY_187)) {
                importId = PREFIX_18 + StringUtils.leftPad(itemId, 4, "0");
            }
        } else if (ID_TYPE.STIMULUS.equals(idType)) {
            if (bankKey.equals(BANKKEY_200)) {
                importId = PREFIX_17 + StringUtils.leftPad(itemId, 4, "0");
            } else if (bankKey.equals(BANKKEY_187)) {
                importId = PREFIX_19 + StringUtils.leftPad(itemId, 4, "0");
            }
        }

        return importId;
    }

    private static String getIatHtqType(ItemRelease release) {
        String iatHtqType = "";
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                if (content.getStem().contains("interaction selectable")) {
                    iatHtqType = ItemConstants.ItemType.TYPE_HTQS;
                    break;
                } else {
                    iatHtqType = ItemConstants.ItemType.TYPE_HTQO;
                    break;
                }
            }
        }
        return iatHtqType;
    }

    public static Optional<Path> getWordListDirectory(final Path expandedImportZip, final ItemProps itemProps) {
        if(StringUtils.isBlank(itemProps.getWordListDirName())) {
            return Optional.empty();
        }

        String wordListDirectory = String.format("%s/%s",
                expandedImportZip,
                itemProps.getWordListDirName());
        File wordDir = new File(wordListDirectory);
        String caseDirectory;
        if (wordDir.exists() && wordDir.isDirectory()) {
            return Optional.of(wordDir.toPath());
        } else {
            // try with different capitalization on first letter
            if (Character.isUpperCase(itemProps.getWordListDirName().charAt(0))) {
                caseDirectory = itemProps.getWordListDirName().substring(0,1).toLowerCase() +
                        itemProps.getWordListDirName().substring(1);
            } else {
                caseDirectory = itemProps.getWordListDirName().substring(0,1).toUpperCase() +
                        itemProps.getWordListDirName().substring(1);
            }
            wordListDirectory = String.format("%s/%s", expandedImportZip, caseDirectory);
            wordDir = new File(wordListDirectory);
            if (wordDir.exists() && wordDir.isDirectory()) {
                return Optional.of(wordDir.toPath());
            }
        }

        return Optional.empty();
    }

    public static Optional<WordlistreleaseType> getWordListRelease(String wordListDirectory,
                                                         String wordListId,
                                                         AppAssembler appAssembler) {
        if(StringUtils.isBlank(wordListDirectory) || StringUtils.isBlank(wordListId)) {
            return Optional.empty();
        }

        String fileLocation = String.format("%s/%s.xml", wordListDirectory, wordListId);
        File wordListFile = new File(fileLocation);
        if (wordListFile.exists()) {
            return Optional.of(appAssembler.getSaaifAssembler()
                    .getWordListAssembler().readXmlFromFile(wordListFile.toPath()));
        }

        return Optional.empty();
    }

    public static Optional<SmarterAppMetadata> getSmarterAppMetadata(final AppAssembler appAssembler, final Path itemPath) {
        File metadataFile = MigrationFileUtil.findFileInPath(itemPath.toString(), "metadata.xml");

        if(metadataFile == null) {
            return Optional.empty();
        }

        return Optional.ofNullable(appAssembler.getSaaifAssembler().getMetadataAssembler().readXmlFromFile(metadataFile.toPath()));
    }
}
