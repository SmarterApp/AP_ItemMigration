package org.opentestsystem.ap.migration.contentupdater;

import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.content.EbsrItemContent;

import java.util.List;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemLanguage.LANG_ESN;

/**
 * Ebsr Content Updater
 */
public class EbsrContentUpdater extends AbstractContentUpdater<EbsrItem> {

    @Override
    protected boolean updateEnglishContent(EbsrItem item, ContentUpdateCommand updateCommand) {
        boolean isContentChanged;
        EbsrItemContent content = item.getCore().getEn();

        ContentUpdateCommandResult commandResult = updateCommand.applyEnglishContentUpdate(content.getPrompt());
        content.setPrompt(commandResult.getUpdatedContent());
        isContentChanged = commandResult.isContentChanged();

        commandResult = updateCommand.applyEnglishContentUpdate(content.getPartAPrompt());
        content.setPartAPrompt(commandResult.getUpdatedContent());
        isContentChanged = isContentChanged || commandResult.isContentChanged();

        commandResult = updateCommand.applyEnglishContentUpdate(content.getPartBPrompt());
        content.setPartBPrompt(commandResult.getUpdatedContent());
        isContentChanged = isContentChanged || commandResult.isContentChanged();

        boolean isPartAChanged = applyContentUpdateToOptions(content.getPartAOptions(), updateCommand);
        isContentChanged = isContentChanged || isPartAChanged;

        boolean isPartBChanged = applyContentUpdateToOptions(content.getPartBOptions(), updateCommand);
        isContentChanged = isContentChanged || isPartBChanged;

        return isContentChanged;
    }

    @Override
    protected boolean updateSpanishContent(EbsrItem item, ContentUpdateCommand updateCommand) {
        boolean isContentChanged;
        EbsrItemContent english = item.getCore().getEn();
        EbsrItemContent spanish = item.getTranslations().getEsp();

        ContentUpdateCommandResult commandResult = updateCommand.applyTranslatedContentUpdate(
                LANG_ESN, spanish.getPrompt(), english.getPrompt());
        spanish.setPrompt(commandResult.getUpdatedContent());
        isContentChanged = commandResult.isContentChanged();

        commandResult = updateCommand.applyTranslatedContentUpdate(
                LANG_ESN, spanish.getPartAPrompt(), english.getPartAPrompt());
        spanish.setPartAPrompt(commandResult.getUpdatedContent());
        isContentChanged = isContentChanged || commandResult.isContentChanged();

        commandResult = updateCommand.applyTranslatedContentUpdate(
                LANG_ESN, spanish.getPartBPrompt(), english.getPartBPrompt());
        spanish.setPartBPrompt(commandResult.getUpdatedContent());
        isContentChanged = isContentChanged || commandResult.isContentChanged();

        boolean partAOptionsChanged = this.updateSpanishItemOptions(spanish.getPartAOptions(), english.getPartAOptions(), updateCommand);
        isContentChanged = isContentChanged || partAOptionsChanged;

        boolean partBOptionsChanged =this.updateSpanishItemOptions(spanish.getPartBOptions(), english.getPartBOptions(), updateCommand);
        isContentChanged = isContentChanged || partBOptionsChanged;

        return isContentChanged;
    }

    protected boolean applyContentUpdateToOptions(List<ItemOption> options, ContentUpdateCommand updateCommand) {
        boolean isContentChanged = false;
        for (ItemOption itemOption : options) {
            ContentUpdateCommandResult commandResult = updateCommand.applyEnglishContentUpdate(itemOption.getRationale());
            itemOption.setRationale(commandResult.getUpdatedContent());
            isContentChanged = isContentChanged || commandResult.isContentChanged();

            commandResult = updateCommand.applyEnglishContentUpdate(itemOption.getText());
            itemOption.setText(commandResult.getUpdatedContent());
            isContentChanged = isContentChanged || commandResult.isContentChanged();
        }
        return isContentChanged;
    }


}
