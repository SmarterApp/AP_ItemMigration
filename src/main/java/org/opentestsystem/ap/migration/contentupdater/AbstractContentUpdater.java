package org.opentestsystem.ap.migration.contentupdater;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.Table;

import java.util.List;
import java.util.Objects;

import static java.util.Collections.emptyList;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemLanguage.LANG_ESN;

public abstract class AbstractContentUpdater<T extends Item> implements ContentUpdater<T> {

    protected static final boolean LABELS_ONLY = true;

    protected abstract void updateEnglishContent(T item, ContentUpdateCommand contentUpdateCommand);

    protected abstract void updateSpanishContent(T item, ContentUpdateCommand contentUpdateCommand);

    @Override
    public void updateContent(T item, ContentUpdateCommand contentUpdateCommand) {
        updateEnglishContent(item, contentUpdateCommand);
        updateSpanishContent(item, contentUpdateCommand);
    }

    protected void updateSpanishItemOptions(List<ItemOption> spanishOptions,
                                            List<ItemOption> englishOptions,
                                            ContentUpdateCommand updateCommand) {
        for (int i = 0; i < spanishOptions.size(); ++i) {
            ItemOption english = this.indexOf(englishOptions, i);
            ItemOption spanish = spanishOptions.get(i);
            spanish.setRationale(
                updateCommand.applyTranslatedContentUpdate(
                    LANG_ESN,
                    spanish.getRationale(),
                    Objects.nonNull(english) ? english.getRationale() : StringUtils.EMPTY));
            spanish.setText(
                updateCommand.applyTranslatedContentUpdate(
                    LANG_ESN, spanish.getText(),
                    Objects.nonNull(english) ? english.getText() : StringUtils.EMPTY));
        }
    }

    protected void updateEnglishTable(Table table, ContentUpdateCommand updateCommand, boolean labelsOnly) {
        table.getColumns().forEach(column ->
            column.setLabel(updateCommand.applyEnglishContentUpdate(column.getLabel())));

        table.getRows().forEach(row -> {
            row.getCells().forEach(cell -> {
                if (!labelsOnly || cell.isLabel()) {
                    cell.setValue(updateCommand.applyEnglishContentUpdate((String) cell.getValue()));
                }
            });
        });
    }

    protected void updateSpanishTableColumns(List<Table.Column> spanishColumns,
                                             List<Table.Column> englishColumns,
                                             ContentUpdateCommand updateCommand) {
        for (int i = 0; i < spanishColumns.size(); ++i) {
            Table.Column spanishColumn = spanishColumns.get(i);
            Table.Column englishColumn = this.indexOf(englishColumns, i);
            spanishColumn.setLabel(
                updateCommand.applyTranslatedContentUpdate(
                    LANG_ESN,
                    spanishColumn.getLabel(),
                    Objects.nonNull(englishColumn) ? englishColumn.getLabel() : StringUtils.EMPTY));

        }
    }

    protected void updateSpanishTableRows(List<Table.Row> spanishRows,
                                          List<Table.Row> englishRows,
                                          ContentUpdateCommand updateCommand,
                                          boolean labelsOnly) {
        for (int i = 0; i < spanishRows.size(); ++i) {
            Table.Row spanishRow = spanishRows.get(i);
            Table.Row englishRow = this.indexOf(englishRows, i);

            List<Table.Cell> spanishCells = Objects.nonNull(spanishRow) ? spanishRow.getCells() : emptyList();
            List<Table.Cell> englishCells = Objects.nonNull(englishRow) ? englishRow.getCells() : emptyList();

            this.updateSpanishTableCells(spanishCells, englishCells, updateCommand, labelsOnly);
        }
    }

    protected void updateSpanishTableCells(List<Table.Cell> spanishCells,
                                           List<Table.Cell> englishCells,
                                           ContentUpdateCommand updateCommand,
                                           boolean labelsOnly) {
        for (int i = 0; i < spanishCells.size(); ++i) {
            Table.Cell spanishCell = spanishCells.get(i);
            if (Objects.nonNull(spanishCell) && (!labelsOnly || spanishCell.isLabel())) {
                Table.Cell englishCell = this.indexOf(englishCells, i);
                spanishCell.setValue(
                    updateCommand.applyTranslatedContentUpdate(
                        LANG_ESN,
                        (String) spanishCell.getValue(),
                        Objects.nonNull(englishCell) ? (String) englishCell.getValue() : StringUtils.EMPTY));
            }
        }
    }

    protected void updateSpanishListOfStrings(List<String> spanishList,
                                              List<String> englishList,
                                              ContentUpdateCommand updateCommand) {
        for (int i = 0; i < spanishList.size(); ++i) {
            String spanish = spanishList.get(i);
            String english = this.indexOf(englishList, i);
            spanishList.set(i, updateCommand.applyTranslatedContentUpdate(LANG_ESN, spanish, english));
        }
    }

    protected <R> R indexOf(List<R> list, int i) {
        return (Objects.nonNull(list) && i < list.size()) ? list.get(i) : null;
    }
}
