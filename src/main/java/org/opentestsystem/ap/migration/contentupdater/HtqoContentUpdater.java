package org.opentestsystem.ap.migration.contentupdater;

import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.content.HtqoItemContent;

import java.util.ArrayList;
import java.util.List;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemLanguage.LANG_ESN;

public class HtqoContentUpdater extends AbstractContentUpdater<HtqoItem> {

    @Override
    protected boolean updateEnglishContent(HtqoItem item, ContentUpdateCommand updateCommand) {
        boolean isContentChanged;
        HtqoItemContent englishContent = item.getCore().getEn();

        ContentUpdateCommandResult commandResult = updateCommand.applyEnglishContentUpdate(englishContent.getPrompt());
        englishContent.setPrompt(commandResult.getUpdatedContent());
        isContentChanged = commandResult.isContentChanged();

        for (int i = 0; i < englishContent.getHtqOrderable().getOrderableStrings().size(); ++i) {
            String orderableValue = englishContent.getHtqOrderable().getOrderableStrings().get(i);
            commandResult = updateCommand.applyEnglishContentUpdate(orderableValue);
            englishContent.getHtqOrderable().getOrderableStrings().set(i, commandResult.getUpdatedContent());
            isContentChanged = isContentChanged || commandResult.isContentChanged();
        }

        commandResult = updateCommand.applyEnglishContentUpdate(item.getCore().getScoring().getRubric());
        item.getCore().getScoring().setRubric(commandResult.getUpdatedContent());
        isContentChanged = isContentChanged || commandResult.isContentChanged();

        return isContentChanged;
    }

    @Override
    protected boolean updateSpanishContent(HtqoItem item, ContentUpdateCommand updateCommand) {
        boolean isContentChanged;
        HtqoItemContent englishContent = item.getCore().getEn();
        HtqoItemContent spanishContent = item.getTranslations().getEsp();

        ContentUpdateCommandResult commandResult = updateCommand.applyTranslatedContentUpdate(
                LANG_ESN,
                spanishContent.getPrompt(),
                englishContent.getPrompt()
        );
        spanishContent.setPrompt(commandResult.getUpdatedContent());
        isContentChanged = commandResult.isContentChanged();

        boolean spanishOrderablesChanged = updateSpanishOrderables(
                spanishContent.getHtqOrderable().getOrderableStrings(),
                englishContent.getHtqOrderable().getOrderableStrings(),
                updateCommand);
        isContentChanged = isContentChanged || spanishOrderablesChanged;

        return isContentChanged;
    }

    private boolean updateSpanishOrderables(List<String> spanishOrderables,
                                         List<String> englishOrderables,
                                         ContentUpdateCommand updateCommand) {
        boolean isContentChanged = false;
        ContentUpdateCommandResult commandResult;
        for (int i = 0; i < spanishOrderables.size(); ++i) {
            String english = this.indexOf(englishOrderables, i);
            String spanish = spanishOrderables.get(i);

            commandResult = updateCommand.applyTranslatedContentUpdate(LANG_ESN, spanish, english);
            spanishOrderables.set(i, commandResult.getUpdatedContent());
            isContentChanged = isContentChanged || commandResult.isContentChanged();
        }
        return isContentChanged;
    }
}
