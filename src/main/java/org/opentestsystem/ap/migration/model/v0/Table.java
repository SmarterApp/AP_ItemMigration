package org.opentestsystem.ap.migration.model.v0;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

import static java.lang.Boolean.FALSE;
import static java.lang.Boolean.TRUE;
import static java.lang.String.format;
import static java.util.Collections.emptyList;
import static java.util.stream.Collectors.toList;
import static java.util.stream.IntStream.range;
import static org.apache.commons.lang.StringUtils.EMPTY;
import static org.apache.commons.lang3.StringUtils.isNotEmpty;
import static org.opentestsystem.ap.common.mapper.SaaifMapper.STACKED_TRANSLATION_SEPARATOR;
import static org.opentestsystem.ap.migration.model.v0.ItemConstants.CellSaaifValueType.CELL_SAAIF_VALUE_TYPE_NUMERIC;
import static org.opentestsystem.ap.migration.model.v0.ItemConstants.CellSaaifValueType.CELL_SAAIF_VALUE_TYPE_TEXT;
import static org.opentestsystem.ap.migration.model.v0.ItemConstants.CellType.CELL_TYPE_ANSWER;
import static org.opentestsystem.ap.migration.model.v0.ItemConstants.CellType.CELL_TYPE_ANSWER_NUMERIC;
import static org.opentestsystem.ap.migration.model.v0.ItemConstants.CellType.CELL_TYPE_LABEL;

/**
 * Represents a table with a title, list of columns, and a list of rows.
 */
@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class Table {

    private String title = EMPTY;

    private List<Column> columns = new ArrayList<>(0);

    private List<Row> rows = new ArrayList<>(0);

    @JsonIgnore
    private TableMetadata metadata = new TableMetadata();

    public Table() {
    }

    public static Table newTiTable() {
        final Table table = new Table();
        table.initializeTiTable();
        return table;
    }

    public static Table newMiTable() {
        final Table table = new Table();
        table.initializeMiTable();
        return table;
    }

    public Table combineTables(Table otherTable) {
        Table result = new Table();

        result.setTitle(format("%s\r\n%s\r\n%s\r\n",
            (isNotEmpty(otherTable.getTitle()) ? otherTable.getTitle() : EMPTY),
            STACKED_TRANSLATION_SEPARATOR,
            (isNotEmpty(this.getTitle()) ? this.getTitle() : EMPTY)));

        result.setColumns(range(0, this.getColumns().size()).mapToObj(x ->
            new Column(format("%s\r\n%s\r\n%s\r\n",
                (otherTable.columns.size() > x ? otherTable.columns.get(x).getLabel() : EMPTY),
                STACKED_TRANSLATION_SEPARATOR,
                this.getColumns().get(x).getLabel()))
        ).collect(toList()));

        result.setRows(range(0, this.getRows().size()).mapToObj(x -> {
            Row row = new Row();

            row.setCells(range(0, this.getRows().get(x).getCells().size()).mapToObj(y -> {
                Cell baseCell = this.getRows().get(x).getCells().get(y);
                return new Cell<>(baseCell.getType(),
                    (baseCell.getValue() instanceof String ?
                        format("%s\r\n%s\r\n%s\r\n",
                            (otherTable.getRows().size() > x
                                && otherTable.getRows().get(x).getCells().size() > y ? otherTable.getRows().get(x).getCells().get(y).getValue() : EMPTY),
                            STACKED_TRANSLATION_SEPARATOR,
                            baseCell.getValue())  : baseCell.getValue()));

            }).collect(toList()));

            return row;
        }).collect(toList()));

        result.setMetadata(this.getMetadata());

        return result;
    }

    private void initializeTiTable() {
        // column 1
        columns.add(Column.newColumn());
        // column 2
        columns.add(Column.newColumn());

        // row 1
        rows.add(Row.newRow());
        // row 2
        rows.add(Row.newRow());
        // row 3
        rows.add(Row.newRow());
        // row 4
        rows.add(Row.newRow());
    }

    private void initializeMiTable() {
        // column 1
        columns.add(Column.newColumn());
        // column 2
        columns.add(Column.newColumn());

        // row 1
        rows.add(new Row(Cell.newCell(), Cell.newAnswerCell()));
        // row 2
        rows.add(new Row(Cell.newCell(), Cell.newAnswerCell()));
        // row 3
        rows.add(new Row(Cell.newCell(), Cell.newAnswerCell()));
        // row 4
        rows.add(new Row(Cell.newCell(), Cell.newAnswerCell()));
    }

    public void setColumns(final List<Column> columns) {
        this.columns = new ArrayList<>(0);
        if (columns != null) {
            this.columns = columns;
        }
    }

    public void setRows(final List<Row> rows) {
        if (rows != null) {
            this.rows = rows;
        } else {
            this.rows = new ArrayList<>(0);
        }
    }

    public static Table newTable(final Table src) {
        final Table copy = new Table();
        copy.setTitle(src.getTitle());
        copy.setColumns(Column.newColumns(src.getColumns()));
        copy.setRows(Row.newRows(src.getRows()));
        copy.setMetadata(TableMetadata.newTableMetadata(src.getMetadata()));
        return copy;
    }

    /**
     * Represents a column in a table.
     */
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class Column {

        @Getter
        @Setter
        private String label;

        @JsonCreator
        public Column(@JsonProperty("label") final String label) {
            this.label = label;
        }

        public static Column newColumn(final Column src) {
            return new Column(src.getLabel());
        }

        public static List<Column> newColumns(final List<Column> src) {
            return src != null ? src.stream().map(Column::newColumn).collect(toList()) : emptyList();
        }

        static Column newColumn() {
            return new Column(EMPTY);
        }
    }

    /**
     * Represents a row in a table.  A row has a list of cells.
     */
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class Row {

        @Getter
        private final List<Cell> cells = new ArrayList<>(0);

        public Row() {
        }

        public Row(Cell cell1, Cell cell2) {
            if (cells != null) {
                this.cells.add(cell1);
                this.cells.add(cell2);
            }
        }

        public void setCells(final List<Cell> cells) {
            this.cells.clear();
            if (cells != null) {
                this.cells.addAll(cells);
            }
        }

        public void addCell(final Cell cell) {
            if (cell != null) {
                cells.add(cell);
            }
        }

        public static Row newRow(final Row src) {
            final Row copy = new Row();
            if (src.getCells() != null) {
                copy.setCells(src.getCells().stream().map(Cell::newCell).collect(toList()));
            }
            return copy;
        }

        public static List<Row> newRows(final List<Row> src) {
            return src != null ? src.stream().map(Row::newRow).collect(toList()) : emptyList();
        }

        static Row newRow() {
            return new Row(Cell.newCell(), Cell.newCell());
        }
    }

    /**
     * Represents a cell in a table.
     */
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class Cell<T> {

        @Getter
        @Setter
        private String type;

        @Getter
        @Setter
        private T value;

        @JsonCreator
        public Cell(@JsonProperty("type") final String type,
                    @JsonProperty("value") final T value) {
            this.type = type;
            this.value = value;
        }

        @JsonIgnore
        public boolean isAnswer() {
            return CELL_TYPE_ANSWER.equalsIgnoreCase(type);
        }

        @JsonIgnore
        public boolean isCorrectAnswer() {
            return isAnswer() && TRUE.equals(value);
        }

        @JsonIgnore
        public String getSaaifValueType() {
            return CELL_TYPE_ANSWER_NUMERIC.equalsIgnoreCase(type) ?
                CELL_SAAIF_VALUE_TYPE_NUMERIC : CELL_SAAIF_VALUE_TYPE_TEXT;
        }

        public static Cell newCell(Cell src) {
            return new Cell(src.type, src.value);
        }

        static Cell<String> newCell() {
            return new Cell<>(CELL_TYPE_LABEL, EMPTY);
        }

        static Cell<Boolean> newAnswerCell() {
            return new Cell<>(CELL_TYPE_ANSWER, FALSE);
        }
    }

    /**
     * Table data used when generating the HTML for the Item.
     */
    @Data
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class TableMetadata {

        private List<Float> colWidths = new ArrayList<>(0);

        public Float getTotalWidth() {
            return colWidths.stream().reduce(0F, (a, b) -> a + b);
        }

        public void setColWidths(final List<Float> colWidths) {
            this.colWidths.clear();

            if (colWidths != null) {
                this.colWidths.addAll(colWidths);
            }
        }

        public void addColWidth(final Float width) {
            colWidths.add(width);
        }

        public static TableMetadata newTableMetadata(final TableMetadata src) {
            final TableMetadata copy = new TableMetadata();
            copy.setColWidths(src.getColWidths());
            return copy;
        }
    }
}
