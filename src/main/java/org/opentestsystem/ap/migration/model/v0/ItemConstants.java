/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.migration.model.v0;

import lombok.Getter;

import static org.apache.commons.lang3.StringUtils.EMPTY;

/**
 * Constants used in the entity model.
 */
public interface ItemConstants {

    String RUBRIC_NAME_PATTERN = "Rubric %s";
    String RUBRIC_SAMPLE_NAME_PATTERN = "%s-point Answer";

    String EXEMPLAR_RESPONSE = "ExemplarResponse";
    String EXEMPLAR_PURPOSE = "Exemplar";
    String EXEMPLAR_PURPOSE_OTHER = "OtherExemplar";
    String EXEMPLAR_SCOREPOINT_ZERO = "0";
    String EXEMPLAR_SCOREPOINT_EMPTY = EMPTY;
    String UNDETERMINED = "undetermined";

    @Getter
    enum ItemAttribute {
        ItemId("itm_item_id", "Item: ITS ID"),
        ItemFormat("itm_att_Item Format", "Item: Item Format"),
        ItemAnswerKey("itm_att_Answer Key", "Item: Answer Key"),
        ItemAnswerKeyII("itm_att_Answer Key (Part II)", "Item: Answer Key (Part II)"),
        ItemMaxChoices("itm_att_Max Choices", "Item:Max Choices"),
        ItemMaxChoicesII("itm_att_Max Choices (Part II)", "Item:Max Choices (Part II)"),
        ItemPageLayout("itm_att_Page Layout", "Item: Page Layout"),
        ItemResponseType("itm_att_Response Type", "Item: Response Type"),
        StimPassId("stm_pass_id", "Stim: ITS ID"),
        StimPassSubject("stm_pass_subject", "Stim: Subject"),
        StimPassDesc("stm_pass_desc", "Stim: Description");

        private String attId;

        private String name;

        ItemAttribute(String attId, String name) {
            this.attId = attId;
            this.name = name;
        }
    }

    /**
     * The SAAIF item formats.
     */
    interface ItemType {

        String TYPE_SA = "sa";
        String TYPE_WER = "wer";
        String TYPE_STIM = "stim";
        String TYPE_MC = "mc";
        String TYPE_MI = "mi";
        String TYPE_MS = "ms";
        String TYPE_TUT = "tut";
        String TYPE_EBSR = "ebsr";
        String TYPE_TI = "ti";
        String TYPE_EQ = "eq";
        String TYPE_HTQO = "htqo";
        String TYPE_HTQS = "htqs";
        String TYPE_GI = "gi";
    }

    interface HtqType {
        String TYPE_SELECTABLE = "selectable";
        String TYPE_ORDERABLE = "orderable";
    }

    interface MetadataType {

        String METADATA_TYPE_STIM = "Stimulus";
    }

    interface EbsrPartBType {
        String MULTIPLE_CHOICE = "Multiple Choice";
        String MULTIPLE_SELECT = "Multiple Select";
    }

    /**
     * The SAAIF versions.
     */
    interface ItemVersion {

        String ITEM_RELEASE_VERSION = "2.0";
        String ITEM_VERSION = "11";
        String STIM_VERSION = "28";
        String CONTENT_VERSION = "2.0";
    }

    /**
     * The languages supported by SAAIF.
     */
    interface ItemLanguage {

        String LANG_ENU = "ENU";
        String LANG_ESN = "ESN";
    }

    interface MetadataLanguage {

        String LANG_ENG = "eng";
        String LANG_SPA = "spa";
    }

    interface SecurityStatus {

        String NON_SECURE = "Non-secure";
    }

    interface ItemSpecFormat {

        String SMARTER_APP = "SmarterApp";
    }

    interface QtiSpec {

        String ITEM_BODY = "itemBody";
    }

    interface BrailleType {

        String BRAILLE_TYPE_BRF = "BRF";
        String BRAILLE_TYPE_PRN = "PRN";
    }

    interface AslType {

        String ASL_TYPE_MP4 = "mp4";
        String ASL_TYPE_WEBM = "webm";
    }

    interface CellType {

        String CELL_TYPE_LABEL = "label";
        String CELL_TYPE_ANSWER = "answer";
        String CELL_TYPE_ANSWER_NUMERIC = "answerNumeric";
    }

    interface CellSaaifValueType {

        String CELL_SAAIF_VALUE_TYPE_TEXT = "alphaNumericOnly";
        String CELL_SAAIF_VALUE_TYPE_NUMERIC = "numericOnly";
    }

    interface Section {

        String SECTION_CREATE = "create";
        String SECTION_CORE = "core";
        String SECTION_BRAILLE = "braille";
        String SECTION_ASL = "asl";
        String SECTION_CC = "cc";
        String SECTION_IMAGES = "images";
        String SECTION_AUDIO = "audio";
        String SECTION_TRANSLATIONS = "translations";
        String SECTION_WORKFLOW = "workflow";
    }

    interface AttachmentType {

        String GENERAL_ATTACHMENTS = "general-attachments";
    }

    @Getter
    enum EqEditorConfigName {
        NumpadOnly("Numpad only", "Basic"),
        NumpadOnlyWithNegative("Numpad only with negative", "Basic"),
        NumpadOnlyWithFraction("Numpad only with fraction", "Basic"),
        Grades3And4("Grades 3 & 4", "SBAC3"),
        Grade5("Grade 5", "SBAC5"),
        Grade6("Grade 6", "SBAC6"),
        Grade7("Grade 7", "SBAC7"),
        Grade8("Grade 8", "SBAC8"),
        HighSchool("High school", "SBAC11");

        private String label;

        private String saaifEqTabConfig;

        EqEditorConfigName(final String label, final String saaifEqTabConfig) {
            this.label = label;
            this.saaifEqTabConfig = saaifEqTabConfig;
        }
    }

    interface FileNames {
        String FILE_NAME_GI_CONTENT_ZIP = "gi-content.zip";
    }
}
