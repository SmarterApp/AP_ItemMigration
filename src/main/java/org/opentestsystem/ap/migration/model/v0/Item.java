package org.opentestsystem.ap.migration.model.v0;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import org.opentestsystem.ap.migration.model.v0.content.ItemContent;

/**
 * The base all item types implement.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonPropertyOrder({"id", "type", "core", "asl", "braille", "cc", "images", "audio", "translation", "workflow"})
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "type")
@JsonSubTypes({
        @JsonSubTypes.Type(value = SaItem.class, name = "sa"),
        @JsonSubTypes.Type(value = WerItem.class, name = "wer"),
        @JsonSubTypes.Type(value = StimItem.class, name = "stim"),
        @JsonSubTypes.Type(value = McItem.class, name = "mc"),
        @JsonSubTypes.Type(value = MiItem.class, name = "mi"),
        @JsonSubTypes.Type(value = MsItem.class, name = "ms"),
        @JsonSubTypes.Type(value = TutItem.class, name = "tut"),
        @JsonSubTypes.Type(value = EbsrItem.class, name = "ebsr"),
        @JsonSubTypes.Type(value = TiItem.class, name = "ti"),
        @JsonSubTypes.Type(value = EqItem.class, name = "eq"),
        @JsonSubTypes.Type(value = HtqoItem.class, name = "htqo"),
        @JsonSubTypes.Type(value = HtqsItem.class, name = "htqs"),
        @JsonSubTypes.Type(value = GiItem.class, name = "gi")
})
public interface Item<T extends ItemCore, S extends ItemContent> {

    String getId();

    String getType();

    T getCore();

    void setCore(final T core);

    Asl getAsl();

    void setAsl(final Asl asl);

    Braille getBraille();

    void setBraille(final Braille braille);

    Cc getCc();

    void setCc(final Cc cc);

    Images getImages();

    void setImages(final Images images);

    Audio getAudio();

    void setAudio(final Audio audio);

    boolean supportsEax();

    Translations<S> getTranslations();

    void setTranslations(final Translations<S> translations);

    Workflow getWorkflow();

    void setWorkflow(final Workflow workflow);

    @JsonIgnore
    String getMetadataType();

}
