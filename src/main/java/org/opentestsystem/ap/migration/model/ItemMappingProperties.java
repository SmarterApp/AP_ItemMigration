package org.opentestsystem.ap.migration.model;

import lombok.Data;
import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.List;

import static org.opentestsystem.ap.common.model.ItemConstants.UNDETERMINED;

@Data
@NoArgsConstructor
public class ItemMappingProperties {

    public ItemMappingProperties(Integer audioSourceCount, Integer imageSourceCount) {
        this.audioSourceCount = audioSourceCount;
        this.imageSourceCount = imageSourceCount;
    }

    // TODO: refactor this class into Base and individual item result models

    private String content;

    private String associatedPassage = "";

    private String tutorialId = "";

    private Integer audioSourceCount = 0;

    private Integer imageSourceCount = 0;

    private List<IatAudio> audioSources = new ArrayList<>();

    private List<IatImage> imageSources = new ArrayList<>();

    private List<String> fileSources = new ArrayList<>();

    // Used in EbsrModelMapper
    private String partAPrompt = "";
    private List<String> partAOptions = new ArrayList<>();
    private List<String> partACorrectValues = new ArrayList<>();

    private String partBPrompt = "";
    private List<String> partBOptions = new ArrayList<>();
    private List<String> partBCorrectValues = new ArrayList<>();

    // Used in HtqsModelMapper
    private String interactiveText = "";

    // Used in HtqsModelMapper
    private List<String> orderableStrings = new ArrayList<>();
    private List<Integer> orderableStringsCorrectOrder = new ArrayList<>();

    // Used in MiModelMapper
    private List<String> cells = new ArrayList<>();
    private List<String> headers = new ArrayList<>();
    private List<String> correctResponses = new ArrayList<>();

    // Used in TiModelMapper
    private List<Object> rows = new ArrayList<>();

    // Text to Speech (TTS)
    private String visualTTSRequired = UNDETERMINED;
    private boolean visualTTSProvided = false;
    private boolean sightTTSProvided = false;

    public Integer incrementAndGetImageSourceCount() {
        this.imageSourceCount = this.imageSourceCount + 1;
        return this.imageSourceCount;
    }

    /**
     * If the boolean flags sightTTSProvided and visuallTTSProvided are set to true they are not reset to false when
     * calling this method.  The visualTTSRequired string is only set if it is 'undetermined'.
     *
     * @param tts
     * @param ttsAlt
     */
    public void setTextToSpeechFlagsIfNotAlreadySet(String tts, String ttsAlt) {
        // don't reset to false
        this.sightTTSProvided = this.sightTTSProvided || StringUtils.isNotBlank(tts);
        this.visualTTSProvided = this.visualTTSProvided || StringUtils.isNotBlank(ttsAlt);

        // only set if undetermined
        if (UNDETERMINED.equalsIgnoreCase(this.visualTTSRequired)) {
            this.visualTTSRequired = StringUtils.isNotBlank(ttsAlt) ? "true" : UNDETERMINED;
        }
    }
}
