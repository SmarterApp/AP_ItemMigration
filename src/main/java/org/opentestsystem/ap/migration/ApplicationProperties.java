package org.opentestsystem.ap.migration;

import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.NestedConfigurationProperty;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO;

@Getter
@Setter
@Component
@ConfigurationProperties(prefix = "migration")
public class ApplicationProperties {

    /**
     * True if the migration service should run.
     */
    private boolean migrationsEnabled = false;


    private boolean syncFromGitlabEnabled = false;

    private boolean attachmentManagementEnabled = false;

    /**
     * Item IDs that should be included when running the migration service.
     */
    private List<String> includedItems = new ArrayList<>();

    /**
     * Item IDs that should not be deleted when running the deletion service.
     */
    private List<String> doNotDeleteItems = new ArrayList<>();

    /**
     * The key to the map is the system version.  Each system version has an ordered list of migrations.
     */
    @NestedConfigurationProperty
    private List<MigrationSet> migrationSets = new ArrayList<>();

    /**
     * The key to the map is the system version.  Each system version has an ordered list of migrations.
     */
    private List<MigrationSet> dataStoreSets = new ArrayList<>();

    /**
     * Location where report templates are kept.
     */
    private String reportTemplateFolder = "/report_templates";

    /**
     * The system username.
     */
    private String systemUsername = "item-migration@smarterbalanced.org";

    /**
     * The system user full name.
     */
    private String systemFullname = "Item Migration";

    /**
     * The commit message used when committing a migration report.
     */
    private String migrationReportCommitMessage = "Adding migration report";


    /**
     * The system user used when making data changes.
     */
    public ItemBankSystemUser getSystemUser() {
        return new ItemBankSystemUser(systemUsername, systemFullname);
    }

    /**
     * True if the report should be published to the git repo ItemBankReport.
     */
    private boolean publishReportEnabled = true;

    /**
     * The name of the production user where legacy items are stored in GitLab.  Used when downloading legacy items from
     * production.  This is specific to the GitLab instance.
     */
    private String itemBankNamespace = "itemreviewapp";

    /**
     * True if the download component is enabled.  If true the download component will run when the app starts.
     */
    private boolean downloadItemsEnabled = false;

    /**
     * The number of threads to use when processing asynchronously.
     */
    private int numberOfThreads = 10;

    @NestedConfigurationProperty
    private DataStoreProperties dataStoreMigrations = new DataStoreProperties();

    @Getter
    @Setter
    public static class DataStoreProperties {

        private boolean enabled = false;

        /**
         * The key to the map is the system version.  Each system version has an ordered list of migrations.
         */
        private List<MigrationSet> migrationSets = new ArrayList<>();
    }

    @Data
    @NoArgsConstructor
    public static class MigrationSet {

        /**
         * Must match the iat release format:  iat-20, iat-21, etc.  An item is asked for its current version.  That
         * value is used to check which migration the item needs next.  If the item is version iat-15 and there is a
         * migration for set for iat-16 then that item will have the iat-16 migration set run against it.
         */
        private String migrationSetKey;

        /**
         * {@code true} if the migration should not run against an item that has edits.
         */
        private boolean ignoreImportedItemsWithEdits = false;

        @NestedConfigurationProperty
        private List<MigrationDefinition> migrationDefinitions = new ArrayList<>();

        public MigrationSet(String migrationSetKey) {
            this.migrationSetKey = migrationSetKey;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            MigrationSet that = (MigrationSet) o;
            return migrationSetKey != null ? migrationSetKey
                .equals(that.migrationSetKey) : that.migrationSetKey == null;
        }

        @Override
        public int hashCode() {
            int result = super.hashCode();
            result = 31 * result + (migrationSetKey != null ? migrationSetKey.hashCode() : 0);
            return result;
        }
    }

    /**
     * Defines a migration.  The description is used when committing the changes from the migration.
     */
    @Data
    @NoArgsConstructor
    public static class MigrationDefinition {

        /**
         * Must match the bean name of a migration implementation.
         */
        private String migrationName;

        /**
         * The commit message used when committing against GitLab.
         */
        private String migrationDescription;

        /**
         * True if the migration results in pushing the changes downstream.  The last committed master record is used to
         * push the changes down stream.  Branch edits do not get pushed downstream.  All migrations by default get
         * pushed downstream.
         */
        private boolean broadcast = true;

        private Collection<String> itemsToMigration = new ArrayList<>();

        /**
         * True if the migration should migrateAndSave active branches (branches where being edited equals true).  False
         * if only the master branch requires migration.
         */
        private boolean migrateBranches = false;

        private boolean requiresImportFiles = false;

        private boolean onlySyncToGitlab = false;

        public MigrationDefinition(final String migrationName, final String migrationDescription) {
            this.migrationName = migrationName;
            this.migrationDescription = migrationDescription;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            MigrationDefinition that = (MigrationDefinition) o;
            return migrationName.equalsIgnoreCase(that.migrationName);
        }

        @Override
        public int hashCode() {
            int result = super.hashCode();
            result = 31 * result + migrationName.toUpperCase().hashCode();
            return result;
        }
    }


    @NestedConfigurationProperty
    private List<AttachmentItem> attachmentItems = new ArrayList<>(INTEGER_ZERO);

    @Data
    @NoArgsConstructor
    public static class AttachmentItem {

        private String itemId;

        private String branch;

    }
}
