package org.opentestsystem.ap.migration;

import freemarker.template.Configuration;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitClientFactory;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.BrokerConfig;
import org.opentestsystem.ap.common.config.DatabaseConfiguration;
import org.opentestsystem.ap.common.config.FreemarkerConfig;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.config.ItemManagerProducerConfiguration;
import org.opentestsystem.ap.common.config.RedisSessionConfig;
import org.opentestsystem.ap.common.config.SessionConfig;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.itembank.EquationEditorRepository;
import org.opentestsystem.ap.common.itembank.IdGenerator;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.model.JsonModelAssembler;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.repository.RepositoryDependencyProvider;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.StringAssembler;
import org.opentestsystem.ap.common.saaif.item.AssociatedStimulusSupplier;
import org.opentestsystem.ap.common.saaif.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.common.security.SecurityUtil;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.ap.common.util.WirisImageGenerator;
import org.opentestsystem.ap.migration.gitlab.GitLabApiClient;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;

@Slf4j
@org.springframework.context.annotation.Configuration
@Import({
    StatusConfiguration.class,
    DatabaseConfiguration.class,
    BrokerConfig.class,
    FreemarkerConfig.class,
    ItemManagerProducerConfiguration.class,
    RedisSessionConfig.class,
    SessionConfig.class
})
@EnableConfigurationProperties({ItemBankProperties.class})
public class ItemMigrationConfiguration {

    private final ApplicationProperties applicationProperties;

    private final ItemBankProperties itemBankProperties;

    private final RestTemplateBuilder restTemplateBuilder;

    private final RabbitTemplate rabbitTemplate;

    private final freemarker.template.Configuration freemarker;

    private final IdGenerator itemIdGenerator;

    private final DataStoreDataManager dataStoreDataManager;

    private final DataStoreAttachmentManager dataStoreAttachmentManager;

    private final DataStoreUtility dataStoreUtility;

    public ItemMigrationConfiguration(ApplicationProperties applicationProperties,
                                      ItemBankProperties itemBankProperties,
                                      RestTemplateBuilder restTemplateBuilder,
                                      RabbitTemplate rabbitTemplate,
                                      Configuration freemarker,
                                      IdGenerator itemIdGenerator,
                                      DataStoreDataManager dataStoreDataManager,
                                      DataStoreAttachmentManager dataStoreAttachmentManager,
                                      DataStoreUtility dataStoreUtility) {
        this.applicationProperties = applicationProperties;
        this.itemBankProperties = itemBankProperties;
        this.restTemplateBuilder = restTemplateBuilder;
        this.rabbitTemplate = rabbitTemplate;
        this.freemarker = freemarker;
        this.itemIdGenerator = itemIdGenerator;
        this.dataStoreDataManager = dataStoreDataManager;
        this.dataStoreAttachmentManager = dataStoreAttachmentManager;
        this.dataStoreUtility = dataStoreUtility;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public ImageGenerator imageGenerator() {
        return new WirisImageGenerator(itemBankProperties, restTemplateBuilder);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemFactory itemFactory() {
        return new ItemFactory();
    }

    @Bean
    @ConditionalOnMissingBean
    public JsonModelAssembler jsonModelAssembler() {
        return new JsonModelAssembler();
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public StringAssembler stringAssembler() {
        return new StringAssembler(this.freemarker);
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifAssembler saaifAssembler() {
        return new SaaifAssembler(saaifMetadataAssembler(), saaifWordListAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifMetadataAssembler saaifMetadataAssembler() {
        return new SaaifMetadataAssembler();
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifWordListAssembler saaifWordListAssembler() {
        return new SaaifWordListAssembler();
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public IatModelMapperFactory iatModelMapperFactory() {
        return new IatModelMapperFactory();
    }

    @Bean
    @ConditionalOnMissingBean
    public MigrationFileUtil migrationFileUtil() {
        return new MigrationFileUtil(gitlabClient(), appAssembler(), itemRepository());
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public EquationEditorRepository equationEditorRepository() {
        return new EquationEditorRepository();
    }

    @Bean
    @ConditionalOnMissingBean
    public GitlabClient gitlabClient() {
        return new GitlabClient(this.itemBankProperties);
    }

    @Bean
    public GitLabApiClient gitLabApiClient() {
        return new GitLabApiClient(this.applicationProperties, this.itemBankProperties, this.restTemplateBuilder);
    }

    @Bean
    @ConditionalOnMissingBean
    public GitClientFactory gitClientFactory() {
        return new GitClientFactory(
            this.itemBankProperties,
            appAssembler(),
            imageGenerator(),
            transformerFactory());
    }

    @Bean
    @ConditionalOnMissingBean
    public RepositoryDependencyProvider repositoryDependencyProvider() {
        return new RepositoryDependencyProvider(
            gitClientFactory(),
            gitlabClient(),
            this.itemIdGenerator,
            this.itemBankProperties,
            this.freemarker,
            attachmentValidator(),
            appAssembler(),
            equationEditorRepository(),
            imageGenerator(),
            transformerFactory()
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public AttachmentValidator attachmentValidator() {
        return new AttachmentValidator(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemRepository itemRepository() {
        return new ItemRepository(repositoryDependencyProvider());
    }


    @Bean
    @ConditionalOnMissingBean
    public GitLabItemManager gitLabItemManager() {
        return new GitLabItemManager(this.itemBankProperties, itemRepository());
    }

    @Bean
    @ConditionalOnMissingBean
    public GitLabSyncManager gitLabSyncManager() {
        log.info("Creating bean gitLabSyncManager");
        return new GitLabSyncManager(
            this.itemBankProperties,
            gitLabItemManager(),
            this.dataStoreDataManager,
            this.dataStoreAttachmentManager
        );
    }

    // ------------------------------------------------------------------------

    @Bean
    public DataStoreItemManager dataStoreItemManager() {
        return new DataStoreItemManager(
            this.itemBankProperties,
            this.dataStoreDataManager,
            this.dataStoreAttachmentManager,
            itemManagerEventProducer(),
            this.dataStoreUtility);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventProducer itemManagerEventProducer() {
        log.info("Creating bean itemManagerEventProducer");
        return new ItemManagerEventProducer(this.itemBankProperties, this.rabbitTemplate);
    }

    @Bean
    public ItemManager itemManager(SecurityUtil securityUtil) {
        log.info("Creating bean itemManager");
        return new ItemManager(
            dataStoreItemManager(),
            gitLabItemManager(),
            attachmentValidator(),
            equationEditorRepository(),
            securityUtil);
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public AppAssembler appAssembler() {
        log.info("Creating bean appAssembler");
        return new AppAssembler(saaifAssembler(), jsonModelAssembler(), stringAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public AssociatedStimulusSupplier associatedStimulusSupplier() {
        return new AssociatedStimulusSupplier(this.dataStoreDataManager);
    }

    @Bean
    @ConditionalOnMissingBean
    public TransformerFactory transformerFactory() {
        return new TransformerFactory(associatedStimulusSupplier());
    }
}

