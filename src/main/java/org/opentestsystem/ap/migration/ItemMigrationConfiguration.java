package org.opentestsystem.ap.migration;

import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.AmazonClient;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.common.saaif.util.MigrationFileUtil;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.ap.common.util.WirisImageGenerator;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.datastore.DataStoreItemMigrationHandler;
import org.opentestsystem.ap.migration.datastore.DataStoreMigrationService;
import org.opentestsystem.ap.migration.datastore.DataStoreMigrationSetHandler;
import org.opentestsystem.ap.migration.repository.ReportRepository;
import org.opentestsystem.ap.migration.service.AsyncService;
import org.opentestsystem.ap.migration.util.SpringUtil;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;

import static freemarker.template.Configuration.VERSION_2_3_25;

@Slf4j
@org.springframework.context.annotation.Configuration
@ConditionalOnProperty(value = "itembank.test.enabled", havingValue = "false", matchIfMissing = true)
public class ItemMigrationConfiguration {

    private final ApplicationProperties applicationProperties;

    private final ItemBankProperties itemBankProperties;

    public ItemMigrationConfiguration(ApplicationProperties applicationProperties,
                                      ItemBankProperties itemBankProperties) {
        this.applicationProperties = applicationProperties;
        this.itemBankProperties = itemBankProperties;
    }

    // ------------------------------------------------------------------------

    @Bean
    public StringAssembler migrationStringAssembler() {
        log.info("Creating bean migrationStringAssembler");
        final Configuration freemarkerConfig = new Configuration(VERSION_2_3_25);

        freemarkerConfig.setClassForTemplateLoading(this.getClass(), applicationProperties.getReportTemplateFolder());

        freemarkerConfig.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarkerConfig.setDefaultEncoding("UTF-8");

        return new StringAssembler(freemarkerConfig);
    }

    @Bean
    public IatModelMapperFactory iatModelMapperFactory() {
        return new IatModelMapperFactory();
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public GitLabItemManager gitLabItemManager(ItemRepository itemRepository) {
        log.info("Creating bean gitLabItemManager");
        return new GitLabItemManager(this.itemBankProperties, itemRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public GitLabSyncManager gitLabSyncManager(GitLabItemManager gitLabItemManager,
                                               DataStoreDataManager dataStoreDataManager,
                                               DataStoreAttachmentManager dataStoreAttachmentManager) {
        log.info("Creating bean gitLabSyncManager");
        return new GitLabSyncManager(
            this.itemBankProperties,
            gitLabItemManager,
            dataStoreDataManager,
            dataStoreAttachmentManager
        );
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public AmazonClient amazonClient() {
        log.info("Creating bean amazonClient");
        return new AmazonClient(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreUtility dataStoreUtility() {
        log.info("Creating bean dataStoreUtility");
        return new DataStoreUtility();
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreAttachmentManager dataStoreAttachmentManager(AmazonClient amazonClient,
                                                                 DataStoreUtility dataStoreUtility) {
        log.info("Creating bean dataStoreAttachmentManager");
        return new DataStoreAttachmentManager(amazonClient, dataStoreUtility);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository,
                                                     WorkflowStatusTransitionRepository workflowStatusTransitionRepository) {
        log.info("Creating bean dataStoreDataManager");
        return new DataStoreDataManager(
            this.itemBankProperties,
            itemEntityRepository,
            workflowStatusRepository,
            workflowStatusTransitionRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreMigrationService dataStoreMigrationService(ApplicationProperties applicationProperties,
                                                               DataStoreDataManager dataManager,
                                                               ReportRepository reportRepository,
                                                               AsyncService asyncService) {
        log.info("Creating bean dataStoreMigrationService");
        return new DataStoreMigrationService(applicationProperties, dataManager, asyncService, reportRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreMigrationSetHandler dataStoreMigrationSetHandler(ApplicationProperties applicationProperties,
                                                                     DataStoreDataManager dataManager,
                                                                     SpringUtil springUtil,
                                                                     ItemManagerEventProducer eventProducer,
                                                                     MigrationFileUtil migrationFileUtil) {
        log.info("Creating bean dataStoreMigrationSetHandler");
        return new DataStoreMigrationSetHandler(applicationProperties, dataManager, springUtil, eventProducer, migrationFileUtil);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreItemMigrationHandler dataStoreItemMigrationHandler(ApplicationProperties applicationProperties,
                                                                       DataStoreDataManager dataManager,
                                                                       DataStoreMigrationSetHandler setHandler) {
        log.info("Creating bean dataStoreItemMigrationHandler");
        return new DataStoreItemMigrationHandler(applicationProperties, dataManager, setHandler);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventProducer itemManagerEventProducer(ItemBankProperties itemBankProperties,
                                                             RabbitTemplate rabbitTemplate) {
        log.info("Creating bean dataStoreEventProducer");
        return new ItemManagerEventProducer(itemBankProperties, rabbitTemplate);
    }

    @Bean
    @ConditionalOnMissingBean
    public ContentUpdaterFactory contentUpdaterFactory() {
        log.info("Creating bean contentUpdaterFactor");
        return new ContentUpdaterFactory();
    }

    @Bean
    @ConditionalOnMissingBean
    public ImageGenerator imageGenerator(ItemBankProperties itemBankProperties, RestTemplateBuilder restTemplateBuilder) {
        return new WirisImageGenerator(itemBankProperties, restTemplateBuilder);
    }
}

