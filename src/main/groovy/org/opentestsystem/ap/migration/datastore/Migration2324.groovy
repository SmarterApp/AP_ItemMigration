package org.opentestsystem.ap.migration.datastore

import groovy.util.logging.Log
import org.opentestsystem.ap.common.datastore.DataStoreDataManager
import org.opentestsystem.ap.common.datastore.DataStoreEventProducer
import org.opentestsystem.ap.common.datastore.DataStoreUtility
import org.opentestsystem.ap.common.datastore.entity.ItemEntity
import org.opentestsystem.ap.migration.ApplicationProperties
import org.opentestsystem.ap.migration.model.SkipMigration
import org.springframework.stereotype.Component

import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.*

@Log
@Component
class Migration2324 extends AbstractDataStoreMigration {

    Migration2324(ApplicationProperties applicationProperties,
                  DataStoreDataManager dataManager,
                  DataStoreEventProducer eventProducer,
                  DataStoreUtility dataStoreUtility) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility)
    }

    @Override
    void migrateEntity(ItemEntity itemEntity) {
        if (itemEntity.isBeingCreated()) {
            log.info("item {} is being created, migrate it generate the 'create' file", itemEntity.getItemId())
        } else if (!isCorrectType(itemEntity.getItemJson().getType())) {
            throw new SkipMigration("item $itemEntity.itemId is not being created or of type EBSR|HTQS|MI|MS")
        } else {
            log.info("migrate item EBSR|HTS|MI|MS to regenerate scoring file")
        }
    }

    boolean isBeingCreated(ItemEntity itemEntity) {
        itemEntity.isMaster() && itemEntity.isBeingCreated()
    }

    boolean isCorrectType(String type) {
        TYPE_EBSR.equalsIgnoreCase(type) || TYPE_MI.equalsIgnoreCase(type) || TYPE_MS.equalsIgnoreCase(type)  || TYPE_HTQS.equalsIgnoreCase(type)
    }
}