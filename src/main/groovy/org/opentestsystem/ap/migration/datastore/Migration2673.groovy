package org.opentestsystem.ap.migration.datastore

import lombok.extern.slf4j.Slf4j
import org.gitlab4j.api.models.Project
import org.gitlab4j.api.models.RepositoryFile
import org.jsoup.Jsoup
import org.jsoup.nodes.Document
import org.opentestsystem.ap.common.assembler.AppAssembler
import org.opentestsystem.ap.common.client.GitlabClient
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager
import org.opentestsystem.ap.common.datastore.DataStoreDataManager
import org.opentestsystem.ap.common.datastore.DataStoreUtility
import org.opentestsystem.ap.common.datastore.entity.ItemEntity
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager
import org.opentestsystem.ap.common.management.ItemManagerEventProducer
import org.opentestsystem.ap.common.model.EbsrItem
import org.opentestsystem.ap.common.model.ItemConstants
import org.opentestsystem.ap.common.saaif.item.ItemRelease
import org.opentestsystem.ap.migration.ApplicationDependencyProvider
import org.opentestsystem.ap.migration.ApplicationProperties
import org.opentestsystem.ap.migration.mapper.IatModelMapper
import org.opentestsystem.ap.migration.mapper.IatModelMapperFactory
import org.opentestsystem.ap.migration.model.ItemMappingProperties
import org.opentestsystem.ap.migration.model.SkipMigration
import org.opentestsystem.ap.migration.util.MigrationFileUtil
import org.springframework.stereotype.Component

import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER

@Slf4j
@Component
class Migration2673 extends AbstractDataStoreMigration {
    private static final String MASTER_BRANCH = "master"

    private final GitlabClient gitlabClient
    private final AppAssembler appAssembler
    private final GitLabSyncManager itemBankSyncManager
    private final MigrationFileUtil migrationFileUtil
    private final IatModelMapperFactory iatModelMapperFactory;

    Migration2673(final ApplicationDependencyProvider applicationDependencyProvider,
                  final ApplicationProperties applicationProperties,
                  final DataStoreDataManager dataManager,
                  final ItemManagerEventProducer eventProducer,
                  final DataStoreUtility dataStoreUtility,
                  final DataStoreAttachmentManager dataStoreAttachmentManager,
                  final MigrationFileUtil migrationFileUtil,
                  final IatModelMapperFactory iatModelMapperFactory) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager)
        this.gitlabClient = applicationDependencyProvider.gitlabClient
        this.appAssembler = applicationDependencyProvider.appAssembler
        this.itemBankSyncManager = applicationDependencyProvider.itemBankSyncManager
        this.migrationFileUtil = migrationFileUtil
        this.iatModelMapperFactory = iatModelMapperFactory
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        Optional<RepositoryFile> importZip = gitlabClient.lookUpFileOnMaster(itemEntity.getItemId(), MigrationFileUtil.IMPORT_ZIP_FILENAME)
        if (itemEntity.getItemJson().getType() != ItemConstants.ItemType.TYPE_EBSR) {
            throw new SkipMigration(String.format("Item %s is not EBSR type.  No updates necessary", itemEntity.getId()))
        }
        if (!importZip.isPresent()) {
            throw new SkipMigration(String.format("Item %s is not imported.  No updates necessary", itemEntity.getId()))
        }

        try {
            Project glProject = gitlabClient.lookupProjectByName(itemEntity.getItemJson().getId())
            if (glProject) {
                applyEbsrMigration(itemEntity, glProject)
            }
        } catch (Exception ex) {
            throw new SkipMigration(String.format("Unable to migrate item %s. %s", itemEntity.getId(), ex.message))
        }

        return itemEntity
    }

    private void applyEbsrMigration(ItemEntity itemEntity, Project project) {
        // Pull import.zip from the items master branch. Expand import.zip to a temporary directory
        Path expandedZip = migrationFileUtil.getExpandedImportZipFile(itemEntity.getItemId(),
                gitlabClient.getFile(project.getId(), MigrationFileUtil.IMPORT_ZIP_FILENAME, MASTER_BRANCH))

        if (expandedZip.toFile().exists()) {
            // import.zip can contain multiple directories. Identify the imported item source directory
            String itemSourceDir = migrationFileUtil.getExpandedItemSourceDir(expandedZip, itemEntity.getItemId())
            // Find the main item file in the source location
            File itemFile = migrationFileUtil.
                    findItemFileInPath(expandedZip.resolve(itemSourceDir).toString(), String.format("%s.xml", itemSourceDir))

            if (itemFile != null) {
                // Create temporary directory to store attachment files that might need synching to S3
                String itemSyncDir = Files.createTempDirectory(itemEntity.getItemId())

                // Load imported item xml data
                final ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                        .readXmlFromFile(itemFile.toPath())

                // Create item-specific mapper
                final IatModelMapper mapper = iatModelMapperFactory.newModelMapper(itemEntity.getItemJson().getType())

                // Load Jsoup document with item Qti content
                Document itemBody = Jsoup.parseBodyFragment(itemRelease.getItem().getContent().get(0).qti.value, "UTF-8")

                if (itemBody.getElementsByTag("p").size() > 0) {
                    String qtiFirstParagraph = itemBody.getElementsByTag("p").first().toString()

                    EbsrItem ebsrItem = (EbsrItem) itemEntity.getItemJson()

                    ItemMappingProperties mappingProperties = mapper.mapSingleRichTextContent(qtiFirstParagraph,
                            ebsrItem,
                            itemRelease.getItem().getContent().get(0).getApipAccessibility(),
                            expandedZip.resolve(itemSourceDir).toString(),
                            itemSyncDir)

                    ebsrItem.getCore().getEn().setPrompt(mappingProperties.getContent())

                    itemEntity.setItemJson(ebsrItem)

                    itemBankSyncManager.syncAttachmentsToDataStore(itemEntity.getItemId(), BRANCH_MASTER, Paths.get(itemSyncDir))
                }
            } else {
                throw new SkipMigration(String.format("Unable to find item file %s for item %s", itemFile.getAbsolutePath(), itemEntity.getId()))
            }
        }
    }
}
