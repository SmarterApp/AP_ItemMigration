package org.opentestsystem.ap.migration.datastore

import lombok.extern.slf4j.Slf4j
import org.apache.commons.io.FileUtils
import org.gitlab4j.api.models.Project
import org.gitlab4j.api.models.RepositoryFile
import org.jsoup.Jsoup
import org.jsoup.nodes.Document
import org.jsoup.nodes.Element
import org.jsoup.select.Elements
import org.opentestsystem.ap.common.client.GitlabClient
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager
import org.opentestsystem.ap.common.datastore.DataStoreDataManager
import org.opentestsystem.ap.common.datastore.DataStoreUtility
import org.opentestsystem.ap.common.datastore.entity.ItemEntity
import org.opentestsystem.ap.common.management.ItemManagerEventProducer
import org.opentestsystem.ap.common.model.ItemConstants
import org.opentestsystem.ap.migration.ApplicationProperties
import org.opentestsystem.ap.migration.model.SkipMigration
import org.opentestsystem.ap.migration.util.MigrationFileUtil
import org.springframework.stereotype.Component


@Slf4j
@Component
class Migration2673 extends AbstractDataStoreMigration {
    private static final String MASTER_BRANCH = "master"

    private final GitlabClient gitlabClient
    private final MigrationFileUtil migrationFileUtil

    Migration2673(final ApplicationProperties applicationProperties,
                  final DataStoreDataManager dataManager,
                  final ItemManagerEventProducer eventProducer,
                  final DataStoreUtility dataStoreUtility,
                  final DataStoreAttachmentManager dataStoreAttachmentManager,
                  final GitlabClient gitlabClient,
                  final MigrationFileUtil migrationFileUtil) {
        super(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager)
        this.gitlabClient = gitlabClient
        this.migrationFileUtil = migrationFileUtil
    }

    @Override
    protected ItemEntity migrateEntity(ItemEntity itemEntity) {
        Optional<RepositoryFile> importZip = gitlabClient.lookUpFileOnMaster(itemEntity.getItemId(), MigrationFileUtil.IMPORT_ZIP_FILENAME)
        if (!importZip.isPresent()) {
            throw new SkipMigration(String.format("Item %s is not imported.  No updates necessary", itemEntity.getId()))
        }
        if (itemEntity.getItemJson().getType() != ItemConstants.ItemType.TYPE_EBSR) {
            throw new SkipMigration(String.format("Item %s is not EBSR type.  No updates necessary", itemEntity.getId()))
        }

        try {
            Project glProject = gitlabClient.lookupProjectByName(itemEntity.getItemJson().getId())
            if (glProject) {
                Document itemXml = migrationFileUtil.getItemXmlFromZip(itemEntity.getItemId(),
                        gitlabClient.getFile(glProject.getId(), MigrationFileUtil.IMPORT_ZIP_FILENAME, MASTER_BRANCH))

                if (itemXml != null) {
                    Elements contents = itemXml.getElementsByTag("content")
                    for (Element content : contents) {
                        String language = content.attr("language")
                        for (Element child : content.children()) {
                            if (child.tagName() == "qti") {
                                Document itemBody = Jsoup.parseBodyFragment(child.html(), "UTF-8")
                                String qtiFirstParagraph = itemBody.getElementsByTag("p").first().html()

                                System.out.println(qtiFirstParagraph)

                            }
                        }
                    }
                }

                throw new Exception("stopping item from being migrated")
            }
        } catch (Exception ex) {
            throw new SkipMigration(String.format("Unable to migrate item %s. %s", itemEntity.getId(), ex.message))
        }

        return itemEntity
    }
}
