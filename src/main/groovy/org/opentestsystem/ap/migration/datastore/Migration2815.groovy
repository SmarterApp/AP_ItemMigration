package org.opentestsystem.ap.migration.datastore

import groovy.util.logging.Log
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager
import org.opentestsystem.ap.common.datastore.DataStoreDataManager
import org.opentestsystem.ap.common.datastore.DataStoreItemManager
import org.opentestsystem.ap.common.datastore.DataStoreUtility
import org.opentestsystem.ap.common.datastore.entity.ItemEntity
import org.opentestsystem.ap.common.model.ModelConstants
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration
import org.opentestsystem.ap.migration.ApplicationProperties
import org.opentestsystem.ap.migration.migration.AbstractMigration
import org.opentestsystem.ap.migration.model.MigrationContext
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider
import org.springframework.stereotype.Component

@Log
@Component
class Migration2815 extends AbstractMigration {

    Migration2815(ApplicationDependencyProvider applicationDependencyProvider,
                  ApplicationProperties applicationProperties,
                  DataStoreDataManager dataManager,
                  DataStoreItemManager dataStoreItemManager,
                  DataStoreUtility dataStoreUtility,
                  DataStoreAttachmentManager attachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, attachmentManager, dataStoreItemManager)
    }

    @Override
    ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        String type = itemEntity.itemJson.type
        if (type != ModelConstants.ItemType.TYPE_HTQO && type != ModelConstants.ItemType.TYPE_HTQS) {
            throw new SkipMigration("Migration2815: skip $itemEntity.itemId as it is type $type and not HTQO or HTQS")
        }
        itemEntity
    }

    @Override
    protected boolean shouldMigrateBranch(ItemEntity migratedEntity) {
        migratedEntity.isMaster()
    }
}