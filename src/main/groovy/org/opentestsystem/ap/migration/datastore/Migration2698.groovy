package org.opentestsystem.ap.migration.datastore

import groovy.util.logging.Log
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager
import org.opentestsystem.ap.common.datastore.DataStoreDataManager
import org.opentestsystem.ap.common.datastore.DataStoreUtility
import org.opentestsystem.ap.common.datastore.entity.ItemEntity
import org.opentestsystem.ap.common.management.ItemManagerEventProducer
import org.opentestsystem.ap.common.model.Item
import org.opentestsystem.ap.common.model.glossary.GlossaryLanguage
import org.opentestsystem.ap.migration.ApplicationDependencyProvider
import org.opentestsystem.ap.migration.ApplicationProperties
import org.opentestsystem.ap.migration.model.MigrationContext
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration
import org.springframework.stereotype.Component

@Log
@Component
class Migration2698 extends AbstractDataStoreMigration {

    Migration2698(ApplicationDependencyProvider applicationDependencyProvider,
                  ApplicationProperties applicationProperties,
                  DataStoreDataManager dataManager,
                  ItemManagerEventProducer eventProducer,
                  DataStoreUtility dataStoreUtility,
                  DataStoreAttachmentManager attachmentManager) {
        super(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, attachmentManager)
    }

    @Override
    ItemEntity migrateEntity(ItemEntity itemEntity, MigrationContext migrationContext) {
        Item item = itemEntity.itemJson
        checkGlossary(item)
        updateGlossaryAudioFileNames(item)
        itemEntity
    }

    private static void updateGlossaryAudioFileNames(Item item) {
        item.glossary.terms.each { term ->
            updateFileNameOnGlossaryLanguage(item.id, term.id, "arabic", term.languages.arabic)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "burmese", term.languages.burmese)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "cantonese", term.languages.cantonese)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "filipino", term.languages.filipino)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "hmong", term.languages.hmong)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "korean", term.languages.korean)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "mandarin", term.languages.mandarin)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "punjabi", term.languages.punjabi)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "russian", term.languages.russian)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "somali", term.languages.somali)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "spanish", term.languages.spanish)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "ukrainian", term.languages.ukrainian)
            updateFileNameOnGlossaryLanguage(item.id, term.id, "vietnamese", term.languages.vietnamese)
        }
    }

    private static void checkGlossary(Item item) {
        if (item.glossary.terms.size() == 0) {
            throw new SkipMigration("Item $item.id does not contain any glossary terms")
        }
    }

    private static void updateFileNameOnGlossaryLanguage(String itemId,
                                                         String termId,
                                                         String languageName,
                                                         GlossaryLanguage glossaryLanguage) {
        glossaryLanguage.dialects?.each { dialect ->
            dialect.audioFiles?.each { audioFile ->
                def newFileName = sprintf("%s_%s_%s_%s_%s",
                        itemId, termId, languageName, dialect.id, audioFile.fileName)
                audioFile.fileName = newFileName
            }
        }
    }
}