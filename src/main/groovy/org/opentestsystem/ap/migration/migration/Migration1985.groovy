package org.opentestsystem.ap.migration.migration

import lombok.extern.slf4j.Slf4j
import org.opentestsystem.ap.common.client.GitClient
import org.opentestsystem.ap.common.model.Attachment
import org.opentestsystem.ap.common.model.Item
import org.opentestsystem.ap.common.model.ItemImageResource
import org.opentestsystem.ap.common.model.glossary.GlossaryDialect
import org.opentestsystem.ap.common.model.glossary.GlossaryLanguage
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm
import org.opentestsystem.ap.migration.model.BranchInfo
import org.opentestsystem.ap.migration.model.ItemInfo
import org.opentestsystem.ap.migration.model.MigrationDefinition
import org.opentestsystem.ap.migration.util.Util
import org.springframework.stereotype.Component

@Slf4j
@Component
class Migration1985 extends AbstractMigration{

    Migration1985(Util util) {
        super(util)
    }

    @Override
    protected void runMigration(final ItemInfo itemInfo,
                                final BranchInfo branchInfo,
                                final MigrationDefinition migration,
                                final GitClient gitClient) {
        final Item item = gitClient.readModelFile()


        item.getImages().getImageResources().eachWithIndex { ItemImageResource resource, int i ->
            // Rename file and fileName property
            if (resource.conceptFile.getFileName().length() > 0) {
                def newFileName = "concept_" + i + resource.conceptFile.fileName
                gitClient.itemContext.getLocalRepositoryPath().resolve(resource.conceptFile.fileName).renameTo(newFileName)
                resource.conceptFile.fileName = newFileName
            }
            // Rename file and fileName property
            if (resource.productionFile.getFileName().length() > 0) {
                def newFileName = "production_" + i + resource.productionFile.fileName
                gitClient.itemContext.getLocalRepositoryPath().resolve(resource.productionFile.fileName).renameTo(newFileName)
                resource.productionFile.fileName = newFileName
            }
        }

        item.getGlossary().getTerms().each { GlossaryTerm term ->
            term.languages.getArabic().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "arabic")
            }
            term.languages.getBurmese().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "burmese")
            }
            term.languages.getCantonese().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "cantonese")
            }
            term.languages.getEnglish().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "english")
            }
            term.languages.getFilipino().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "filipino")
            }
            term.languages.getHmong().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "hmong")
            }
            term.languages.getKorean().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "korean")
            }
            term.languages.getMandarin().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "mandarin")
            }
            term.languages.getPunjabi().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "punjabi")
            }
            term.languages.getRussian().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "russian")
            }
            term.languages.getSomali().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "somali")
            }
            term.languages.getSpanish().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "spanish")
            }
            term.languages.getUkrainian().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "ukranian")
            }
            term.languages.getVietnamese().getDialects().each { GlossaryDialect dialect ->
                updateDialect(dialect, item.getId(), term.getId(), "vietnamese")
            }
        }

        updateItemFiles(item, gitClient)

    }


    private void updateDialect(GlossaryDialect dialect, String itemId, String termId, String languageName) {
        dialect.getAudioFiles().each { Attachment attachment ->
            if (attachment.getFileName().length() > 0) {
                def newFileName = itemId + "_" +
                        termId + "_" +
                        languageName + "_" +
                        dialect.getId() +
                        attachment.getFileName()
                attachment.setFileName(newFileName)
            }
        }
    }


}
