package org.opentestsystem.ap.migration.migration

import groovy.json.JsonSlurper
import lombok.extern.slf4j.Slf4j
import org.opentestsystem.ap.common.client.GitClient
import org.opentestsystem.ap.common.model.Item
import org.opentestsystem.ap.common.model.ItemConstants
import org.opentestsystem.ap.common.repository.RepositoryUtil
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata
import org.opentestsystem.ap.migration.model.BranchInfo
import org.opentestsystem.ap.migration.model.ItemInfo
import org.opentestsystem.ap.migration.model.MigrationDefinition
import org.opentestsystem.ap.migration.util.Util
import org.springframework.stereotype.Component

@Slf4j
@Component
class Migration1764 extends AbstractMigration {

    Migration1764(Util util) {
        super(util)
    }

    @Override
    protected void runMigration(final ItemInfo itemInfo,
                                final BranchInfo branchInfo,
                                final String version,
                                final MigrationDefinition migration,
                                final GitClient gitClient) {

        final Item item = gitClient.readModelFile()

        if (item.getType() != ItemConstants.ItemType.TYPE_TUT &&
            item.getType() != ItemConstants.ItemType.TYPE_WORD_LIST) {

            final byte[] file = gitlabClient.getFile(itemInfo.projectId, RepositoryUtil.getModelFileName(), branchInfo.branchName)

            if (file) {
                def itemJson = new JsonSlurper().parse(file)

                String specVersion = itemJson?.core?.metadata?.specificationVersion

                if (specVersion != "") {
                    item.getCore().getMetadata().setSpecificationsVersion(specVersion)
                }
            }

            updateItemFiles(item, gitClient)

        }
    }
}
