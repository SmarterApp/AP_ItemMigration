package org.opentestsystem.ap.migration.migration

import lombok.extern.slf4j.Slf4j
import org.opentestsystem.ap.common.client.GitClient
import org.opentestsystem.ap.common.mapper.MapperUtil
import org.opentestsystem.ap.common.model.*
import org.opentestsystem.ap.common.model.scoring.variables.Variable
import org.opentestsystem.ap.migration.model.BranchInfo
import org.opentestsystem.ap.migration.model.ItemInfo
import org.opentestsystem.ap.migration.model.MigrationDefinition
import org.opentestsystem.ap.migration.util.Util
import org.springframework.stereotype.Component

import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EQ
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TI

@Slf4j
@Component
class Migration1828 extends AbstractMigration {

    Migration1828(final Util util) {
        super(util)
    }

    @Override
    protected void runMigration(final ItemInfo itemInfo, final BranchInfo branchInfo,
                                final MigrationDefinition migration, final GitClient gitClient) {
        final Item item = gitClient.readModelFile()

        if (item?.type == TYPE_TI) {
            updateItemFiles(migrateTi((TiItem) item), gitClient)
        }
        else if (item?.type == TYPE_EQ) {
            updateItemFiles(migrateEq((EqItem) item), gitClient)
        }
    }

    private Item migrateTi(TiItem tiItem) {
        List<Variable> systemVariables = [newResponsesVar()] + getTiSystemVariables(tiItem?.core?.en?.table)

        List<Variable> userVariables = MapperUtil.filterScoringUserVariables(tiItem)

        tiItem.core.scoring.variables = systemVariables + userVariables

        tiItem
    }

    private Item migrateEq(EqItem eqItem) {
        List<Variable> systemVariables = [newResponsesVar()] + getEqSystemVariables(eqItem?.core?.en?.parts)

        List<Variable> userVariables = MapperUtil.filterScoringUserVariables(eqItem)

        eqItem.core.scoring.variables = systemVariables + userVariables

        eqItem
    }

    private List<Variable> getTiSystemVariables(final Table table) {
        final List<Variable> variables = []

        if (table) {
            final List<Table.Row> rows = table.getRows()

            for (int i = 0; i < rows.size(); ++i) {
                final Table.Row row = rows.get(i)

                final List<Table.Cell> cells = row.getCells()

                for (int j = 0; j < cells.size(); ++j) {
                    final Table.Cell cell = cells.get(j)

                    if (cell.isAnswer()) {
                        final String identifier = "Row${i + 1}Col${j + 1}Response"

                        final String variableType = cell.isTextAnswer() ? "string" : "float"

                        variables << new Variable(identifier, "single", variableType, false)
                    }
                }
            }
        }

        variables
    }

    private List<Variable> getEqSystemVariables(final List<EqPart> parts) {
        (1..parts.size()).collect { new Variable("Response${it}", "single", "string", false) }
    }

    private Variable newResponsesVar() {
        new Variable("Responses", "ordered", "string", false)
    }
}