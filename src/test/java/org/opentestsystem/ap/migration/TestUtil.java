package org.opentestsystem.ap.migration;

import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.concurrent.TimeUnit;

import com.google.common.collect.Lists;
import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;
import lombok.Data;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.JsonModelAssembler;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.common.saaif.model.ImportItem;
import org.opentestsystem.ap.common.saaif.model.ItemProps;
import org.opentestsystem.ap.migration.model.BranchResult;
import org.opentestsystem.ap.migration.model.ItemResult;
import org.opentestsystem.ap.migration.model.MigrationError;
import org.opentestsystem.ap.migration.model.MigrationReport;
import org.opentestsystem.ap.migration.model.MigrationResult;
import org.opentestsystem.ap.migration.model.MigrationSetResult;

import static freemarker.template.Configuration.VERSION_2_3_25;

@Data
public class TestUtil {


    public static final String ITEM_ID = "200000";

    public static final String ITEM_ID_1 = "200001";

    public static final String ITEM_ID_2 = "200002";

    public static final String BRANCH_NAME = "hal@fairwaytech.com";

    public static final String BRANCH_NAME_1 = "bruce@fairwaytech.com";

    public static final String BRANCH_NAME_2 = "clark@fairwaytech.com";

    public static final String MIGRATION_SET_KEY = "iat-32175";

    public static final String MIGRATION_SET_KEY_1 = "iat-1";

    public static final String MIGRATION_SET_KEY_2 = "iat-2";

    public static final String MIGRATION_NAME = "migration8765309";

    public static final String MIGRATION_NAME_1 = "migration0001";

    public static final String MIGRATION_NAME_2 = "migration0002";

    private static final String ERROR_MESSAGE = "Error updating item data";

    private final ApplicationProperties applicationProperties;

    public TestUtil() {
        applicationProperties = new ApplicationProperties();
    }


    public JsonModelAssembler newModelAssembler() {
        return new JsonModelAssembler();
    }
    public StringAssembler newReportAssembler() {
        final Configuration freemarkerConfig = new Configuration(VERSION_2_3_25);

        freemarkerConfig.setClassForTemplateLoading(this.getClass(), applicationProperties.getReportTemplateFolder());

        freemarkerConfig.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarkerConfig.setDefaultEncoding("UTF-8");

        return new StringAssembler(freemarkerConfig);
    }

    public MigrationReport newMigrationReport() {
        MigrationReport report = new MigrationReport();

        report.startMigrationTimer();

        sleep();

        final BranchResult branchResultSuccess1 = newBranchResultSuccess(ITEM_ID, "create-" + BRANCH_NAME_1);
        final BranchResult branchResultError1 = newBranchResultWithError(ITEM_ID, "core-" + BRANCH_NAME_2);

        final BranchResult branchResultSuccess2 = newBranchResultSuccess(ITEM_ID, "images-" + BRANCH_NAME_1);
        final BranchResult branchResultError2 = newBranchResultWithError(ITEM_ID, "translation-" + BRANCH_NAME_2);

        final ItemResult itemResult = newItemResult(ITEM_ID);

        itemResult.addSuccessfulBranchMigration(branchResultSuccess1);
        itemResult.addSuccessfulBranchMigration(branchResultSuccess2);

        itemResult.addFailedBranchMigration(branchResultError1.getMigrationError());
        itemResult.addFailedBranchMigration(branchResultError2.getMigrationError());

        report.addItemResult(itemResult);

        report.setItemsToProcessCount(1);

        report.stopMigrationTimer();

        return report;
    }

    public ItemResult newItemResult1() {
        return newItemResult(ITEM_ID_1);
    }

    public ItemResult newItemResult2() {
        return newItemResult(ITEM_ID_2);
    }

    public ItemResult newItemResult(String itemId) {
        ItemResult itemResult = new ItemResult();
        itemResult.setItemId(itemId);
        return itemResult;
    }

    public BranchResult newBranchResultSuccess(String itemId, String branchName) {
        BranchResult branchResult = new BranchResult();
        branchResult.setItemId(itemId);
        branchResult.setBranchName(branchName);
        branchResult.setBranchCurrentVersion("iat-5");
        branchResult.setCurrent(true);

        branchResult.addSuccessfulMigrationSet(newMigrationSetResultSuccess(itemId, branchName, "iat-4",
            Lists.newArrayList("migration-41", "migration-42")));
        branchResult.addSuccessfulMigrationSet(newMigrationSetResultSuccess(itemId, branchName, "iat-5",
            Lists.newArrayList("migration-51", "migration-52")));

        return branchResult;
    }

    public BranchResult newBranchResultWithError(String itemId, String branchName) {
        BranchResult branchResult = newBranchResultSuccess(itemId, branchName);

        MigrationSetResult failedMigrationSetResult = newMigrationSetResultWithError(itemId, branchName, "iat-6",
            Lists.newArrayList("migration-63"));

        branchResult.setFailedMigrationSetResult(failedMigrationSetResult);

        return branchResult;
    }

    public MigrationSetResult newMigrationSetResultWithError(String itemId,
                                                             String branchName,
                                                             String migrationSetKey,
                                                             List<String> migrationNames) {
        MigrationSetResult result = newMigrationSetResultSuccess(itemId, branchName, migrationSetKey, migrationNames);
        result.addMigrationError("iat-2", "Failed to update item data");
        return result;
    }

    public MigrationSetResult newMigrationSetResultSuccess(String itemId,
                                                           String branchName,
                                                           String migrationSetKey,
                                                           List<String> migrationNames) {
        MigrationSetResult result = new MigrationSetResult();
        result.setItemId(itemId);
        result.setBranchName(branchName);
        result.setMigrationSetKey(migrationSetKey);

        migrationNames.forEach(name -> result.addSuccessfulMigration(newMigrationResult(name)));

        return result;
    }

    public MigrationResult newMigrationResult(String migrationName) {
        return new MigrationResult(migrationName);
    }

    public MigrationError newMigrationError() {
        return newMigrationError(ITEM_ID, BRANCH_NAME, MIGRATION_SET_KEY, MIGRATION_NAME, ERROR_MESSAGE);
    }

    public MigrationError newMigrationError(String itemId,
                                            String branchName,
                                            String migrationKeySet,
                                            String migrationName,
                                            String errorMessage) {
        MigrationError migrationError = new MigrationError();
        migrationError.setItemId(itemId);
        migrationError.setBranchName(branchName);
        migrationError.setMigrationSetKey(migrationKeySet);
        migrationError.setMigrationName(migrationName);
        migrationError.setErrorMessage(errorMessage);
        return migrationError;
    }

    public void sleep() {
        try {
            TimeUnit.SECONDS.sleep(1L);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public ImportItem getNewImportItem(String enuPrompt) throws IOException {
        ItemRelease itemRelease = new ItemRelease();
        ItemRelease.Item item = new ItemRelease.Item();
        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setStem(enuPrompt);
        content.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);

        item.getContent().add(content);
        itemRelease.setItem(item);

        ImportItem importItem = new ImportItem();
        ItemProps itemProps = new ItemProps();
        SmarterAppMetadata metadata = new SmarterAppMetadata();
        metadata.setSubject("math");

        importItem.setItemProps(itemProps);
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        importItem.setExpandedImportItemPath(Files.createTempDirectory("tes"));
        importItem.setItemImportSourcePath(Files.createTempDirectory("testSrc"));

        return importItem;
    }
}
