package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.TestUtil;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.model.MigrationContext;

import java.io.IOException;

import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2360Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2360 migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        when(applicationDependencyProvider.getContentUpdaterFactory()).thenReturn(new ContentUpdaterFactory());

        migration = new Migration2360(applicationDependencyProvider,
                applicationProperties, dataManager, eventProducer,
                dataStoreUtility, dataStoreAttachmentManager);
    }


    @Test
    public void shouldFixInvalidScoringEngineValues() throws IOException {
        String sampleStemContent = "";

        ItemEntity entity = new ItemEntity("201", "master");
        SaItem item = new SaItem("201");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = TestUtil.getNewImportItem(sampleStemContent);
        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);

        entity.getItemJson().getCore().getMetadata().setScoringEngine("Automatic with Key");
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);
        String autoWithKey = migratedEntity.getItemJson().getCore().getMetadata().getScoringEngine();

        entity.getItemJson().getCore().getMetadata().setScoringEngine("Automatic with Key(s)");
        migratedEntity = migration.migrateEntity(entity, migrationContext);
        String autoWithKeys = migratedEntity.getItemJson().getCore().getMetadata().getScoringEngine();

        entity.getItemJson().getCore().getMetadata().setScoringEngine("Automatic with Machine Rubric");
        migratedEntity = migration.migrateEntity(entity, migrationContext);
        String autoWithRubric = migratedEntity.getItemJson().getCore().getMetadata().getScoringEngine();

        assert(autoWithKey.equalsIgnoreCase("AutomaticWithKey"));
        assert(autoWithKeys.equalsIgnoreCase("AutomaticWithKeys"));
        assert(autoWithRubric.equalsIgnoreCase("AutomaticWithRubric"));
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipIfScoringEngineIsNotSet() throws IOException {
        String sampleStemContent = "";

        ItemEntity entity = new ItemEntity("201", "master");
        SaItem item = new SaItem("201");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = TestUtil.getNewImportItem(sampleStemContent);
        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        entity.getItemJson().getCore().getMetadata().setScoringEngine("");
        migration.migrateEntity(entity, migrationContext);
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipIfScoringEngineHasValidScore() throws IOException {
        String sampleStemContent = "";

        ItemEntity entity = new ItemEntity("201", "master");
        SaItem item = new SaItem("201");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = TestUtil.getNewImportItem(sampleStemContent);
        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        entity.getItemJson().getCore().getMetadata().setScoringEngine("AutomaticWithRubric");
        migration.migrateEntity(entity, migrationContext);
    }
}
