package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.ItemProps;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.TestUtil;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.ttsmapper.TtsMapperFactory;

import java.nio.file.Files;

import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;

@RunWith(MockitoJUnitRunner.class)
public class Migration2957Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private TtsMapperFactory ttsMapperFactory = new TtsMapperFactory();

    private TestUtil testUtil = new TestUtil();

    private Migration2957 migration;
    private ItemRelease itemRelease;
    private ImportItem importItem = new ImportItem();
    private ItemProps itemProps = new ItemProps();
    private SmarterAppMetadata metadata = new SmarterAppMetadata();

    @Before
    public void setUp() throws Exception {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        migration = new Migration2957(applicationProperties,
                dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager,
                applicationDependencyProvider, ttsMapperFactory);

        itemRelease = new ItemRelease();
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        importItem.setExpandedImportItemPath(Files.createTempDirectory("tes"));
        importItem.setItemImportSourcePath(Files.createTempDirectory("testSrc"));
    }

    @Test
    public void itShouldMigrateEquationTTSForSaItem() {
        // Populate ItemRelease
        ItemRelease.Item item = new ItemRelease.Item();
        item.setFormat(TYPE_SA);
        item.setId("123");
        item.setBankkey("200");

        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setStem("<img id=\"item_13574_Object1\" style=\"vertical-align:middle;\" src=\"item_13574_v16_Object1_png16malpha.png\" width=\"13\" height=\"35\" />");
        content.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);

        content.setApipAccessibility(new ItemRelease.Item.Content.ApipAccessibility());
        content.getApipAccessibility().setAccessibilityInfo(new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo());

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement textElement = testUtil.getNewItemAccessElement();
        textElement.setIdentifier("ae7");
        textElement.getContentLinkInfo().setItsLinkIdentifierRef("item_13574_Object1");
        textElement.getContentLinkInfo().setType("Equation");
        textElement.getRelatedElementInfo().getReadAloud().setAudioShortDesc("A B C D");
        textElement.getRelatedElementInfo().getBrailleText().setBrailleTextString("ABCD");

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement graphicElement = testUtil.getNewItemAccessElement();
        graphicElement.setIdentifier("ae4");
        graphicElement.getContentLinkInfo().setItsLinkIdentifierRef("item_27005_stem");
        graphicElement.getContentLinkInfo().setType("Graphic");
        graphicElement.getContentLinkInfo().setSubtype("Generic");
        graphicElement.getRelatedElementInfo().getReadAloud().setAudioText("Clockwise from the right, the figure reeds, e, c, b, a, D;");
        graphicElement.getRelatedElementInfo().getBrailleText().setBrailleTextString("The figure contains a rectangle with the four corners labeled clockwise from the top left, A. , d, c, b. A diagonal line is drawn from point A. , to point c. Triangle A. , c, b, is shaded, triangle A. , c, d, is not. Triangle D, c, e, is a triangle connected to the rectangle. Triangle D, c, e, is shaded.");

        content.getApipAccessibility().getAccessibilityInfo().getAccessElement().add(textElement);
        content.getApipAccessibility().getAccessibilityInfo().getAccessElement().add(graphicElement);

        item.getContent().add(content);

        importItem.getItemRelease().setItem(item);
        itemProps.setItemType(TYPE_SA);
        importItem.setItemProps(itemProps);

        // Populate itemEntity
        SaItem saItem = new SaItem("123");
        saItem.getCore().getEn().setPrompt("<img title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" class=\"place-holder\" />");
        saItem.getImages().getImageResources().add(testUtil.newItemImageResource("item_13574_v16_Object1_png16malpha.png"));
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(saItem);

        // Run migration
        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition, importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        SaItem migratedItem = (SaItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().equals("<span class=\"iat-text2speech\" data-iat-tts=\"A B C D\"><img title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" class=\"place-holder\" /></span>"));
    }

    //TODO: Create one Test per item type
}
