package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.model.SkipMigration;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;

@RunWith(MockitoJUnitRunner.class)
public class Migration2391Test {

    private static final MigrationContext MIGRATION_CONTEXT = new MigrationContext("",
        new ApplicationProperties.MigrationDefinition());

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private ItemEntity entity;

    private Migration2391 migration;

    @Before
    public void setup() {
        migration = new Migration2391(
            applicationDependencyProvider,
            applicationProperties,
            dataManager,
            eventProducer,
            dataStoreUtility,
            dataStoreAttachmentManager);

        entity = new ItemEntity();
    }

    @Test
    public void shouldMigrateBranch() {
        entity = new ItemEntity();

        entity.setBranchName(ItemConstants.Section.SECTION_CORE);
        assertThat(migration.shouldMigrateBranch(entity)).isTrue();

        entity.setBranchName(ItemConstants.BranchNames.BRANCH_MASTER);
        assertThat(migration.shouldMigrateBranch(entity)).isTrue();

        entity.setBranchName(ItemConstants.Section.SECTION_GLOSSARY);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_AUDIO);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_IMAGES);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_TRANSLATIONS);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_ASL);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_BRAILLE);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_TEXTTOSPEECH);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_CC);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_METADATA);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_REVIEW);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ItemConstants.Section.SECTION_WORKFLOW);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
    }

    @Test
    public void shouldSkipMigrateEntityBecauseItemIsNotAssessmentItem() {
        StimItem stim = new StimItem("123");
        this.entity.setItemJson(stim);
        try {
            this.migration.migrateEntity(this.entity, MIGRATION_CONTEXT);
            fail("Expected skip migration error");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo("item is not an assessment item");
        }
    }

    @Test
    public void shouldSkipMigrateEntityBecauseNoStimulusOrTutorialAssociation() {
        SaItem stim = new SaItem("123");
        this.entity.setItemJson(stim);
        try {
            this.migration.migrateEntity(this.entity, MIGRATION_CONTEXT);
            fail("Expected skip migration error");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo("assessment item has no associated stimulus or tutorial");
        }
    }

    @Test
    public void shouldSkipMigrateEntity() {
        SaItem stim = new SaItem("123");
        stim.getCore().setStimulusId(" 456 ");
        stim.getCore().setTutorialId("  987 ");

        this.entity.setItemJson(stim);

        final ItemEntity migratedEntity = this.migration.migrateEntity(this.entity, MIGRATION_CONTEXT);

        AssessmentItem assessmentItem = (AssessmentItem) migratedEntity.getItemJson();

        assertThat(assessmentItem.getCore().getStimulusId()).isEqualTo("456");
        assertThat(assessmentItem.getCore().getTutorialId()).isEqualTo("987");


    }
}