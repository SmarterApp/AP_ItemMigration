package org.opentestsystem.ap.migration.migration;

import org.apache.commons.lang3.StringUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.ItemProps;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.model.MigrationContext;

import java.io.IOException;
import java.nio.file.Files;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2605Test {

    private static final String sampleStemContent = "<p style=\"color:#000000; background-color:transparent; \">Your soccer Coach is going to buy a van for the team to travel to games. He has to decide between a three<span class=\"iat-text2speech\" data-iat-tts-vi=\"-\" data-iat-tts=\"-\">-</span>, four<span class=\"iat-text2speech\" data-iat-tts-vi=\"-\" data-iat-tts=\"-\">-</span>, or five<span class=\"iat-text2speech\" data-iat-tts-vi=\"-\" data-iat-tts=\"-\">-</span>year payment plan. Each plan requires monthly payments. Two of the plans require a down payment (a <span class=\"iat-text2speech\" data-iat-tts=\"one time,\" data-iat-tts-vi=\"one-time\"><span style=\"font-weight:bold; \">one-time</span></span> payment made at the <span style=\"font-weight:bold; \">time of </span><span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"1\"><span style=\"font-weight:bold; \">purchase</span></span>). </p> \n<p style=\"color:#000000; background-color:transparent; \">&nbsp;</p> \n<p style=\"color:#000000; background-color:transparent; \">Table 1 shows the three payment plans.</p> \n<p style=\"color:#000000; background-color:transparent; \">&nbsp;</p> \n<p style=\"color:#000000; font-weight:bold; background-color:transparent; \"><span class=\"iat-text2speech\" data-iat-tts=\"The title of the table is, Table\" data-iat-tts-vi=\"Table\">Table</span> 1: Payment Plans</p> \n<div align=\"left\"> \n <table cellpadding=\"1\" cellspacing=\"1\" border=\"1\" style=\"width:416px;\"> \n  <thead> \n   <tr> \n    <th scope=\"col\" style=\"vertical-align:middle; padding:0.2292em;  border-left:0.06em solid #000000; border-top:0.06em solid #000000; border-bottom:0.06em solid #000000;\"><p style=\"text-align:center; color:#000000; font-weight:bold; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\", The table has four columns and two rows. From left to right the column headings reed, Payment\" data-iat-tts-vi=\"Payment\">Payment</span> Plan</p></th> \n    <th scope=\"col\" style=\"vertical-align:middle; padding:0.2292em;  border-left:0.06em solid #000000; border-top:0.06em solid #000000; border-bottom:0.06em solid #000000;\"><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"Three Year\" data-iat-tts-vi=\"Three-Year\"><span style=\"font-weight:bold; \">Three-Year</span></span><span style=\"font-weight:bold; \"> Plan</span> </p><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \">(36 months)</p></th> \n    <th scope=\"col\" style=\"vertical-align:middle; padding:0.2292em;  border-left:0.06em solid #000000; border-top:0.06em solid #000000; border-bottom:0.06em solid #000000;\"><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"Four Year\" data-iat-tts-vi=\"Four-Year\"><span style=\"font-weight:bold; \">Four-Year</span></span><span style=\"font-weight:bold; \"> Plan</span> </p><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \">(48 months)</p></th> \n    <th scope=\"col\" style=\"vertical-align:middle; padding:0.2292em;  border:0.06em solid #000000;\"><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"Five Year\" data-iat-tts-vi=\"Five-Year\"><span style=\"font-weight:bold; \">Five-Year</span></span><span style=\"font-weight:bold; \"> Plan</span> </p><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \">(60 months)</p></th> \n   </tr> \n  </thead> \n  <tbody> \n   <tr> \n    <td><p style=\"color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\", From left to right the first row reeds, Down\" data-iat-tts-vi=\"Down\">Down</span> Payment</p></td> \n    <td><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"ten thousand dollars\" data-iat-tts-vi=\"$10,000\">$10,000</span></p></td> \n    <td><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"zero dollars\" data-iat-tts-vi=\"$0\">$0</span></p></td> \n    <td><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"10 thousand dollars\" data-iat-tts-vi=\"$10,000\">$10,000</span></p></td> \n   </tr> \n   <tr> \n    <td><p style=\"color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"The second row reeds, monthly\" data-iat-tts-vi=\"Monthly\">Monthly</span> Payment</p></td> \n    <td><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"six hundred ten dollars,\" data-iat-tts-vi=\"$610\">$610</span></p></td> \n    <td><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"seven hundred fifty dollars,\" data-iat-tts-vi=\"$750\">$750</span></p></td> \n    <td><p style=\"text-align:center; color:#000000; background-color:transparent; font-size:1.0000em; font-family:Verdana; \"><span class=\"iat-text2speech\" data-iat-tts=\"four hundred dollars,\" data-iat-tts-vi=\"$400\">$400</span></p></td> \n   </tr> \n  </tbody> \n </table> \n</div> \n<p style=\"color:#000000; font-weight:bold; background-color:transparent; \">&nbsp;</p>";

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2605 migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        migration = new Migration2605(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Test
    public void shouldProduceSpanAroundTTSAndGlossary() throws IOException {
        ItemRelease itemRelease = new ItemRelease();
        ItemRelease.Item item = new ItemRelease.Item();
        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setStem(sampleStemContent);
        content.setLanguage(ModelConstants.ItemLanguage.LANG_ENU);
        item.getContent().add(content);
        itemRelease.setItem(item);

        SaItem tiItem = new SaItem("123");

        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(tiItem);

        ImportItem importItem = new ImportItem();
        ItemProps itemProps = new ItemProps();
        SmarterAppMetadata metadata = new SmarterAppMetadata();
        metadata.setSubject("math");

        importItem.setItemProps(itemProps);
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        importItem.setExpandedImportItemPath(Files.createTempDirectory("tes"));
        importItem.setItemImportSourcePath(Files.createTempDirectory("testSrc"));

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition, importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        SaItem migratedItem = (SaItem) migratedEntity.getItemJson();

        assertThat(migratedItem.getCore().getEn().getPrompt()).isNotBlank();
        assert(StringUtils.countMatches(migratedItem.getCore().getEn().getPrompt(),
                "<strong><span class=\"iat-text2speech\"") == 4);
        assert(StringUtils.countMatches(migratedItem.getCore().getEn().getPrompt(),
                "<span class=\"iat-glossary-term\" data-iat-glossary-term-id") == 1);
    }
}
