package org.opentestsystem.ap.migration.migration;


import org.assertj.core.util.Files;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.ItemProps;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;

import java.io.File;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2642Test {

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    private Migration2642 migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        migration = new Migration2642(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void shouldMergeItem() {
        when(dataManager.findSectionsEdited("1")).thenReturn(Collections.emptyList());

        TiItem tiItem = new TiItem("1");
        tiItem.getTextToSpeech().setSightTTSProvided(true);
        tiItem.getCore().getEn().setPrompt("This is the original prompt");

        ItemEntity itemEntity = new ItemEntity("1", "master");
        itemEntity.setItemJson(tiItem);

        File importDir = Files.newTemporaryFolder();
        SmarterAppMetadata smarterAppMetadata = new SmarterAppMetadata();
        smarterAppMetadata.setSubject("MATH");
        ItemRelease itemRelease = new ItemRelease();
        ItemRelease.Item item = new ItemRelease.Item();
        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);
        content.setStem("This is the import prompt");
        item.getContent().add(content);
        itemRelease.setItem(item);

        ItemProps itemProps = new ItemProps();
        itemProps.setBankKey("200");
        itemProps.setImportItemId("1");
        itemProps.setItemId("1");
        itemProps.setItemType(ItemConstants.ItemType.TYPE_TI);

        ImportItem importItem = new ImportItem(itemProps, importDir.toPath(), itemRelease, smarterAppMetadata, importDir.toPath());

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition, importItem);
        ItemEntity migratedEntity = migration.migrateEntity(itemEntity, migrationContext);
        TiItem migratedTiItem = (TiItem) migratedEntity.getItemJson();
        assertThat(migratedTiItem.getCore().getEn().getPrompt()).contains("This is the original prompt");
    }

    @Test(expected = SkipMigration.class)
    public void shouldIgnoreItemDueToEdits() {
        when(dataManager.findSectionsEdited("1")).thenReturn(Collections.singletonList(ItemConstants.Section.SECTION_TEXTTOSPEECH));
        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition);
        migration.migrateEntity(new ItemEntity("1", "master"), migrationContext);
    }
}