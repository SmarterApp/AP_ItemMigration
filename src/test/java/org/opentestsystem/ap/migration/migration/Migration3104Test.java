package org.opentestsystem.ap.migration.migration;

import org.apache.commons.io.FileUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.glossary.GlossaryDialect;
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

@RunWith(MockitoJUnitRunner.class)
public class Migration3104Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration3104 migration;

    private File syncDirectory;

    private File glossaryDirectory;

    private File importDirectory;

    private File importGlossaryDirectory;

    @Before
    public void setUp() {
        migration = new Migration3104(applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);

        syncDirectory = new File(FileUtils.getTempDirectory(), "migration3104Test");
        importDirectory = new File(FileUtils.getTempDirectory(), "migration3104TestImportWordlistDirectory");
        glossaryDirectory = new File(syncDirectory, "glossary");
        importGlossaryDirectory = new File(importDirectory, "glossary");

        final MigrationContext migrationContext = new MigrationContext("", new ApplicationProperties.MigrationDefinition());
        migrationContext.getMigrationDefinition().setRequiresImportFiles(true);

        syncDirectory.mkdir();
        glossaryDirectory.mkdir();
        importDirectory.mkdir();
        importGlossaryDirectory.mkdir();

    }

    @After
    public void tearDown() throws IOException {
        FileUtils.deleteDirectory(syncDirectory);
        FileUtils.deleteDirectory(importDirectory);
    }

    @Test
    public void shouldFindMissingM4aFiles() throws IOException {
        SaItem saItem = new SaItem("123");

        GlossaryTerm term = new GlossaryTerm();
        term.setTerm("test");
        term.setId("1");
        GlossaryDialect glossaryDialect = new GlossaryDialect();
        glossaryDialect.setDefinition("a test");

        String oggFileName = "item_48395_v8_48395_01burmese_glossary_ogg_m4a.ogg";
        String m4aFileName = "item_48395_v8_48395_01burmese_glossary_ogg_m4a.m4a";
        File m4aFile = new File(glossaryDirectory, m4aFileName);
        File oggFile = new File(glossaryDirectory, oggFileName);

        m4aFile.createNewFile();
        oggFile.createNewFile();

        Attachment attachment = new Attachment();
        attachment.setFileName(oggFileName);
        glossaryDialect.getAudioFiles().add(attachment);

        term.getLanguages().getBurmese().getDialects().add(glossaryDialect);

        saItem.getGlossary().getTerms().add(term);
        ItemMerge itemMerge = migration.mergeItem(saItem, mock(Item.class), syncDirectory.toPath());

        GlossaryTerm mergedTerm = itemMerge.getMergedItem().getGlossary().getTerms().get(0);
        GlossaryDialect dialect = mergedTerm.getLanguages().getBurmese().getDialects().get(0);
        assertThat(dialect.getAudioFiles()).hasSize(2);
        List<String> audioFileNames = dialect.getAudioFiles().stream().map(Attachment::getFileName).collect(Collectors.toList());
        File syncGlossaryDir = itemMerge.getAttachmentSyncDir().resolve("glossary").toFile();
        List<String> syncFiles = Arrays.stream(syncGlossaryDir.listFiles()).map(File::getName).collect(Collectors.toList());
        List<String> expectedFileNames = Arrays.asList(m4aFileName, oggFileName);
        assertThat(audioFileNames).containsAll(expectedFileNames);
        assertThat(syncFiles).containsExactly(m4aFileName);
    }

    /**
     * Case sensitivity is driven by the OS and HDD.  Mac default is to be case insensitive so this test may
     * pass regardless of changes on the Mac, but may fail in TeamCity since the agent OS is case sensitive which
     * mimics production.
     **/
    @Test
    public void shouldFindMissingM4aFilesIgnoringCase() throws IOException {
        SaItem saItem = new SaItem("123");

        GlossaryTerm term = new GlossaryTerm();
        term.setTerm("test");
        term.setId("1");
        GlossaryDialect glossaryDialect = new GlossaryDialect();
        glossaryDialect.setDefinition("a test");

        String oggFileName = "item_48395_v8_48395_01burmese_glossary_ogg_m4a.ogg";
        String m4aFileName = "Item_48395_v8_48395_01burmese_glossary_ogg_m4a.m4a";
        File m4aFile = new File(glossaryDirectory, m4aFileName);
        File oggFile = new File(glossaryDirectory, oggFileName);

        m4aFile.createNewFile();
        oggFile.createNewFile();

        Attachment attachment = new Attachment();
        attachment.setFileName(oggFileName);
        glossaryDialect.getAudioFiles().add(attachment);

        term.getLanguages().getBurmese().getDialects().add(glossaryDialect);

        saItem.getGlossary().getTerms().add(term);
        ItemMerge itemMerge = migration.mergeItem(saItem, mock(Item.class), syncDirectory.toPath());

        GlossaryTerm mergedTerm = itemMerge.getMergedItem().getGlossary().getTerms().get(0);
        GlossaryDialect dialect = mergedTerm.getLanguages().getBurmese().getDialects().get(0);
        assertThat(dialect.getAudioFiles()).hasSize(2);
        List<String> audioFileNames = dialect.getAudioFiles().stream().map(Attachment::getFileName).collect(Collectors.toList());
        File syncGlossaryDir = itemMerge.getAttachmentSyncDir().resolve("glossary").toFile();
        List<String> syncFiles = Arrays.stream(syncGlossaryDir.listFiles()).map(File::getName).collect(Collectors.toList());
        List<String> expectedFileNames = Arrays.asList(m4aFileName.toLowerCase(), oggFileName);
        assertThat(audioFileNames).containsAll(expectedFileNames);
        assertThat(syncFiles).containsExactly(m4aFileName.toLowerCase());
    }

    @Test
    public void shouldFindMissingM4aFilesIgnoringCaseInImportZip() throws IOException {
        SaItem saItem = new SaItem("123");

        GlossaryTerm term = new GlossaryTerm();
        term.setTerm("test");
        term.setId("1");
        GlossaryDialect glossaryDialect = new GlossaryDialect();
        glossaryDialect.setDefinition("a test");

        String oggFileName = "item_48395_v8_48395_01burmese_glossary_ogg_m4a.ogg";
        String m4aFileName = "Item_48395_v8_48395_01burmese_glossary_ogg_m4a.m4a";
        File m4aFile = new File(importGlossaryDirectory, m4aFileName);
        File oggFile = new File(importGlossaryDirectory, oggFileName);

        m4aFile.createNewFile();
        oggFile.createNewFile();

        Attachment attachment = new Attachment();
        attachment.setFileName(oggFileName);
        glossaryDialect.getAudioFiles().add(attachment);

        term.getLanguages().getBurmese().getDialects().add(glossaryDialect);

        ImportItem importItem = new ImportItem();
        importItem.setWordListPath(Optional.of(importGlossaryDirectory.toPath()));

        saItem.getGlossary().getTerms().add(term);
        ItemMerge merge = new ItemMerge(saItem, syncDirectory.toPath(), true);
        ItemMerge itemMerge = migration.mergeItemFromImportData(merge, importItem, syncDirectory.toPath());

        GlossaryTerm mergedTerm = itemMerge.getMergedItem().getGlossary().getTerms().get(0);
        GlossaryDialect dialect = mergedTerm.getLanguages().getBurmese().getDialects().get(0);
        assertThat(dialect.getAudioFiles()).hasSize(2);
        List<String> audioFileNames = dialect.getAudioFiles().stream().map(Attachment::getFileName).collect(Collectors.toList());
        File syncGlossaryDir = itemMerge.getAttachmentSyncDir().resolve("glossary").toFile();
        List<String> syncFiles = Arrays.stream(syncGlossaryDir.listFiles()).map(File::getName).collect(Collectors.toList());
        List<String> expectedFileNames = Arrays.asList(m4aFileName.toLowerCase(), oggFileName);
        assertThat(audioFileNames).containsAll(expectedFileNames);
        assertThat(syncFiles).containsExactly(m4aFileName.toLowerCase());
    }
}