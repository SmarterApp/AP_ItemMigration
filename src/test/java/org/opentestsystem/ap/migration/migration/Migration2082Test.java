package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.itembank.attachments.AttachmentValidator;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Glossary;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.glossary.GlossaryDialect;
import org.opentestsystem.ap.common.model.glossary.GlossaryLanguage;
import org.opentestsystem.ap.common.model.glossary.GlossaryLanguages;
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm;
import org.opentestsystem.ap.migration.model.BranchInfo;
import org.opentestsystem.ap.migration.model.ItemInfo;
import org.opentestsystem.ap.migration.model.MigrationDefinition;
import org.opentestsystem.ap.migration.util.Util;

import java.util.Arrays;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2082Test {
    private static final String oggFileName = "never_gonna_give_you_up.ogg";
    private static final String wavFileName = "never_gonna_let_you_down.wav";
    private static final String m4aFileName = "never_gonna_run_around_and_desert_you.m4a";

    @Mock
    private Util mockUtil;

    @Mock
    private GitClient mockGitClient;

    private Migration2082 migration2082;

    @Captor
    private ArgumentCaptor<Item> itemCaptor;

    @Before
    public void setUp() {
        migration2082 = spy(new Migration2082(mockUtil, new AttachmentValidator(new ItemBankProperties())));
    }

    @Test
    public void shouldRemoveInvalidAudioFiles() {
        ItemInfo itemInfo = new ItemInfo(1, "1", Collections.emptyList());
        BranchInfo branchInfo = new BranchInfo("1", "master");
        MigrationDefinition migrationDefinition = new MigrationDefinition("migName", "migDef");

        McItem item = new McItem("123");

        Glossary glossary = new Glossary();
        GlossaryTerm term = new GlossaryTerm();
        GlossaryLanguages languages = new GlossaryLanguages();
        languages.setArabic(createGlossaryLanguage());
        languages.setBurmese(createGlossaryLanguage());
        languages.setCantonese(createGlossaryLanguage());
        languages.setEnglish(createGlossaryLanguage());
        languages.setFilipino(createGlossaryLanguage());
        languages.setHmong(createGlossaryLanguage());
        languages.setKorean(createGlossaryLanguage());
        languages.setMandarin(createGlossaryLanguage());
        languages.setPunjabi(createGlossaryLanguage());
        languages.setRussian(createGlossaryLanguage());
        languages.setSomali(createGlossaryLanguage());
        languages.setSpanish(createGlossaryLanguage());
        languages.setUkrainian(createGlossaryLanguage());
        languages.setVietnamese(createGlossaryLanguage());

        term.setLanguages(languages);
        glossary.setTerms(Collections.singletonList(term));
        item.setGlossary(glossary);

        when(mockGitClient.readModelFile()).thenReturn(item);

        doNothing().when(migration2082).updateItemFiles(itemCaptor.capture(), isA(GitClient.class));

        migration2082.runMigration(itemInfo, branchInfo, migrationDefinition, mockGitClient);

        Item migratedItem = itemCaptor.getValue();

        assertThat(migratedItem).isNotNull();
        assertThat(migratedItem.getGlossary().getTerms()).hasSize(1);

        GlossaryLanguages migratedLanguages = item.getGlossary().getTerms().get(0).getLanguages();

        assertThat(migratedLanguages).isNotNull();

        assertThat(migratedLanguages.getArabic().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getArabic().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getBurmese().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getBurmese().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getCantonese().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getCantonese().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getEnglish().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getEnglish().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getFilipino().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getFilipino().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getHmong().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getHmong().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getKorean().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getKorean().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getMandarin().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getMandarin().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getPunjabi().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getPunjabi().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getRussian().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getRussian().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getSomali().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getSomali().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getSpanish().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getSpanish().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getUkrainian().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getUkrainian().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);

        assertThat(migratedLanguages.getVietnamese().getDialects()).hasSize(1);
        assertThat(migratedLanguages.getVietnamese().getDialects().get(0).getAudioFiles()).extracting(Attachment::getFileName).containsOnly(oggFileName, m4aFileName);
    }

    private GlossaryLanguage createGlossaryLanguage() {
        Attachment oggFile = new Attachment();
        oggFile.setFileName(oggFileName);

        Attachment wavFile = new Attachment();
        wavFile.setFileName(wavFileName);

        Attachment m4a = new Attachment();
        m4a.setFileName(m4aFileName);

        GlossaryDialect dialect = new GlossaryDialect();
        dialect.setAudioFiles(Arrays.asList(oggFile, wavFile, m4a));

        GlossaryLanguage language = new GlossaryLanguage();
        language.setDialects(Collections.singletonList(dialect));

        return language;
    }
}