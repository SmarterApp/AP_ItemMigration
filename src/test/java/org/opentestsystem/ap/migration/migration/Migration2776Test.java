package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.ItemProps;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;

import java.io.IOException;
import java.nio.file.Files;
import java.util.Optional;

import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2776Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2776 migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        when(applicationDependencyProvider.getContentUpdaterFactory()).thenReturn(new ContentUpdaterFactory());

        migration = new Migration2776(applicationDependencyProvider,
                applicationProperties, dataManager, eventProducer,
                dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void shouldRemoveStyleFromElements() throws IOException {
        final String sampleStemContent = "<p style=\"line-height:0.2402in; color:#000000; \"><span id=\"passage_174654_TAG_0_BEGIN\">Read</span>\n" +
                "  the text. Then answer the questions.</p> <br />\n" +
                "<p style=\"line-height:0.2402in; color:#000000; font-weight:bold; \">Macaroni and <span id=\"passage_174654_TAG_1_BEGIN\">Fleas</span></p>\n" +
                "<p style=\"line-height:0.2402in; color:#000000; \">By Erin <span id=\"passage_174654_TAG_2_BEGIN\">Berger</span></p>\n" +
                "<br />\n" +
                "<p style=\"line-height:0.2402in; color:#000000; \">Everyone has a weakness. For me, it’s chocolate\n" +
                "  ice cream. If I had to choose one thing to eat for the rest of my life, that’s what it would be.\n" +
                "  My little brother, Andrew, likes peas. He’s only two years old and hasn’t had chocolate ice\n" +
                "  cream, so I think he’ll change his mind one day. My mom likes popcorn, and my dad loves oranges.\n" +
                "  Our dog, Fleas, likes rawhide chews. She’ll chew on one for days!</p> <br />";

        ItemEntity entity = new ItemEntity("201", "master");
        SaItem item = new SaItem("201");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.of(importItem));

        ItemEntity migratedEntity = migration.migrateEntity(entity);

        SaItem migratedItem = (SaItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(!migratedItem.getCore().getEn()
                .getPrompt().contains("line-height:0.2402in; color:#000000;"));

    }

    @Test(expected = SkipMigration.class)
    public void shouldFailRemoveStyleFromElements() throws IOException {
        final String sampleStemContent = "<p style=\"line-height:0.2402in; color:#000000; \"><span id=\"passage_174654_TAG_0_BEGIN\">Read</span>\n" +
                "  the text. Then answer the questions.</p> <br />\n" +
                "<p style=\"line-height:0.2402in; color:#000000; font-weight:bold; \">Macaroni and <span id=\"passage_174654_TAG_1_BEGIN\">Fleas</span></p>\n" +
                "<p style=\"line-height:0.2402in; color:#000000; \">By Erin <span id=\"passage_174654_TAG_2_BEGIN\">Berger</span></p>\n" +
                "<br />\n" +
                "<p style=\"line-height:0.2402in; color:#000000; \">Everyone has a weakness. For me, it’s chocolate\n" +
                "  ice cream. If I had to choose one thing to eat for the rest of my life, that’s what it would be.\n" +
                "  My little brother, Andrew, likes peas. He’s only two years old and hasn’t had chocolate ice\n" +
                "  cream, so I think he’ll change his mind one day. My mom likes popcorn, and my dad loves oranges.\n" +
                "  Our dog, Fleas, likes rawhide chews. She’ll chew on one for days!</p> <br />";

        ItemEntity entity = new ItemEntity("201000", "master");
        SaItem item = new SaItem("201000");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.of(importItem));

        migration.migrateEntity(entity);

        //System.out.println(migratedItem.getCore().getEn().getPrompt());
    }


    private ImportItem getNewImportItem(String enuPrompt) throws IOException {
        ItemRelease itemRelease = new ItemRelease();
        ItemRelease.Item item = new ItemRelease.Item();
        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setStem(enuPrompt);
        content.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);

        item.getContent().add(content);
        itemRelease.setItem(item);

        ImportItem importItem = new ImportItem();
        ItemProps itemProps = new ItemProps();
        SmarterAppMetadata metadata = new SmarterAppMetadata();
        metadata.setSubject("math");

        importItem.setItemProps(itemProps);
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        importItem.setExpandedImportItemPath(Files.createTempDirectory("tes"));
        importItem.setItemImportSourcePath(Files.createTempDirectory("testSrc"));

        return importItem;
    }
}
