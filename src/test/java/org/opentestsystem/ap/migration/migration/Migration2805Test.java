package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.ItemProps;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.model.MigrationContext;

import java.nio.file.Files;

import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2805Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2805 migration;
    private ItemRelease itemRelease;
    private ImportItem importItem = new ImportItem();
    private ItemProps itemProps = new ItemProps();
    private SmarterAppMetadata metadata = new SmarterAppMetadata();
    private ItemEntity entity;
    private ItemEntity migratedEntity;

    @Before
    public void setUp() throws Exception {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        migration = new Migration2805(applicationProperties,
                dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager,
                applicationDependencyProvider);

        itemRelease = new ItemRelease();
        ItemRelease.Item item = new ItemRelease.Item();
        ItemRelease.Item.Attriblist.Attrib attrib = new ItemRelease.Item.Attriblist.Attrib();
        attrib.setAttid("itm_item_id");
        attrib.setName("Item: ITS ID");
        attrib.setVal("42361");
        item.setAttriblist(new ItemRelease.Item.Attriblist());
        item.getAttriblist().getAttrib().add(attrib);
        itemRelease.setItem(item);

        entity = new ItemEntity("123", "master");

        metadata.setSubject("math");

        importItem.setItemProps(itemProps);
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        importItem.setExpandedImportItemPath(Files.createTempDirectory("tes"));
        importItem.setItemImportSourcePath(Files.createTempDirectory("testSrc"));
    }

    @Test
    public void itShouldSetEbsrPromptFromSingleParagraphQti() {
        EbsrItem ebsrItem = new EbsrItem("123");
        entity.setItemJson(ebsrItem);

        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setStem("");
        content.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);
        content.setQti(new ItemRelease.Item.Content.Qti());
        content.getQti().setValue("<itemBody><p style=\"\">The following question has two parts. First, answer part A. Then, answer part B. </p><choiceInteraction responseIdentifier=\"EBSR1\" shuffle=\"false\" maxChoice=\"1\"><prompt><p style=\"\">Which sentence <span style=\"font-weight:bold; \">best</span> tells the main idea of the passage?</p></prompt><simpleChoice identifier=\"A\"><p style=\"\">School carnivals are a great way to learn and have fun.</p></simpleChoice><simpleChoice identifier=\"B\"><p style=\"\">You shouldn't give away all your best ideas to your friends.</p></simpleChoice><simpleChoice identifier=\"C\"><p style=\"\">If you keep working at something you will be rewarded in the end.</p></simpleChoice><simpleChoice identifier=\"D\"><p style=\"\">Families are important because they help each other when they need it.</p></simpleChoice></choiceInteraction><choiceInteraction responseIdentifier=\"EBSR2\" shuffle=\"false\" maxChoice=\"0\"><prompt><p style=\"\">Which <span style=\"font-weight:bold; \">two</span> details from the passage <span style=\"font-weight:bold; \">best </span>support your answer in Part A?</p></prompt><simpleChoice identifier=\"A\"><p style=\"\"><span id=\"item_42809_TAG_6_BEGIN\">\"Everyone has a game for the school carnival except me.\"</span></p></simpleChoice><simpleChoice identifier=\"B\"><p style=\"\"><span id=\"item_42809_TAG_7_BEGIN\">\"You'll think of something,\" said his mother. \"You always do.\"</span></p></simpleChoice><simpleChoice identifier=\"C\"><p style=\"\"><span id=\"item_42809_TAG_8_BEGIN\">His father sighed. \"Sorry. I'm not much help.\"</span></p></simpleChoice><simpleChoice identifier=\"D\"><p style=\"\"><span id=\"item_42809_TAG_9_BEGIN\">Finally, he knew what he'd do for the carnival.</span></p></simpleChoice><simpleChoice identifier=\"E\"><p style=\"\"><span id=\"item_42809_TAG_10_BEGIN\">Alex's mother was there too, helping with the food.</span></p></simpleChoice></choiceInteraction></itemBody>");
        content.setRationaleoptlist(new ItemRelease.Item.Content.Rationaleoptlist());
        importItem.getItemRelease().getItem().getContent().add(content);

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition, importItem);
        migratedEntity = migration.migrateEntity(entity, migrationContext);

        EbsrItem migratedItem = (EbsrItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().equals("<p>The following question has two parts. First, answer part A. Then, answer part B. </p>"));
    }

    @Test
    public void itShouldSetEbsrPromptFromDoubleParagraphQti() {
        EbsrItem ebsrItem = new EbsrItem("123");
        entity.setItemJson(ebsrItem);

        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setStem("");
        content.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);
        content.setQti(new ItemRelease.Item.Content.Qti());
        content.getQti().setValue("<itemBody><p style=\"\"><p style=\"\">The following question has two parts. First, answer part A. Then, answer part B. </p></p><choiceInteraction responseIdentifier=\"EBSR1\" shuffle=\"false\" maxChoice=\"1\"><prompt><p style=\"\">Which idea from the presentation is <span id=\"item_105594_TAG_1_BEGIN\"><span style=\"font-weight:bold; \">not</span></span> fully supported?</p></prompt><simpleChoice identifier=\"A\"><p style=\"\">how telescopes have been beneficial in the study of the Universe</p></simpleChoice><simpleChoice identifier=\"B\"><p style=\"\">how telescopes on Earth have better visibility into space from mountains</p></simpleChoice><simpleChoice identifier=\"C\"><p style=\"\">why astronomers continued to invent telescopes that were bigger and more powerful</p></simpleChoice><simpleChoice identifier=\"D\"><p style=\"\">why astronomers previously believed that everything in the Universe rotated around the Earth</p></simpleChoice></choiceInteraction><choiceInteraction responseIdentifier=\"EBSR2\" shuffle=\"false\" maxChoice=\"1\"><prompt><p style=\"\">Which additional information could be added to the presentation to support your answer in part <span id=\"item_105594_TAG_2_BEGIN\">A?</span></p></prompt><simpleChoice identifier=\"A\"><p style=\"\">a detailed explanation of how telescopes magnify objects</p></simpleChoice><simpleChoice identifier=\"B\"><p style=\"\">a description of a significant space discovery found using a telescope</p></simpleChoice><simpleChoice identifier=\"C\"><p style=\"\">details explaining how scientific theories were proven before telescopes</p></simpleChoice><simpleChoice identifier=\"D\"><p style=\"\">statistics measuring the average elevation of mountains around the world</p></simpleChoice></choiceInteraction></itemBody>");
        content.setRationaleoptlist(new ItemRelease.Item.Content.Rationaleoptlist());
        importItem.getItemRelease().getItem().getContent().add(content);

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition, importItem);
        migratedEntity = migration.migrateEntity(entity, migrationContext);

        EbsrItem migratedItem = (EbsrItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().equals("<p>The following question has two parts. First, answer part A. Then, answer part B. </p>"));

    }
}
