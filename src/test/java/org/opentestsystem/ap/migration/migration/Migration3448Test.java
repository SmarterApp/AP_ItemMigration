package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.model.attachment.AttachmentSummary;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration3448Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private MigrationContext migrationContext;

    private Migration3448 migration3448;

    @Before
    public void setUp() {
        migration3448 = new Migration3448(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipNonTutItem() {
        SaItem saItem = new SaItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(saItem);

        migration3448.migrateEntity(entity, migrationContext);
    }

    public void shouldMigrateTutItem() {
        TutItem item = new TutItem("1");
        ItemEntity entity = new ItemEntity("1", "master");

        AttachmentSummary valid = AttachmentSummary.builder().versionId("1").timsFileKey("something.html").build();
        AttachmentSummary invalid = AttachmentSummary.builder().versionId("2").timsFileKey("something.bogus").build();

        when(dataStoreAttachmentManager.findAttachmentSummaries(item, "master")).thenReturn(Arrays.asList(valid,invalid));

        ItemEntity updatedEntity = migration3448.migrateEntity(entity, migrationContext);

        List<Attachment> htmlAttachments = updatedEntity.getItemJson().getSaaif().getSupplementalHtmlAttachments();

        assertThat(htmlAttachments).hasSize(1);

        Attachment validAttachment = htmlAttachments.get(0);

        assertThat(validAttachment.getFileName()).isEqualTo("something.html");
        assertThat(validAttachment.getVersionId()).isEqualTo("1");
    }
}