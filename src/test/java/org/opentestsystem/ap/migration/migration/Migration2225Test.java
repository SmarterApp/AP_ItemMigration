package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;

import java.util.Arrays;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2225Test {

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    private Migration2225 migration;

    @Before
    public void setUp() {
        migration = new Migration2225(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void shouldMigrateAslFiles() {
        SaItem item = new SaItem("123");

        Attachment attachment = new Attachment();
        attachment.setFileName("item_123_ASL.mp4");
        attachment.setSection(ModelConstants.Section.SECTION_ASL);

        Attachment attachment2 = new Attachment();
        attachment2.setFileName("item_123_something_else_ASL_STEM.mp4");
        attachment2.setSection(ModelConstants.Section.SECTION_ASL);

        item.getAsl().getAttachments().addAll(Arrays.asList(attachment, attachment2));

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(item);

        when(dataStoreAttachmentManager.renameAttachment(item.getId(), "master", "item_123_ASL.mp4", "item_123_ASL_STEM.mp4")).thenReturn(true);
        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition());
        migration.migrateEntity(itemEntity, migrationContext);

        verify(dataStoreAttachmentManager).renameAttachment(item.getId(), "master", "item_123_ASL.mp4", "item_123_ASL_STEM.mp4");

        assertThat(itemEntity.getItemJson().getAsl().getAttachments()).hasSize(2);

        Optional<Attachment> maybeAttachment = itemEntity.getItemJson().getAsl().getAttachments().stream()
                .filter(attachment1 -> attachment1.getFileName().equals("item_123_ASL_STEM.mp4"))
                .findAny();

        assertThat(itemEntity.getItemJson().getAsl().getAttachments().get(0).getFileName()).isEqualTo("item_123_ASL_STEM.mp4");
        assertThat(maybeAttachment.isPresent()).isTrue();
    }
}