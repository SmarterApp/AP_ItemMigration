package org.opentestsystem.ap.migration.migration;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class Migration2204Test {

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    private Migration2204 migration;

    @Before
    public void setUp() {
        migration = new Migration2204(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void checkSkipWhenItemNotTI() {
        this.assertCheckSkip(new SaItem("123"), "Item is not a TI");
    }

    @Test
    public void checkSkipWhenTiItemScoringNotManagedByIAT() {
        TiItem item = new TiItem("123");
        item.getCore().getScoring().setMachineScoringManagedByIat(false);
        this.assertCheckSkip(item, "TI item scoring is not managed by TIMS");
    }

    private void assertCheckSkip(Item item, String expected) {
        try {
            migration.checkSkip(item);
            Assert.fail("expected skip migration error to be thrown");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo(expected);
        }
    }
}