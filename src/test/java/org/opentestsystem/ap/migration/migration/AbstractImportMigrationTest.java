package org.opentestsystem.ap.migration.migration;

import com.google.common.collect.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.util.MigrationFileUtil;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;
import org.opentestsystem.ap.migration.model.MigrationContext;

import java.nio.file.Path;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_ASL;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_AUDIO;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_GLOSSARY;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_IMAGES;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_TRANSLATIONS;

@RunWith(MockitoJUnitRunner.class)
public class AbstractImportMigrationTest {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private AbstractImportMigration migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);

        migration = new AbstractImportMigration(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider, ItemConstants.ItemType.TYPE_TI) {
            @Override
            protected ItemEntity migrateEntity(final ItemEntity itemEntity, MigrationContext migrationContext) {
                return super.migrateEntity(itemEntity, migrationContext);
            }

            @Override
            protected ItemMerge mergeItem(final Item dataStoreItem, final Item mappedItem, final Path itemSyncDir) {
                return new ItemMerge(dataStoreItem, itemSyncDir, false);
            }

            @Override
            protected Collection<String> getEditedSectionsBlockingMigration() {
                return Collections.emptyList();
            }
        };
    }

    @Test
    public void shouldCollectEditedBranchesBlockingMigration() {
        String itemId = "123";

        // upper case these values to test the method ignores case
        List<String> sectionsEdited = Lists.newArrayList(
                SECTION_ASL,
                SECTION_CORE,
                SECTION_GLOSSARY,
                SECTION_TRANSLATIONS,
                SECTION_AUDIO,
                SECTION_IMAGES
        );

        // using capitalized sections to test ingoring case
        Collection<String> blockingSections = Lists.newArrayList("Core", "Glossary", "Translations");

        ItemEntity entity = new ItemEntity();
        entity.setItemId(itemId);

        AbstractImportMigration migrationSpy = Mockito.spy(migration);

        Mockito.when(dataManager.findSectionsEdited(itemId)).thenReturn(sectionsEdited);
        Mockito.doReturn(blockingSections).when(migrationSpy).getEditedSectionsBlockingMigration();

        List<String> actualSections = migrationSpy.collectEditedBranchesBlockingMigration(entity);

        assertThat(actualSections).containsExactly(SECTION_CORE, SECTION_GLOSSARY, SECTION_TRANSLATIONS);
    }

    @Test
    public void shouldCollectEditedBranchesBlockingMigrationFindingNone() {
        String itemId = "123";

        // setting values here that the migration does not get blocked from
        List<String> sectionsEdited = Lists.newArrayList(
                SECTION_ASL,
                SECTION_AUDIO,
                SECTION_IMAGES
        );

        // these will block the migration but above we make sure none of these are edited
        Collection<String> blockingSections = Lists.newArrayList("Core", "Glossary", "Translations");

        ItemEntity entity = new ItemEntity();
        entity.setItemId(itemId);

        AbstractImportMigration migrationSpy = Mockito.spy(migration);

        Mockito.when(dataManager.findSectionsEdited(itemId)).thenReturn(sectionsEdited);
        Mockito.doReturn(blockingSections).when(migrationSpy).getEditedSectionsBlockingMigration();

        List<String> actualSections = migrationSpy.collectEditedBranchesBlockingMigration(entity);

        // should be empty, nothing edited that blocks the migration
        assertThat(actualSections).isEmpty();
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipMigrationIfTypeNotWanted() {
        SaItem item = new SaItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(item);

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition);

        migration.migrateEntity(entity, migrationContext);
    }
}