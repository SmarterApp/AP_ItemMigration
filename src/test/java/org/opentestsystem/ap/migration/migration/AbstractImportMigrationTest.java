package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;

import java.util.Optional;

import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class AbstractImportMigrationTest {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private AbstractImportMigration migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);

        migration = new AbstractImportMigration(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider, ItemConstants.ItemType.TYPE_TI) {
            @Override
            protected ItemEntity migrateEntity(final ItemEntity itemEntity) {
                return super.migrateEntity(itemEntity);
            }
        };
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipMigrationIfImportCannotBeFound() {
        TiItem item = new TiItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(item);

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.empty());

        migration.migrateEntity(entity);
    }


    @Test(expected = SkipMigration.class)
    public void shouldSkipMigrationIfTypeNotWanted() {
        SaItem item = new SaItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(item);

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.empty());

        migration.migrateEntity(entity);
    }
}