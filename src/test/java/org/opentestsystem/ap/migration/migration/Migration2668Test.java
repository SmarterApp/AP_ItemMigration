package org.opentestsystem.ap.migration.migration;

import lombok.Data;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationMapperUtil;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Date;
import java.time.Instant;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_IMAGES;
import static org.opentestsystem.ap.migration.TestUtil.ITEM_ID;

@RunWith(MockitoJUnitRunner.class)
public class Migration2668Test {

    private Path tempDirectory;

    @Before
    public void setUp() throws Exception {

        this.tempDirectory = Files.createTempDirectory("dedupeOptionImages");

    }

    @After
    public void tearDown() throws IOException {
        if (Objects.nonNull(tempDirectory)) {
            FileUtils.deleteDirectory(tempDirectory.toFile());
        }
    }

    @Test
    public void testEachOptionHasTwoImagesWithMatchingCheckSums() throws IOException {
        String imageFileContent1 = "this is image file content 1";
        String imageFileContent2 = "content here is different than content 1";

        McItem item = new McItem(ITEM_ID);

        item.getImages().getImageResources().add(this.createItemImageResource("1", imageFileContent1));
        item.getImages().getImageResources().add(this.createItemImageResource("2", imageFileContent2));
        item.getImages().getImageResources().add(this.createItemImageResource("3", imageFileContent1));
        item.getImages().getImageResources().add(this.createItemImageResource("4", imageFileContent2));

        String optionTextEnglish = "<p><img title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-07.png\" class=\"place-holder\" /><img title=\"Image Resource 2\" data-iat-image-resource-id=\"2\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-02.png\" class=\"place-holder\" /></p>";
        String optionTextSpanish = "<p><img title=\"Image Resource 3\" data-iat-image-resource-id=\"3\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-03.png\" class=\"place-holder\" /><img title=\"Image Resource 4\" data-iat-image-resource-id=\"4\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-04.png\" class=\"place-holder\" /></p>";

        ItemOption optionEnglish = new ItemOption();
        optionEnglish.setText(optionTextEnglish);

        ItemOption optionSpanish = new ItemOption();
        optionSpanish.setText(optionTextSpanish);

        item.getCore().getEn().getOptions().add(optionEnglish);
        item.getTranslations().getEsp().getOptions().add(optionSpanish);

        Map<Integer, List<String>> parsedEnglish = MigrationMapperUtil.parseItemOptions(
            item.getCore().getEn().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        Map<Integer, List<String>> parsedSpanish = MigrationMapperUtil.parseItemOptions(
            item.getTranslations().getEsp().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        MigrationMapperUtil.removeDuplicateItemOptions(
            item.getTranslations().getEsp().getOptions(),
            parsedEnglish,
            parsedSpanish
        );

        assertThat(item.getTranslations().getEsp().getOptions().get(0).getText()).isEqualTo(StringUtils.EMPTY);
    }

    @Test
    public void testEachOptionHasOneImageWithMatchingCheckSums() throws IOException {
        String imageFileContent1 = "this is image file content 1";

        McItem item = new McItem(ITEM_ID);

        item.getImages().getImageResources().add(this.createItemImageResource("1", imageFileContent1));
        item.getImages().getImageResources().add(this.createItemImageResource("3", imageFileContent1));

        String optionTextEnglish = "<p><img title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-07.png\" class=\"place-holder\" /></p>";
        String optionTextSpanish = "<p><img title=\"Image Resource 3\" data-iat-image-resource-id=\"3\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-03.png\" class=\"place-holder\" /></p>";

        ItemOption optionEnglish = new ItemOption();
        optionEnglish.setText(optionTextEnglish);

        ItemOption optionSpanish = new ItemOption();
        optionSpanish.setText(optionTextSpanish);

        item.getCore().getEn().getOptions().add(optionEnglish);
        item.getTranslations().getEsp().getOptions().add(optionSpanish);

        Map<Integer, List<String>> parsedEnglish = MigrationMapperUtil.parseItemOptions(
            item.getCore().getEn().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        Map<Integer, List<String>> parsedSpanish = MigrationMapperUtil.parseItemOptions(
            item.getTranslations().getEsp().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        MigrationMapperUtil.removeDuplicateItemOptions(
            item.getTranslations().getEsp().getOptions(),
            parsedEnglish,
            parsedSpanish
        );

        assertThat(item.getTranslations().getEsp().getOptions().get(0).getText()).isEqualTo(StringUtils.EMPTY);
    }

    @Test
    public void testWhereOptionTextHasMoreThanImagesItHasText() throws IOException {
        String imageFileContent1 = "this is image file content 1";

        McItem item = new McItem(ITEM_ID);

        item.getImages().getImageResources().add(this.createItemImageResource("1", imageFileContent1));
        item.getImages().getImageResources().add(this.createItemImageResource("3", imageFileContent1));

        String optionTextEnglish = "<p><img title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-07.png\" class=\"place-holder\" /></p>";
        // this HTML contains text and not just images
        String optionTextSpanish = "<p>Here is some text<img title=\"Image Resource 3\" data-iat-image-resource-id=\"3\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-03.png\" class=\"place-holder\" /></p>";

        ItemOption optionEnglish = new ItemOption();
        optionEnglish.setText(optionTextEnglish);

        ItemOption optionSpanish = new ItemOption();
        optionSpanish.setText(optionTextSpanish);

        item.getCore().getEn().getOptions().add(optionEnglish);
        item.getTranslations().getEsp().getOptions().add(optionSpanish);

        Map<Integer, List<String>> parsedEnglish = MigrationMapperUtil.parseItemOptions(
            item.getCore().getEn().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        Map<Integer, List<String>> parsedSpanish = MigrationMapperUtil.parseItemOptions(
            item.getTranslations().getEsp().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        MigrationMapperUtil.removeDuplicateItemOptions(
            item.getTranslations().getEsp().getOptions(),
            parsedEnglish,
            parsedSpanish
        );

        assertThat(item.getTranslations().getEsp().getOptions().get(0).getText()).isEqualTo(optionTextSpanish);
    }

    @Test
    public void testMultipleOptions() throws IOException {
        String imageFileContent1 = "this is image file content 1";

        McItem item = new McItem(ITEM_ID);

        item.getImages().getImageResources().add(this.createItemImageResource("1", imageFileContent1));
        item.getImages().getImageResources().add(this.createItemImageResource("3", imageFileContent1));

        String content1 = "<p><img title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-07.png\" class=\"place-holder\" /></p>";

        ItemOption engOpt1 = new ItemOption();
        engOpt1.setText(content1);

        ItemOption engOpt2 = new ItemOption();
        engOpt2.setText(content1 + " english");

        ItemOption esnOpt1 = new ItemOption();
        esnOpt1.setText(content1);

        ItemOption esnOpt2 = new ItemOption();
        esnOpt2.setText(content1 + " spanish");

        item.getCore().getEn().getOptions().add(engOpt1);
        item.getCore().getEn().getOptions().add(engOpt2);
        item.getTranslations().getEsp().getOptions().add(esnOpt1);
        item.getTranslations().getEsp().getOptions().add(esnOpt2);

        Map<Integer, List<String>> parsedEnglish = MigrationMapperUtil.parseItemOptions(
            item.getCore().getEn().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        Map<Integer, List<String>> parsedSpanish = MigrationMapperUtil.parseItemOptions(
            item.getTranslations().getEsp().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        MigrationMapperUtil.removeDuplicateItemOptions(
            item.getTranslations().getEsp().getOptions(),
            parsedEnglish,
            parsedSpanish
        );

        assertThat(item.getTranslations().getEsp().getOptions().get(0).getText()).isEqualTo(StringUtils.EMPTY);
        assertThat(item.getTranslations().getEsp().getOptions().get(1).getText()).isEqualTo(content1 + " spanish");
    }

    @Test
    public void testEachOptionHasTwoImagesWithNonMatchingCheckSums() throws IOException {
        String imageFileContent1 = "this is image file content 1";
        String imageFileContent2 = "content here is different than content 1";

        McItem item = new McItem(ITEM_ID);

        item.getImages().getImageResources().add(this.createItemImageResource("1", imageFileContent1));
        item.getImages().getImageResources().add(this.createItemImageResource("2", imageFileContent2));
        // here we are throwing the checksum off
        item.getImages().getImageResources().add(this.createItemImageResource("3", imageFileContent1 + " more text"));
        item.getImages().getImageResources().add(this.createItemImageResource("4", imageFileContent2));

        String optionTextEnglish = "<p><img title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-07.png\" class=\"place-holder\" /><img title=\"Image Resource 2\" data-iat-image-resource-id=\"2\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-02.png\" class=\"place-holder\" /></p>";
        String optionTextSpanish = "<p><img title=\"Image Resource 3\" data-iat-image-resource-id=\"3\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-03.png\" class=\"place-holder\" /><img title=\"Image Resource 4\" data-iat-image-resource-id=\"4\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-04.png\" class=\"place-holder\" /></p>";

        ItemOption optionEnglish = new ItemOption();
        optionEnglish.setText(optionTextEnglish);

        ItemOption optionSpanish = new ItemOption();
        optionSpanish.setText(optionTextSpanish);

        item.getCore().getEn().getOptions().add(optionEnglish);
        item.getTranslations().getEsp().getOptions().add(optionSpanish);

        Map<Integer, List<String>> parsedEnglish = MigrationMapperUtil.parseItemOptions(
            item.getCore().getEn().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        Map<Integer, List<String>> parsedSpanish = MigrationMapperUtil.parseItemOptions(
            item.getTranslations().getEsp().getOptions(), item.getImages().getImageResources(), this.tempDirectory);

        MigrationMapperUtil.removeDuplicateItemOptions(
            item.getTranslations().getEsp().getOptions(),
            parsedEnglish,
            parsedSpanish
        );

        assertThat(item.getTranslations().getEsp().getOptions().get(0).getText()).isEqualTo(optionTextSpanish);
    }


    // ---------------------------------------------------

    private ItemImageResource createItemImageResource(String id, String content) throws IOException {
        String filename = "image_" + id + ".png";
        Attachment attachment = new Attachment(filename, Date.from(Instant.now()), SECTION_IMAGES);
        attachment.setFileName(filename);

        ItemImageResource resource = new ItemImageResource();
        resource.setId(id);
        resource.setProductionFile(attachment);

        this.createTempFile(filename, content);

        return resource;
    }

    private void createTempFile(String filename, String content) throws IOException {
        Path path = this.tempDirectory.resolve(filename);
        Files.write(path, content.getBytes(StandardCharsets.UTF_8));
    }

    // ------------------------------------------------------------------------

    @Data
    static class ParsedOption {
        Map<Integer, ParsedImage> images = new HashMap();
    }

    @Data
    static class ParsedImage {
        final String filename;
        final String checkSum;
    }
}