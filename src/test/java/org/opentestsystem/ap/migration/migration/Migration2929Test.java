package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.model.glossary.GlossaryDialect;
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_ASL;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_AUDIO;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_BRAILLE;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CC;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_GLOSSARY;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_IMAGES;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_METADATA;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_REVIEW;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_TEXTTOSPEECH;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_TRANSLATIONS;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_WORKFLOW;

@RunWith(MockitoJUnitRunner.class)
public class Migration2929Test {

    private static final MigrationContext MIGRATION_CONTEXT = new MigrationContext("",new ApplicationProperties.MigrationDefinition());

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2929 migration;

    private ItemEntity entity;

    @Before
    public void setup() {
        migration = new Migration2929(
            applicationDependencyProvider,
            applicationProperties,
            dataManager,
            dataStoreItemManager,
            dataStoreUtility,
            dataStoreAttachmentManager);

        entity = new ItemEntity();
    }

    @Test
    public void testShouldMigrateBranch() {
        entity.setBranchName(BRANCH_MASTER);
        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();
        entity.setBranchName(SECTION_GLOSSARY);
        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();

        entity.setBranchName(SECTION_CORE);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_BRAILLE);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_ASL);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_CC);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_IMAGES);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_AUDIO);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_TRANSLATIONS);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_WORKFLOW);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_TEXTTOSPEECH);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_REVIEW);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(SECTION_METADATA);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
    }

    @Test
    public void testSkipMigrationWhenItemIsTutorial() {
        this.assertSkipMigration(
            new TutItem("123abc"),
            "item is a tutorial, tutorials don't have glossary");
    }

    @Test
    public void testSkipMigrationWhenItemGlossaryIsNull() {
        Item item = new SaItem("123abc");
        item.setGlossary(null);
        this.assertSkipMigration(
            item,
            "item glossary has no term languages for Filipino or Punjabi with dialect sizes greater than 1");
    }

    @Test
    public void testSkipMigrationWhenItemGlossaryDialectSizeLessThan2() {
        Item item = new SaItem("123abc");

        // both languages have only one item in their dialects
        GlossaryTerm term = new GlossaryTerm();
        term.getLanguages().filipino.dialects.add(new GlossaryDialect("9", "filipino-one"));
        term.getLanguages().punjabi.dialects.add(new GlossaryDialect("9", "punjabi-one"));

        item.getGlossary().getTerms().add(term);

        this.assertSkipMigration(
            item,
            "item glossary has no term languages for Filipino or Punjabi with dialect sizes greater than 1");
    }

    @Test
    public void testSkipMigrationWhenItemGlossaryDialectSize2OrGreater() {
        Item item = new SaItem("123abc");

        // both languages have only one item in their dialects
        GlossaryTerm term = new GlossaryTerm();
        term.getLanguages().filipino.dialects.add(new GlossaryDialect("1", "filipino-one"));
        term.getLanguages().filipino.dialects.add(new GlossaryDialect("1", "filipino-two"));
        term.getLanguages().punjabi.dialects.add(new GlossaryDialect("1", "punjabi-one"));
        term.getLanguages().punjabi.dialects.add(new GlossaryDialect("1", "punjabi-two"));

        item.getGlossary().getTerms().add(term);

        // no error should be thrown
        this.migration.checkSkip(item);
    }

    void assertSkipMigration(Item item, String expectedErrorMsg) {
        try {
            this.migration.checkSkip(item);
            fail("expected SkipMigration exception to be thrown");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo(expectedErrorMsg);
        }
    }

    @Test
    public void testReIndexGlossaryOneTerm() {
        SaItem item = new SaItem("123abc");
        item.getGlossary().getTerms().add(this.generateTerm());

        this.migration.reIndexGlossary(item.getGlossary());

        this.assertTerm(item.getGlossary().getTerms().get(0));

        // test when there is less than 2 dialects
        GlossaryTerm term = new GlossaryTerm();
        term.getLanguages().filipino.dialects.add(new GlossaryDialect("9", "filipino-one"));
        term.getLanguages().punjabi.dialects.add(new GlossaryDialect("9", "punjabi-one"));

        item.getGlossary().getTerms().clear();
        item.getGlossary().getTerms().add(term);

        this.migration.reIndexGlossary(item.getGlossary());
        GlossaryTerm mappedTerm = item.getGlossary().getTerms().get(0);

        // nothing should have changed
        assertThat(mappedTerm.getLanguages().filipino.dialects.get(0).getId()).isEqualTo("9");
        assertThat(mappedTerm.getLanguages().punjabi.dialects.get(0).getId()).isEqualTo("9");
    }

    @Test
    public void testReIndexGlossaryTwoTerm() {
        SaItem item = new SaItem("123abc");
        item.getGlossary().getTerms().add(this.generateTerm());
        item.getGlossary().getTerms().add(this.generateTerm());

        this.migration.reIndexGlossary(item.getGlossary());

        this.assertTerm(item.getGlossary().getTerms().get(0));
        this.assertTerm(item.getGlossary().getTerms().get(1));
    }

    @Test
    public void testMigrateEntity() {
        SaItem item = new SaItem("123abc");
        item.getGlossary().getTerms().add(this.generateTerm());
        item.getGlossary().getTerms().add(this.generateTerm());

        this.entity.setBranchName(BRANCH_MASTER);
        this.entity.setItemJson(item);

        this.migration.migrateEntity(entity, MIGRATION_CONTEXT);

        this.assertTerm(item.getGlossary().getTerms().get(0));
        this.assertTerm(item.getGlossary().getTerms().get(1));
    }

    private void assertTerm(GlossaryTerm term) {
        // dialect IDs are 2 where expected
        assertThat(term.getLanguages().filipino.dialects.get(0).getId()).isEqualTo("1");
        assertThat(term.getLanguages().filipino.dialects.get(1).getId()).isEqualTo("2");
        assertThat(term.getLanguages().punjabi.dialects.get(0).getId()).isEqualTo("1");
        assertThat(term.getLanguages().punjabi.dialects.get(1).getId()).isEqualTo("2");
        assertThat(term.getLanguages().russian.dialects.get(0).getId()).isEqualTo("1");
        assertThat(term.getLanguages().russian.dialects.get(1).getId()).isEqualTo("1");
    }

    private GlossaryTerm generateTerm() {
        GlossaryTerm term = new GlossaryTerm();
        // notice we are setting the same ID of 1 on all dialects
        term.getLanguages().filipino.dialects.add(new GlossaryDialect("1", "filipino-one"));
        term.getLanguages().filipino.dialects.add(new GlossaryDialect("1", "filipino-two"));
        term.getLanguages().punjabi.dialects.add(new GlossaryDialect("1", "punjabi-one"));
        term.getLanguages().punjabi.dialects.add(new GlossaryDialect("1", "punjabi-two"));
        term.getLanguages().russian.dialects.add(new GlossaryDialect("1", "russian-one"));
        term.getLanguages().russian.dialects.add(new GlossaryDialect("1", "russian-two"));
        return term;
    }
}