package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.content.TextEditorTypeEnums;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class Migration3306Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private MigrationContext migrationContext;

    private Migration3306 migration3306;

    private SaItem mathSaItem = new SaItem("42");
    private SaItem elaSaItem = new SaItem("13");
    private SaItem noSubjectSaItem = new SaItem("99");

    @Before
    public void setUp() {
        migration3306 = new Migration3306(applicationDependencyProvider,
                applicationProperties,
                dataManager,
                dataStoreItemManager,
                dataStoreUtility,
                dataStoreAttachmentManager);

        mathSaItem.getCore().getMetadata().setSubject(ModelConstants.ItemSubject.SUBJECT_MATH);
        elaSaItem.getCore().getMetadata().setSubject(ModelConstants.ItemSubject.SUBJECT_ELA);
        noSubjectSaItem.getCore().getMetadata().setSubject("");
    }

    @Test
    public void shouldSetTheTextEditorTypeValueToTheAppropriateDefaultBasedOnSubject() {
        final ItemEntity mathSaItemEntity = new ItemEntity("42", "master");
        mathSaItemEntity.setItemJson(mathSaItem);

        final ItemEntity result = migration3306.migrateEntity(mathSaItemEntity, migrationContext);

        final SaItem migratedMathSaItem = (SaItem) result.getItemJson();

        assertThat(migratedMathSaItem.getResponseType()).isEqualTo("HTMLEditor");
        assertThat(migratedMathSaItem.getCore().getEn().getTextEditorType())
                .isEqualByComparingTo(TextEditorTypeEnums.RichText);
    }

    @Test
    public void shouldSetTextEditorTypeToPlainTextForElaSaItems() {
        final ItemEntity elaSaItemEntity = new ItemEntity("13", "master");
        elaSaItemEntity.setItemJson(elaSaItem);

        final ItemEntity result = migration3306.migrateEntity(elaSaItemEntity, migrationContext);

        final SaItem migratedElaSaItem = (SaItem) result.getItemJson();

        assertThat(migratedElaSaItem.getResponseType()).isEqualTo("PlainText");
        assertThat(migratedElaSaItem.getCore().getEn().getTextEditorType())
                .isEqualByComparingTo(TextEditorTypeEnums.PlainText);
    }

    @Test
    public void shouldSetTextEditorTypeToNoneSelectedForItemsWithNoSubject() {
        final ItemEntity noSubjectSaItemEntity = new ItemEntity("99", "master");
        noSubjectSaItemEntity.setItemJson(noSubjectSaItem);

        final ItemEntity result = migration3306.migrateEntity(noSubjectSaItemEntity, migrationContext);

        final SaItem migratedNoSubjectItem = (SaItem) result.getItemJson();

        assertThat(migratedNoSubjectItem.getResponseType()).isEqualTo("");
        assertThat(migratedNoSubjectItem.getCore().getEn().getTextEditorType())
                .isEqualByComparingTo(TextEditorTypeEnums.NoneSelected);
    }

    @Test(expected = SkipMigration.class)
    public void shouldNotMigrateItemsThatAreNotSaType() {
        final McItem mcItem = new McItem("667");
        final ItemEntity mcItemEntity = new ItemEntity("667", "master");
        mcItemEntity.setItemJson(mcItem);

        migration3306.migrateEntity(mcItemEntity, migrationContext);
    }
}
