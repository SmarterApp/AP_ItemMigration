package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.ServerManaged;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class Migration2669Test {

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    private Migration2669 migration;

    @Before
    public void setUp() {
        migration = new Migration2669(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void shouldMigrateAssessmentItem() {
        SaItem saItem = new SaItem("123");
        saItem.setVersion("1");
        saItem.setItsId("its");

        ItemMetadata metadata = saItem.getCore().getMetadata();

        metadata.setIntendedGrade("4");
        metadata.setSubject("Math");
        metadata.setPrimaryClaim("1");
        metadata.setPrimaryContentDomain("OA");
        metadata.setPrimaryTarget("A");
        metadata.setPrimaryCommonCoreStandard("www");
        metadata.setContentTaskModel("qq");
        metadata.setPrimaryEmphasis("m");
        metadata.setPrimaryTargetSet("TS01");

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(saItem);

        MigrationContext migrationContext = new MigrationContext("",new ApplicationProperties.MigrationDefinition());
        Item migratedItem = migration.migrateEntity(itemEntity, migrationContext).getItemJson();
        ServerManaged serverManaged = migratedItem.getServerManaged();

        assertThat(serverManaged.getId()).isEqualTo("123");
        assertThat(serverManaged.getItsId()).isEqualTo("its");
        assertThat(serverManaged.getVersion()).isEqualTo("1");
        assertThat(serverManaged.getPrimaryEnhancedId()).isNotEmpty();
        assertThat(serverManaged.getSecondaryEnhancedId()).isEmpty();
        assertThat(serverManaged.getTertiaryEnhancedId()).isEmpty();
        assertThat(serverManaged.getQuaternaryEnhancedId()).isEmpty();
    }

    @Test
    public void shouldMigrateTutItem() {
        TutItem tutItem = new TutItem("123");
        tutItem.setVersion("1");
        tutItem.setItsId("its");

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(tutItem);
        MigrationContext migrationContext = new MigrationContext("",new ApplicationProperties.MigrationDefinition());
        Item migratedItem = migration.migrateEntity(itemEntity, migrationContext).getItemJson();
        ServerManaged serverManaged = migratedItem.getServerManaged();

        assertThat(serverManaged.getId()).isEqualTo("123");
        assertThat(serverManaged.getItsId()).isEqualTo("its");
        assertThat(serverManaged.getVersion()).isEqualTo("1");
        assertThat(serverManaged.getPrimaryEnhancedId()).isEmpty();
        assertThat(serverManaged.getSecondaryEnhancedId()).isEmpty();
        assertThat(serverManaged.getTertiaryEnhancedId()).isEmpty();
        assertThat(serverManaged.getQuaternaryEnhancedId()).isEmpty();
    }

    @Test
    public void shouldMigrateStimItem() {
        StimItem stimItem = new StimItem("123");
        stimItem.setVersion("1");
        stimItem.setItsId("its");

        ItemMetadata metadata = stimItem.getCore().getMetadata();
        metadata.setIntendedGrade("4");
        metadata.setSubject("Math");

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(stimItem);
        MigrationContext migrationContext = new MigrationContext("",new ApplicationProperties.MigrationDefinition());
        Item migratedItem = migration.migrateEntity(itemEntity, migrationContext).getItemJson();

        ServerManaged serverManaged = migratedItem.getServerManaged();

        assertThat(serverManaged.getId()).isEqualTo("123");
        assertThat(serverManaged.getItsId()).isEqualTo("its");
        assertThat(serverManaged.getVersion()).isEqualTo("1");
        assertThat(serverManaged.getPrimaryEnhancedId()).isEmpty();
        assertThat(serverManaged.getSecondaryEnhancedId()).isEmpty();
        assertThat(serverManaged.getTertiaryEnhancedId()).isEmpty();
        assertThat(serverManaged.getQuaternaryEnhancedId()).isEmpty();
    }
}