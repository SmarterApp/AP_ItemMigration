package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Asl;
import org.opentestsystem.ap.common.model.Braille;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.model.SkipMigration;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_ASL;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_BRAILLE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;

@RunWith(MockitoJUnitRunner.class)
public class Migration2807Test {

    private static final MigrationContext MIGRATION_CONTEXT = new MigrationContext("",new ApplicationProperties.MigrationDefinition());

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2807 migration;


    @Before
    public void setup() {
        migration = new Migration2807(
            applicationDependencyProvider,
            applicationProperties,
            dataManager,
            eventProducer,
            dataStoreUtility,
            dataStoreAttachmentManager);
    }

    @Test
    public void testShouldMigrateBranch() {
        Item item = Mockito.mock(Item.class);

        ItemEntity entity = new ItemEntity();
        entity.setBranchName(BRANCH_MASTER);
        entity.setItemJson(item);

        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();

        entity.setBranchName(SECTION_ASL);
        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();

        entity.setBranchName(SECTION_BRAILLE);
        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();

        entity.setBranchName(SECTION_CORE);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
    }

    @Test
    public void testShouldMigrateEntity() {
        Asl asl = new Asl();
        asl.addAttachment("asl_file");

        Braille braille = new Braille();
        braille.addAttachment("braille_file");

        Item item = Mockito.mock(Item.class);
        when(item.getAsl()).thenReturn(asl);
        when(item.getBraille()).thenReturn(braille);

        ItemEntity entity = new ItemEntity();
        entity.setBranchName(BRANCH_MASTER);
        entity.setItemJson(item);

        ItemEntity migratedEntity = this.migration.migrateEntity(entity, MIGRATION_CONTEXT);
        assertThat(migratedEntity).isEqualTo(entity);

        asl.getAttachments().clear();
        migratedEntity = this.migration.migrateEntity(entity, MIGRATION_CONTEXT);
        assertThat(migratedEntity).isEqualTo(entity);

        braille.getAttachments().clear();
        try {
            this.migration.migrateEntity(entity, MIGRATION_CONTEXT);
            fail("Expected skip migration exception");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo("there are no braille or asl attachments");
        }
    }
}
