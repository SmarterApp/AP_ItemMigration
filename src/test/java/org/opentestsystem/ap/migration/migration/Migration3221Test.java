package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.TestUtil;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration3221Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration3221 migration;

    @Before
    public void setUp() throws Exception {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        when(applicationDependencyProvider.getContentUpdaterFactory()).thenReturn(new ContentUpdaterFactory());
        migration = new Migration3221(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void shouldRemoveDuplicateImageResources() {
        MiItem item = new MiItem("1");
        item.getImages().setImageResources(createDuplicateImageResources());
        ItemEntity entity = new ItemEntity("1", "master");
        entity.setItemJson(item);

        ItemEntity migratedEntity = migration.migrateEntity(entity, mock(MigrationContext.class));

        assertThat(migratedEntity.getItemJson().getImages().getImageResources().size()).isEqualTo(10);
    }

    private List<ItemImageResource> createDuplicateImageResources() {
        List<ItemImageResource> resources = new ArrayList<>();
        int resourceId = 1;
        resources.addAll(createImageResources(resourceId, null, 3));
        resources.addAll(createImageResources(resourceId, "fileName100.svg", 1));
        resources.addAll(createImageResources(resourceId, "fileName200.svg", 150));
        resources.addAll(createImageResources(resourceId, "fileName300.svg", 20));
        resources.addAll(createImageResources(resourceId, "fileName400.svg", 1));
        resources.addAll(createImageResources(resourceId, "fileName500.svg", 90));
        resources.addAll(createImageResources(resourceId, "fileName600.svg", 500));
        resources.addAll(createImageResources(resourceId, "fileName700.svg", 1));
        return resources;
    }

    private List<ItemImageResource> createImageResources(int resourceId, String productionFileName, int count) {
        List<ItemImageResource> resources = new ArrayList<>();
        for (int i=0; i< count; i++) {
            resources.add(TestUtil.newItemImageResource(Integer.toString(resourceId), productionFileName));
            resourceId++;
        }
        return resources;
    }

}
