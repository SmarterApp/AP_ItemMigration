package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.model.JsonModelAssembler;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.StringAssembler;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.ItemProps;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.TestUtil;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration3221Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private SaaifAssembler saaifAssembler;

    @Mock
    private JsonModelAssembler jsonModelAssembler;

    @Mock
    private StringAssembler stringAssembler;

    private Migration3221 migration;

    private String PROMPT = "<p>test test2</p><img class=\"place-holder\" title=\"Image Resource 4\" data-iat-image-resource-id=\"4\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" />";

    private String ITEM_STRING =
            "    \"attachments\" : [ ],\n" +
            "    \"contentUpdateNeeds\" : [ ],\n" +
            "    \"en\" : {\n" +
            "      \"exemplarResponses\" : [ ],\n" +
            "      \"isManagedByIat\" : true,\n" +
            "      \"isProvided\" : true,\n" +
            "      \"isRequired\" : \"true\",\n" +
            "      \"prompt\" : \"" + PROMPT + "\",\n" +
            "      \"rubrics\" : [ ],\n" +
            "      \"updatedDate\" : \"2019-09-18T18:22:32.978Z\"\n" +
            "    }";

    @Before
    public void setUp() throws Exception {
        AppAssembler appAssembler = new AppAssembler(saaifAssembler, jsonModelAssembler, stringAssembler);

        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        when(applicationDependencyProvider.getContentUpdaterFactory()).thenReturn(new ContentUpdaterFactory());
        when(applicationDependencyProvider.getAppAssembler()).thenReturn(appAssembler);
        when(appAssembler.getJsonModelAssembler().toStringItem(any())).thenReturn(ITEM_STRING);
        migration = new Migration3221(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, appAssembler);
    }

    @Test
    public void shouldRemoveDuplicateImageResources() throws Exception{
        MiItem miItem = new MiItem("1");
        miItem.getImages().setImageResources(createDuplicateImageResources());
        miItem.getGlossary().setTerms(createGlossaryTerms());
        miItem.getCore().getEn().setPrompt(PROMPT);
        ItemEntity entity = new ItemEntity("1", "master");
        entity.setItemJson(miItem);

        ItemEntity migratedEntity = migration.migrateEntity(entity, mock(MigrationContext.class));

        assertThat(migratedEntity.getItemJson().getImages().getImageResources().size()).isEqualTo(10);
    }

    private List<ItemImageResource> createDuplicateImageResources() {
        List<ItemImageResource> resources = new ArrayList<>();
        ResourceCount resourceCount = new ResourceCount(1);
        resources.addAll(createImageResources(resourceCount, null, 3));
        resources.addAll(createImageResources(resourceCount, "fileName100.svg", 1));
        resources.addAll(createImageResources(resourceCount, "fileName200.svg", 10));
        resources.addAll(createImageResources(resourceCount, "fileName300.svg", 20));
        resources.addAll(createImageResources(resourceCount, "fileName100.svg", 15));
        resources.addAll(createImageResources(resourceCount, "fileName400.svg", 1));
        resources.addAll(createImageResources(resourceCount, "fileName500.svg", 90));
        resources.addAll(createImageResources(resourceCount, "fileName600.svg", 500));
        resources.addAll(createImageResources(resourceCount, "fileName700.svg", 1));
        return resources;
    }

    private List<ItemImageResource> createImageResources(ResourceCount resourceCount, String productionFileName, int count) {
        List<ItemImageResource> resources = new ArrayList<>();
        for (int i=0; i< count; i++) {
            resources.add(TestUtil.newItemImageResource(Integer.toString(resourceCount.value), productionFileName));
            resourceCount.value++;
        }
        return resources;
    }

    private List<GlossaryTerm> createGlossaryTerms() {
        List<GlossaryTerm> terms = new ArrayList<>();

        GlossaryTerm term1 = new GlossaryTerm();
        GlossaryTerm.initialize(term1);
        term1.setIllustrationImageResourceId("2");
        terms.add(term1);

        GlossaryTerm term2 = new GlossaryTerm();
        GlossaryTerm.initialize(term2);
        term2.setIllustrationImageResourceId("10");
        terms.add(term2);

        return terms;
    }

    private class ResourceCount {
        private int value;

        ResourceCount(int value) {
            this.value = value;
        }
    }

}
