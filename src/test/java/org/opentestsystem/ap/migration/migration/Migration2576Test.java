package org.opentestsystem.ap.migration.migration;

import org.gitlab4j.api.models.RepositoryFile;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Glossary;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.glossary.GlossaryDialect;
import org.opentestsystem.ap.common.model.glossary.GlossaryLanguages;
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2576Test {

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private GitlabClient mockGitlabClient;

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    private Migration2576 migration;

    @Before
    public void setUp() {
        migration = new Migration2576(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, mockGitlabClient);
    }

    @Test(expected = SkipMigration.class)
    public void itShouldSetNothingIfNotImported() {
        Item item = new SaItem("123");
        Glossary glossary = item.getGlossary();

        glossary.setTranslatedGlossaryProvided(true);
        glossary.setTranslatedGlossaryRequired("true");
        glossary.setIllustratedGlossaryProvided(true);
        glossary.setIllustratedGlossaryRequired("true");
        glossary.setEnglishGlossaryProvided(true);

        when(mockGitlabClient.lookUpFileOnMaster("123", "import.zip")).thenReturn(Optional.empty());

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(item);

        itemEntity = migration.migrateEntity(itemEntity);
    }

    @Test
    public void itShouldTrueWhenEverythingProvided() {
        Item item = new SaItem("123");
        Glossary glossary = item.getGlossary();

        GlossaryTerm term = new GlossaryTerm();
        GlossaryLanguages languages = new GlossaryLanguages();
        GlossaryDialect english = new GlossaryDialect();
        english.setDefinition("def");
        GlossaryDialect translatedDialect = new GlossaryDialect();
        translatedDialect.setDefinition("def");
        List<GlossaryDialect> englishDialects = Collections.singletonList(english);
        List<GlossaryDialect> translatedDialects = Collections.singletonList(translatedDialect);

        languages.getEnglish().setDialects(englishDialects);
        languages.getMandarin().setDialects(translatedDialects);
        languages.getKorean().setDialects(translatedDialects);
        languages.getHmong().setDialects(translatedDialects);
        languages.getFilipino().setDialects(translatedDialects);
        languages.getCantonese().setDialects(translatedDialects);
        languages.getArabic().setDialects(translatedDialects);
        languages.getBurmese().setDialects(translatedDialects);
        languages.getPunjabi().setDialects(translatedDialects);
        languages.getRussian().setDialects(translatedDialects);
        languages.getSomali().setDialects(translatedDialects);
        languages.getSpanish().setDialects(translatedDialects);
        languages.getUkrainian().setDialects(translatedDialects);
        languages.getVietnamese().setDialects(translatedDialects);
        term.setLanguages(languages);
        term.setIllustrationImageResourceId("id");

        glossary.getTerms().add(term);

        when(mockGitlabClient.lookUpFileOnMaster("123", "import.zip")).thenReturn(Optional.of(mock(RepositoryFile.class)));

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(item);

        itemEntity = migration.migrateEntity(itemEntity);

        Glossary migratedGlossary = itemEntity.getItemJson().getGlossary();
        assertThat(migratedGlossary.isIllustratedGlossaryProvided()).isTrue();
        assertThat(migratedGlossary.isEnglishGlossaryProvided()).isTrue();
        assertThat(migratedGlossary.isTranslatedGlossaryProvided()).isTrue();
        assertThat(migratedGlossary.getIllustratedGlossaryRequired()).isEqualTo("true");
        assertThat(migratedGlossary.getTranslatedGlossaryRequired()).isEqualTo("true");
    }

    @Test
    public void itShouldHaveEnglishAsNotProvidedWhenNoEnglishDefinition() {
        Item item = new SaItem("123");
        Glossary glossary = item.getGlossary();

        GlossaryTerm term = new GlossaryTerm();
        GlossaryLanguages languages = new GlossaryLanguages();
        GlossaryDialect translatedDialect = new GlossaryDialect();
        translatedDialect.setDefinition("def");
        List<GlossaryDialect> translatedDialects = Collections.singletonList(translatedDialect);

        languages.getMandarin().setDialects(translatedDialects);
        term.setLanguages(languages);
        term.setIllustrationImageResourceId("id");

        glossary.getTerms().add(term);

        when(mockGitlabClient.lookUpFileOnMaster("123", "import.zip")).thenReturn(Optional.of(mock(RepositoryFile.class)));

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(item);

        itemEntity = migration.migrateEntity(itemEntity);

        Glossary migratedGlossary = itemEntity.getItemJson().getGlossary();
        assertThat(migratedGlossary.isIllustratedGlossaryProvided()).isTrue();
        assertThat(migratedGlossary.isEnglishGlossaryProvided()).isFalse();
        assertThat(migratedGlossary.isTranslatedGlossaryProvided()).isTrue();
        assertThat(migratedGlossary.getIllustratedGlossaryRequired()).isEqualTo("true");
        assertThat(migratedGlossary.getTranslatedGlossaryRequired()).isEqualTo("true");
    }
}