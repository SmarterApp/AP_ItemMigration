package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

@RunWith(MockitoJUnitRunner.class)
public class Migration3204Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private MigrationContext migrationContext;

    private Migration3204 migration3204;

    @Before
    public void Setup() {
        migration3204 = new Migration3204(applicationDependencyProvider,
                applicationProperties,
                dataManager,
                dataStoreItemManager,
                dataStoreUtility,
                dataStoreAttachmentManager);
    }

    @Test
    public void shouldNotMigrateEqOrGiOrTiItems() {
        final EqItem eqItem = new EqItem("13");
        final GiItem giItem = new GiItem("14");
        final TiItem tiItem = new TiItem("15");

        final ItemEntity eqItemEntity = new ItemEntity("13", "master");
        eqItemEntity.setItemJson(eqItem);

        final ItemEntity giItemEntity = new ItemEntity("14", "master");
        giItemEntity.setItemJson(giItem);

        final ItemEntity tiItemEntity = new ItemEntity("15", "master");
        tiItemEntity.setItemJson(tiItem);

        // Skip migration for an EQ item entity
        assertThatThrownBy(() -> migration3204.migrateEntity(eqItemEntity, migrationContext))
                .isInstanceOf(SkipMigration.class);

        // Skip migration for a GI item entity
        assertThatThrownBy(() -> migration3204.migrateEntity(giItemEntity, migrationContext))
                .isInstanceOf(SkipMigration.class);

        // Skip migration for a TI item entity
        assertThatThrownBy(() -> migration3204.migrateEntity(tiItemEntity, migrationContext))
                .isInstanceOf(SkipMigration.class);
    }

    @Test
    public void shouldSetTheMachineScoringManagedByIatToFalseForAnAppropriateItem() {
        final HtqsItem htqsItem = new HtqsItem("42");
        htqsItem.getCore().getScoring().setMachineScoringManagedByIat(true);

        final ItemEntity htqsItemEntity = new ItemEntity("42", "master");
        htqsItemEntity.setItemJson(htqsItem);

        final ItemEntity result = migration3204.migrateEntity(htqsItemEntity, migrationContext);

        final HtqsItem migratedHtqsItem = (HtqsItem)result.getItemJson();

        assertThat(migratedHtqsItem.getCore().getScoring().isMachineScoringManagedByIat()).isFalse();
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipNonAssessmentItem() {
        final StimItem stim = new StimItem("42");
        final ItemEntity entity = new ItemEntity("42", "master");
        entity.setItemJson(stim);

        migration3204.migrateEntity(entity, migrationContext);
    }
}
