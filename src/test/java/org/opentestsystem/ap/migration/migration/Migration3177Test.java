package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.ItemProps;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.TestUtil;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.migration.migration3177.Migration3177;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import java.io.IOException;
import java.nio.file.Files;

import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_STIM;

@RunWith(MockitoJUnitRunner.class)
public class Migration3177Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration3177 migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        when(applicationDependencyProvider.getContentUpdaterFactory()).thenReturn(new ContentUpdaterFactory());

        migration = new Migration3177(applicationProperties, dataManager, eventProducer,
                dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Test
    public void shouldUpdateTTSOnSaItem() throws IOException {
        final String sampleStemContent = "<p><span class=\"iat-text2speech\" data-iat-tts-vi=\"Border collies are my\">Border collies are my</span></p>";

        ItemEntity entity = new ItemEntity("123", "master");
        SaItem item = new SaItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent, TYPE_SA);

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition, importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        SaItem migratedItem = (SaItem) migratedEntity.getItemJson();

        assert (migratedItem.getCore().getEn()
                .getPrompt().contains("data-iat-tts=\"Border collies are my\""));
    }

    @Test
    public void shouldUpdateTTSOnStimItem() throws IOException {
        final String sampleStemContent = "<p><span class=\"iat-text2speech\" data-iat-tts-vi=\"Border collies are my\">Border collies are my</span></p>";

        ItemEntity entity = new ItemEntity("123", "master");
        StimItem item = new StimItem("123");
        item.getCore().getEn().setContent(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent, TYPE_STIM);

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition, importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        StimItem migratedItem = (StimItem) migratedEntity.getItemJson();

        assert (migratedItem.getCore().getEn()
                .getContent().contains("data-iat-tts=\"Border collies are my\""));
    }


    private ImportItem getNewImportItem(String enuPrompt, String itemType) throws IOException {
        ItemRelease itemRelease = new ItemRelease();

        if (itemType.equals(TYPE_STIM)) {
            ItemRelease.Passage passage = new ItemRelease.Passage();
            ItemRelease.Passage.Content content;
            content = new ItemRelease.Passage.Content();
            content.setStem(enuPrompt);
            content.setLanguage(ModelConstants.ItemLanguage.LANG_ENU);
            content.setApipAccessibility(new ItemRelease.Passage.Content.ApipAccessibility());
            content.getApipAccessibility().setAccessibilityInfo(new ItemRelease.Passage.Content.ApipAccessibility.AccessibilityInfo());
            ItemRelease.Passage.Content.ApipAccessibility.AccessibilityInfo.AccessElement textElement = TestUtil.getNewPassageAccessElement();
            textElement.setIdentifier("ae2");
            textElement.getContentLinkInfo().setItsLinkIdentifierRef("item_27005_TAG_3_BEGIN");
            textElement.getContentLinkInfo().setType("Text");
            textElement.getRelatedElementInfo().getReadAloud().setTextToSpeechPronunciation("");
            textElement.getRelatedElementInfo().getReadAloud().setTextToSpeechPronunciationAlternate("Border collies are my");
            textElement.getRelatedElementInfo().getBrailleText().setBrailleTextString("Border collies are my");
            content.getApipAccessibility().getAccessibilityInfo().getAccessElement().add(textElement);

            passage.getContent().add(content);
            itemRelease.setPassage(passage);
        } else {
            ItemRelease.Item item = new ItemRelease.Item();
            ItemRelease.Item.Content content;
            content = new ItemRelease.Item.Content();
            content.setStem(enuPrompt);
            content.setLanguage(ModelConstants.ItemLanguage.LANG_ENU);
            content.setApipAccessibility(new ItemRelease.Item.Content.ApipAccessibility());
            content.getApipAccessibility().setAccessibilityInfo(new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo());
            ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement textElement = TestUtil.getNewItemAccessElement();
            textElement.setIdentifier("ae2");
            textElement.getContentLinkInfo().setItsLinkIdentifierRef("item_27005_TAG_3_BEGIN");
            textElement.getContentLinkInfo().setType("Text");
            textElement.getRelatedElementInfo().getReadAloud().setTextToSpeechPronunciation("");
            textElement.getRelatedElementInfo().getReadAloud().setTextToSpeechPronunciationAlternate("Border collies are my");
            textElement.getRelatedElementInfo().getBrailleText().setBrailleTextString("Border collies are my");
            content.getApipAccessibility().getAccessibilityInfo().getAccessElement().add(textElement);

            item.getContent().add(content);
            itemRelease.setItem(item);
        }

        ImportItem importItem = new ImportItem();
        ItemProps itemProps = new ItemProps();
        SmarterAppMetadata metadata = new SmarterAppMetadata();
        metadata.setSubject("math");

        importItem.setItemProps(itemProps);
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        importItem.setExpandedImportItemPath(Files.createTempDirectory("tes"));
        importItem.setItemImportSourcePath(Files.createTempDirectory("testSrc"));

        return importItem;
    }
}
