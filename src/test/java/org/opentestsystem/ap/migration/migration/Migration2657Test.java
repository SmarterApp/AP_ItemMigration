package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;

import java.util.List;

import static java.lang.String.format;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_STIM;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_AUDIO;

public class Migration2657Test {

    private static final String STIM_ID = "170646";

    private static final String AUDIO_FILE_NAME = "passage_2547_v11_10248footnote1.ogg";

    private static final String VALID_HTML_ANCHOR_SIMPLE = "<p>" +
            "<a href=\"passage_646_v6_6573_audio1.ogg\" type=\"audio/ogg\" class=\"sound_explicit\" autoplay=\"False\" visible=\"True\"></a>" +
            "</p>";

    private static final String VALID_HTML_ANCHOR = "<p style=\"font-style:normal; font-weight:bold; \">" +
            "<a href=\"passage_646_v6_6573_audio1.ogg\" type=\"audio/ogg\" class=\"sound_explicit\" autoplay=\"False\" visible=\"True\"></a>" +
            "<br/>" +
            "<a href=\"passage_646_v6_6573_audio2.ogg\" type=\"audio/ogg\" class=\"sound_explicit\" autoplay=\"False\" visible=\"True\"></a>" +
            "</p>";

    private static final String HTML_WITH_ANCHOR_BUT_NO_VALID_AUDIO = "<p style=\"font-style:normal; font-weight:bold; \">" +
            "<a href=\"passage_reference.txt\"></a>" +
            "<br/>" +
            "<a href=\"passage_646_v6_6573_audio2.quicktime\"></a>" +
            "</p>";

    private static final String HTML_NO_ANCHORS = "<p style=\"font-style:normal; font-weight:bold; \"><br/></p>";

    AttachmentValidator validator;

    Migration2657 migration;

    @Before
    public void setup() {
        this.validator = new AttachmentValidator(new ItemBankProperties());
        ApplicationDependencyProvider dependencyProvider = new ApplicationDependencyProvider();
        ApplicationProperties appProps = new ApplicationProperties();
        this.migration = new Migration2657(
                dependencyProvider, appProps, null, null, null, null);
    }

    @Test
    public void testCheckAudioWhenThereAreAnchorTagsButNoneAreValidAudioReferences() {
        StimItem item = new StimItem(STIM_ID);
        item.getCore().getEn().setContent(HTML_WITH_ANCHOR_BUT_NO_VALID_AUDIO);
        try {
            this.migration.checkAudio(item);
            fail("Expected SkipMigration exception");
        } catch(SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo(
                    format("Stim %s has anchor tags but none have a valid audio file name [passage_reference.txt, passage_646_v6_6573_audio2.quicktime]",
                            STIM_ID));
        }
    }

    @Test
    public void testCheckAudioWhenThereAreNoAnchorTags() {
        StimItem item = new StimItem(STIM_ID);
        item.getCore().getEn().setContent(HTML_NO_ANCHORS);
        try {
            this.migration.checkAudio(item);
            fail("Expected SkipMigration exception");
        } catch(SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo(
                    format("Stim %s does not have any anchor tag audio references", STIM_ID));
        }
    }

    @Test
    public void testGetAudioFileNames() {
        List<String> audioFileNames = this.migration.getAudioFileNames(VALID_HTML_ANCHOR);
        assertThat(audioFileNames).hasSize(2);
        assertThat(audioFileNames.get(0)).isEqualTo("passage_646_v6_6573_audio1.ogg");
        assertThat(audioFileNames.get(1)).isEqualTo("passage_646_v6_6573_audio2.ogg");
    }

    @Test
    public void testCheckWhenItemIsSa() {
        Item item = mock(Item.class);
        when(item.getId()).thenReturn("123");
        when(item.getItsId()).thenReturn("987");
        when(item.getType()).thenReturn(TYPE_SA);
        try {
            this.migration.check(item);
            fail("Expected SkipMigration exception");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo("Item 123 is not a stim");
        }
        when(item.getType()).thenReturn(TYPE_STIM);
        this.migration.check(item);
    }

    @Test
    public void testCheckWhenItemIsNotImported() {
        Item stim = mock(Item.class);
        when(stim.getId()).thenReturn("200000");
        when(stim.getType()).thenReturn(TYPE_STIM);
        try {
            this.migration.check(stim);
            fail("Expected SkipMigration exception");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo("Stim 200000 has no ITS ID");
        }
    }

    @Test
    public void testAudioFileNameIsValid() {
        this.validator.validateFileName(AUDIO_FILE_NAME, SECTION_AUDIO);
    }
}
