package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import java.util.Date;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_GLOSSARY;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_IMAGES;

@RunWith(MockitoJUnitRunner.class)
public class Migration2944Test {

    private static final MigrationContext MIGRATION_CONTEXT = new MigrationContext("",
        new ApplicationProperties.MigrationDefinition());

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2944 migration;

    private Attachment productionImageAttachment;

    @Before
    public void setup() {
        migration = new Migration2944(
            applicationDependencyProvider,
            applicationProperties,
            dataManager,
            dataStoreItemManager,
            dataStoreUtility,
            dataStoreAttachmentManager);

        productionImageAttachment = new Attachment("prod-file", new Date(), SECTION_IMAGES);
    }

    @Test
    public void testMigrateEntity() {
        SaItem item = new SaItem("123");


        item.getGlossary().addNewGlossaryTerm();
        item.getGlossary().addNewGlossaryTerm();
        item.getGlossary().addNewGlossaryTerm();
        item.getGlossary().getTerms().get(1).setId("1");
        item.getGlossary().getTerms().get(2).setId("1");

        item.getImages().addImageResource(productionImageAttachment, null, null);
        item.getImages().addImageResource(productionImageAttachment, null, null);
        item.getImages().addImageResource(productionImageAttachment, null, null);
        item.getImages().getImageResources().get(1).setId("1");
        item.getImages().getImageResources().get(2).setId("1");

        ItemEntity entity = new ItemEntity();
        entity.setBranchName(BRANCH_MASTER);
        entity.setItemJson(item);

        this.migration.migrateEntity(entity, MIGRATION_CONTEXT);

        assertThat(item.getGlossary().getTerms().get(0).getId()).isEqualTo("1");
        assertThat(item.getGlossary().getTerms().get(1).getId()).isEqualTo("2");
        assertThat(item.getGlossary().getTerms().get(2).getId()).isEqualTo("3");
        assertThat(item.getImages().getImageResources().get(0).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(1).getId()).isEqualTo("2");
        assertThat(item.getImages().getImageResources().get(2).getId()).isEqualTo("3");
    }

    @Test
    public void testAdjustGlossary() {
        SaItem item = new SaItem("123");
        item.getGlossary().addNewGlossaryTerm();
        item.getGlossary().addNewGlossaryTerm();
        item.getGlossary().addNewGlossaryTerm();

        assertThat(item.getGlossary().getTerms().get(0).getId()).isEqualTo("1");
        assertThat(item.getGlossary().getTerms().get(1).getId()).isEqualTo("2");
        assertThat(item.getGlossary().getTerms().get(2).getId()).isEqualTo("3");

        this.migration.adjustGlossary(item);

        assertThat(item.getGlossary().getTerms().get(0).getId()).isEqualTo("1");
        assertThat(item.getGlossary().getTerms().get(1).getId()).isEqualTo("2");
        assertThat(item.getGlossary().getTerms().get(2).getId()).isEqualTo("3");

        item.getGlossary().getTerms().get(1).setId("1");
        item.getGlossary().getTerms().get(2).setId("1");

        assertThat(item.getGlossary().getTerms().get(0).getId()).isEqualTo("1");
        assertThat(item.getGlossary().getTerms().get(1).getId()).isEqualTo("1");
        assertThat(item.getGlossary().getTerms().get(2).getId()).isEqualTo("1");

        this.migration.adjustGlossary(item);

        assertThat(item.getGlossary().getTerms().get(0).getId()).isEqualTo("1");
        assertThat(item.getGlossary().getTerms().get(1).getId()).isEqualTo("2");
        assertThat(item.getGlossary().getTerms().get(2).getId()).isEqualTo("3");

        item.getGlossary().addNewGlossaryTerm();
        item.getGlossary().addNewGlossaryTerm();
        item.getGlossary().addNewGlossaryTerm();

        assertThat(item.getGlossary().getTerms().get(0).getId()).isEqualTo("1");
        assertThat(item.getGlossary().getTerms().get(1).getId()).isEqualTo("2");
        assertThat(item.getGlossary().getTerms().get(2).getId()).isEqualTo("3");
        assertThat(item.getGlossary().getTerms().get(3).getId()).isEqualTo("4");
        assertThat(item.getGlossary().getTerms().get(4).getId()).isEqualTo("5");
        assertThat(item.getGlossary().getTerms().get(5).getId()).isEqualTo("6");

        item.getGlossary().getTerms().get(1).setId("1");
        item.getGlossary().getTerms().get(2).setId("1");

        this.migration.adjustGlossary(item);

        assertThat(item.getGlossary().getTerms().get(0).getId()).isEqualTo("1");
        assertThat(item.getGlossary().getTerms().get(1).getId()).isEqualTo("4");
        assertThat(item.getGlossary().getTerms().get(2).getId()).isEqualTo("5");
        assertThat(item.getGlossary().getTerms().get(3).getId()).isEqualTo("6");
        assertThat(item.getGlossary().getTerms().get(4).getId()).isEqualTo("7");
        assertThat(item.getGlossary().getTerms().get(5).getId()).isEqualTo("8");
    }

    @Test
    public void testAdjustImages() {
        SaItem item = new SaItem("123");

        item.getImages().addImageResource(productionImageAttachment, null, null);
        item.getImages().addImageResource(productionImageAttachment, null, null);
        item.getImages().addImageResource(productionImageAttachment, null, null);

        assertThat(item.getImages().getImageResources().get(0).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(1).getId()).isEqualTo("2");
        assertThat(item.getImages().getImageResources().get(2).getId()).isEqualTo("3");

        this.migration.adjustImages(item);

        assertThat(item.getImages().getImageResources().get(0).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(1).getId()).isEqualTo("2");
        assertThat(item.getImages().getImageResources().get(2).getId()).isEqualTo("3");

        item.getImages().getImageResources().get(1).setId("1");
        item.getImages().getImageResources().get(2).setId("1");

        assertThat(item.getImages().getImageResources().get(0).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(1).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(2).getId()).isEqualTo("1");

        this.migration.adjustImages(item);

        assertThat(item.getImages().getImageResources().get(0).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(1).getId()).isEqualTo("2");
        assertThat(item.getImages().getImageResources().get(2).getId()).isEqualTo("3");

        item.getImages().addImageResource(productionImageAttachment, null, null);
        item.getImages().addImageResource(productionImageAttachment, null, null);
        item.getImages().addImageResource(productionImageAttachment, null, null);

        assertThat(item.getImages().getImageResources().get(0).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(1).getId()).isEqualTo("2");
        assertThat(item.getImages().getImageResources().get(2).getId()).isEqualTo("3");
        assertThat(item.getImages().getImageResources().get(3).getId()).isEqualTo("4");
        assertThat(item.getImages().getImageResources().get(4).getId()).isEqualTo("5");
        assertThat(item.getImages().getImageResources().get(5).getId()).isEqualTo("6");

        item.getImages().getImageResources().get(1).setId("1");
        item.getImages().getImageResources().get(2).setId("1");

        assertThat(item.getImages().getImageResources().get(0).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(1).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(2).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(3).getId()).isEqualTo("4");
        assertThat(item.getImages().getImageResources().get(4).getId()).isEqualTo("5");
        assertThat(item.getImages().getImageResources().get(5).getId()).isEqualTo("6");

        this.migration.adjustImages(item);

        assertThat(item.getImages().getImageResources().get(0).getId()).isEqualTo("1");
        assertThat(item.getImages().getImageResources().get(1).getId()).isEqualTo("4");
        assertThat(item.getImages().getImageResources().get(2).getId()).isEqualTo("5");
        assertThat(item.getImages().getImageResources().get(3).getId()).isEqualTo("6");
        assertThat(item.getImages().getImageResources().get(4).getId()).isEqualTo("7");
        assertThat(item.getImages().getImageResources().get(5).getId()).isEqualTo("8");
    }

    @Test
    public void testShouldMigrateBranch() {
        ItemEntity entity = new ItemEntity();
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();

        entity.setBranchName(BRANCH_MASTER);
        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();
        entity.setBranchName(SECTION_IMAGES);
        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();
        entity.setBranchName(SECTION_GLOSSARY);
        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();

        entity.setBranchName(SECTION_CORE);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
    }

    @Test
    public void testCheckMigrateEntity() {
        this.migration.checkMigrateEntity(new SaItem("123"));
        this.migration.checkMigrateEntity(new StimItem("123"));
        try {
            this.migration.checkMigrateEntity(new TutItem("123"));
            fail("Expected SkipMigration to be thrown");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo("Item 123 is a TUT, tutorials which does not have glossary");
        }
    }

}