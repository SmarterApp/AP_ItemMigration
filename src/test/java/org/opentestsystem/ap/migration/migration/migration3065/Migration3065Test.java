package org.opentestsystem.ap.migration.migration.migration3065;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.common.model.scoring.Scoring;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

@RunWith(MockitoJUnitRunner.class)
public class Migration3065Test {
    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    private Migration3065 migration3065;

    @Before
    public void setUp() {
        migration3065 = new Migration3065(applicationDependencyProvider, applicationProperties, dataManager, dataStoreUtility, dataStoreAttachmentManager, dataStoreItemManager);
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowIfTut() {
        TutItem item = new TutItem("2000001");
        ItemEntity itemEntity = new ItemEntity("2000001", "master");
        itemEntity.setItemJson(item);
        migration3065.migrateEntity(itemEntity, mock(MigrationContext.class));
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowIfImported() {
        TutItem item = new TutItem("1");
        ItemEntity itemEntity = new ItemEntity("1", "master");
        itemEntity.setItemJson(item);
        migration3065.migrateEntity(itemEntity, mock(MigrationContext.class));
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowIfStim() {
        StimItem item = new StimItem("2000001");
        ItemEntity itemEntity = new ItemEntity("2000001", "master");
        itemEntity.setItemJson(item);
        migration3065.migrateEntity(itemEntity, mock(MigrationContext.class));
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowIfWerItem() {
        WerItem item = new WerItem("2000001");
        ItemEntity itemEntity = new ItemEntity("2000001", "master");
        itemEntity.setItemJson(item);
        migration3065.migrateEntity(itemEntity, mock(MigrationContext.class));
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowIfFlagsSetCorrectlyAndNotMachineScored() {
        McItem item = new McItem("2000001");
        item.getCore().getScoring().setManagedByIat(true);
        ItemEntity itemEntity = new ItemEntity("2000001", "master");
        itemEntity.setItemJson(item);
        migration3065.migrateEntity(itemEntity, mock(MigrationContext.class));
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowIfFlagsSetCorrectlyAndMachineScored() {
        GiItem item = new GiItem("2000001");
        item.getCore().getScoring().setManagedByIat(true);
        ItemEntity itemEntity = new ItemEntity("2000001", "master");
        itemEntity.setItemJson(item);
        migration3065.migrateEntity(itemEntity, mock(MigrationContext.class));
    }

    @Test
    public void shouldMigrateNonMachineScored() {
        McItem item = new McItem("2000001");
        item.getCore().getScoring().setManagedByIat(true);
        item.getCore().getScoring().setMachineScoringManagedByIat(true);
        ItemEntity itemEntity = new ItemEntity("2000001", "master");
        itemEntity.setItemJson(item);
        item.getCore().getScoring().setManagedByIat(false);
        item.getCore().getScoring().setMachineScoringManagedByIat(false);
        ItemEntity migratedEntity = migration3065.migrateEntity(itemEntity, mock(MigrationContext.class));

        Scoring scoring = ((AssessmentItem) migratedEntity.getItemJson()).getCore().getScoring();

        assertThat(scoring.isManagedByIat()).isTrue();
        assertThat(scoring.isMachineScoringManagedByIat()).isFalse();
    }

    @Test
    public void shouldMigrateMachineScored() {
        GiItem item = new GiItem("2000001");
        item.getCore().getScoring().setManagedByIat(true);
        ItemEntity itemEntity = new ItemEntity("2000001", "master");
        itemEntity.setItemJson(item);
        item.getCore().getScoring().setManagedByIat(false);
        item.getCore().getScoring().setMachineScoringManagedByIat(false);
        ItemEntity migratedEntity = migration3065.migrateEntity(itemEntity, mock(MigrationContext.class));

        Scoring scoring = ((AssessmentItem) migratedEntity.getItemJson()).getCore().getScoring();

        assertThat(scoring.isManagedByIat()).isTrue();
        assertThat(scoring.isMachineScoringManagedByIat()).isTrue();
    }
}