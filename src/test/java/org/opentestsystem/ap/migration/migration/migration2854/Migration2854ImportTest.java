package org.opentestsystem.ap.migration.migration.migration2854;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ItemMerge;

import java.io.File;
import java.util.Arrays;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2854ImportTest {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2854Import migration;

    @Before
    public void setUp() {
        migration = new Migration2854Import(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Test
    public void shouldMapEnemyItems() {
        SaItem saItem = new SaItem("123");
        SaItem mappedItem = new SaItem("123");
        mappedItem.getCore().setEnemyItems(Arrays.asList("333", "444"));

        when(dataManager.doesItemExist("333")).thenReturn(false);
        when(dataManager.doesItemExist("444")).thenReturn(true);

        ItemMerge itemMerge = migration.mergeItem(saItem, mappedItem, new File("test").toPath());

        assertThat(((AssessmentItem) itemMerge.getMergedItem()).getCore().getEnemyItems()).containsExactly("444");
    }

    @Test(expected = SkipMigration.class)
    public void shouldIgnoreTutorials() {
        migration.mergeItem(new TutItem("123"), new TutItem("123"), new File("test").toPath());
    }

    @Test(expected = SkipMigration.class)
    public void shouldIgnoreStim() {
        migration.mergeItem(new StimItem("123"), new StimItem("123"), new File("test").toPath());
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipIfNoEnemyItems() {
        migration.mergeItem(new SaItem("234"), new SaItem("234"), new File("test").toPath());
    }
}