package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;

@RunWith(MockitoJUnitRunner.class)
public class Migration2777Test {

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private ItemEntity entity;

    private Migration2777 migration;

    @Before
    public void setup() {
        migration = new Migration2777(
            applicationDependencyProvider,
            applicationProperties,
            dataManager,
            eventProducer,
            dataStoreUtility,
            dataStoreAttachmentManager);
    }

    @Test
    public void itShouldNotMigrateBranchBecauseBranchIsNotMaster() {
        entity = new ItemEntity();
        entity.setBranchName(ItemConstants.Section.SECTION_CORE);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
    }

    @Test
    public void itShouldMigrateBranchBecauseBranchIsMaster() {
        entity = new ItemEntity();
        entity.setBranchName(ItemConstants.BranchNames.BRANCH_MASTER);
        assertThat(migration.shouldMigrateBranch(entity)).isTrue();
    }

    @Test
    public void itShouldNotMigrateEntityBecauseItemIsNotAnAssessmentItem() {
        TutItem tutorial = new TutItem("123");

        entity = new ItemEntity();
        entity.setBranchName(ItemConstants.BranchNames.BRANCH_MASTER);
        entity.setItemJson(tutorial);

        try {
            migration.migrateEntity(entity);
            fail("Expected SkipMigration exception to be thrown");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo("item is not an assessment item");
        }
    }

    @Test
    public void itShouldNotMigrateEntityBecauseAssessmentItemHaNoAssociatedStimulus() {
        SaItem assessmentItem = new SaItem("123");

        entity = new ItemEntity();
        entity.setBranchName(ItemConstants.BranchNames.BRANCH_MASTER);
        entity.setItemJson(assessmentItem);

        try {
            migration.migrateEntity(entity);
            fail("Expected SkipMigration exception to be thrown");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo("assessment item has not associated stimulus");
        }
    }

    @Test
    public void itShouldMigrateBranch() {
        SaItem assessmentItem = new SaItem("123");
        assessmentItem.getCore().setStimulusId("987");

        entity = new ItemEntity();
        entity.setBranchName(ItemConstants.BranchNames.BRANCH_MASTER);
        entity.setItemJson(assessmentItem);

        final ItemEntity migratedEntity = migration.migrateEntity(entity);

        assertThat(migratedEntity).isEqualTo(entity);
    }
}