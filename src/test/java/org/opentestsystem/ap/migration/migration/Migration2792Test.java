package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.ItemProps;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;

import java.io.IOException;
import java.nio.file.Files;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2792Test {
    private String SCORING_ENGINE_AUTOMATIC_WITH_KEYS = "AutomaticWithKeys";

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2792 migration;
    private ItemRelease itemRelease;
    private ImportItem importItem = new ImportItem();
    private ItemProps itemProps = new ItemProps();
    private SmarterAppMetadata metadata = new SmarterAppMetadata();
    private ItemEntity entity;
    private ItemEntity migratedEntity;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        migration = new Migration2792(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);

        itemRelease = new ItemRelease();
        ItemRelease.Item item = new ItemRelease.Item();
        ItemRelease.Item.Attriblist.Attrib attrib = new ItemRelease.Item.Attriblist.Attrib();
        attrib.setAttid("itm_item_id");
        attrib.setName("Item: ITS ID");
        attrib.setVal("42361");
        item.setAttriblist(new ItemRelease.Item.Attriblist());
        item.getAttriblist().getAttrib().add(attrib);
        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setStem("");
        content.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);
        content.setQti(new ItemRelease.Item.Content.Qti());
        content.getQti().setValue("");
        content.setRationaleoptlist(new ItemRelease.Item.Content.Rationaleoptlist());
        item.getContent().add(content);
        itemRelease.setItem(item);

        entity = new ItemEntity("123", "master");

        metadata.setSubject("math");

        importItem.setItemProps(itemProps);
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        try {
            importItem.setExpandedImportItemPath(Files.createTempDirectory("tes"));
            importItem.setItemImportSourcePath(Files.createTempDirectory("testSrc"));
        } catch (IOException ex) {

        }
    }

    @Test
    public void shouldSetScoringEngineForEbsrItems() throws IOException {
        EbsrItem ebsrItem = new EbsrItem("123");
        entity.setItemJson(ebsrItem);

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.of(importItem));
        migratedEntity = migration.migrateEntity(entity);

        EbsrItem migratedItem = (EbsrItem) migratedEntity.getItemJson();

        assertThat(migratedItem.getCore().getMetadata().getScoringEngine()).isNotBlank();
        assert(migratedItem.getCore().getMetadata().getScoringEngine().equals(SCORING_ENGINE_AUTOMATIC_WITH_KEYS));
    }

    @Test
    public void shouldSetScoringEngineForMsItems() throws IOException {
        MsItem msItem = new MsItem("123");

        entity.setItemJson(msItem);

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.of(importItem));
        migratedEntity = migration.migrateEntity(entity);

        MsItem migratedItem = (MsItem) migratedEntity.getItemJson();

        assertThat(migratedItem.getCore().getMetadata().getScoringEngine()).isNotBlank();
        assert(migratedItem.getCore().getMetadata().getScoringEngine().equals(SCORING_ENGINE_AUTOMATIC_WITH_KEYS));
    }
}
