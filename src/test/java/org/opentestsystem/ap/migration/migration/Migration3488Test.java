package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.attachment.AttachmentSummary;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import java.nio.file.Path;
import java.util.Collections;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration3488Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private MigrationContext migrationContext;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Captor
    private ArgumentCaptor<Path> pathCaptor;

    private Migration3488 migration;

    @Before
    public void setUp() {
        migration = new Migration3488(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager, migrationFileUtil);
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipTimsAuthoredItems() {
        TiItem tiItem = new TiItem("200111");
        ItemEntity itemEntity = new ItemEntity();
        itemEntity.setItemJson(tiItem);

        migration.migrateEntity(itemEntity, migrationContext);
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipItemTypesNotSupported() {
        SaItem saItem = new SaItem("1");

        ItemEntity itemEntity = new ItemEntity();
        itemEntity.setItemJson(saItem);

        migration.migrateEntity(itemEntity, migrationContext);
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipIfQrxIsPresent() {
        TiItem tiItem = new TiItem("1");
        ItemEntity itemEntity = new ItemEntity("1", "master");
        itemEntity.setItemJson(tiItem);

        AttachmentSummary attachmentSummary = AttachmentSummary.builder().timsFileKey("tims/123.qrx").build();
        when(dataStoreAttachmentManager.findAttachmentSummaries(tiItem, "master")).thenReturn(Collections.singletonList(attachmentSummary));

        migration.migrateEntity(itemEntity, migrationContext);
    }

    @Test(expected = SystemException.class)
    public void shouldThrowIfImportFilesCannotBeFound() {
        TiItem tiItem = new TiItem("1");
        ItemEntity itemEntity = new ItemEntity("1", "master");
        itemEntity.setItemJson(tiItem);

        when(dataStoreAttachmentManager.findAttachmentSummaries(tiItem, "master")).thenReturn(Collections.emptyList());

        when(migrationFileUtil.getImportItem(itemEntity)).thenReturn(Optional.empty());

        migration.migrateEntity(itemEntity, migrationContext);
    }

//    TODO - Fix this if it is needed
    @Test
    @Ignore
    public void shouldSaveQrxFile() {
        TiItem tiItem = new TiItem("1");
        ItemEntity itemEntity = new ItemEntity("1", "master");
        itemEntity.setItemJson(tiItem);

        when(dataStoreAttachmentManager.findAttachmentSummaries(tiItem, "master")).thenReturn(Collections.emptyList());

        ImportItem importItem = new ImportItem();

        when(migrationFileUtil.getImportItem(itemEntity)).thenReturn(Optional.of(importItem));

        migration.migrateEntity(itemEntity, migrationContext);

        verify(dataStoreAttachmentManager).saveAttachment(isA(String.class), isA(String.class), isA(String.class), pathCaptor.capture());

        assertThat(pathCaptor.getValue().toFile().getName()).isEqualTo("item_123_qrx");
    }
}