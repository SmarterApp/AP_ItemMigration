package org.opentestsystem.ap.migration.migration;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;

@RunWith(MockitoJUnitRunner.class)
public class Migration2894Test {

    private static final MigrationContext MIGRATION_CONTEXT = new MigrationContext("",new ApplicationProperties.MigrationDefinition());

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2894 migration;

    private ItemEntity entity;

    @Before
    public void setUp()  {
        migration = new Migration2894(
            applicationDependencyProvider,
            applicationProperties,
            dataManager,
            dataStoreItemManager,
            dataStoreUtility,
            dataStoreAttachmentManager);

        entity = new ItemEntity();
    }

    @After
    public void tearDown()  {
    }

    @Test
    public void shouldMigrateBranch() {
        assertThat(this.migration.shouldMigrateBranch(this.entity)).isFalse();

        this.entity.setBranchName(BRANCH_MASTER);
        assertThat(this.migration.shouldMigrateBranch(this.entity)).isTrue();

        this.entity.setBranchName(SECTION_CORE);
        assertThat(this.migration.shouldMigrateBranch(this.entity)).isFalse();
    }

    @Test
    public void shouldMigrateEntity() {
        EqItem eqItem = new EqItem("123");
        this.entity.setItemJson(eqItem);
        this.migration.migrateEntity(this.entity, MIGRATION_CONTEXT);


        eqItem.getCore().getEquationEditorConfiguration().setManagedByIat(false);
        this.entity.setItemJson(eqItem);
        this.assertShouldMigrateEntity("eq item equation editor not managed by IAT");

        MsItem msItem = new MsItem("123");
        this.entity.setItemJson(msItem);
        this.assertShouldMigrateEntity("item is not EQ");

    }

    void assertShouldMigrateEntity(String expectedMessage) {
        try {
            this.migration.migrateEntity(this.entity, MIGRATION_CONTEXT);
            fail("Expecting skip migration error");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo(expectedMessage);
        }
    }

}