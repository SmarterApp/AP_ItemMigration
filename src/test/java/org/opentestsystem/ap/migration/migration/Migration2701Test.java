package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.SkipMigration;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class Migration2701Test {
    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    private Migration2701 migration;

    @Before
    public void setUp() {
        migration = new Migration2701(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void shouldMigrateEntity() {
        TiItem item = new TiItem("123");
        item.getCore().getMetadata().setPrimaryEmphasis("n/a");

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(item);

        ItemEntity migratedEntity = migration.migrateEntity(itemEntity);

        assertThat(migratedEntity.getItemJson().getCore().getMetadata().getPrimaryEmphasis()).isEqualTo("NA");
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipIfNoMetadata() {
        TiItem item = new TiItem("123");
        item.getCore().getMetadata().setPrimaryEmphasis("a/s");

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(item);

        migration.migrateEntity(itemEntity);
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipIfPrimaryEmphasisNotNa() {
        TutItem item = new TutItem("123");

        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(item);

        migration.migrateEntity(itemEntity);
    }
}