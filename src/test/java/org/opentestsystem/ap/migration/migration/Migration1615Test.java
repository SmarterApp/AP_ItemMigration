package org.opentestsystem.ap.migration.migration;

import org.apache.commons.lang3.StringUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.ItemProps;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;

import java.io.IOException;
import java.nio.file.Files;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration1615Test {
    private static final String sampleStemContent = "<p style=\"\"><span style=\"\">In the </span><span id=\"item_27005_TAG_6\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"1\"></span><span style=\"\">given</span><span class=\"its-tag\" data-tag-ref=\"item_27005_TAG_6\" data-tag-boundary=\"end\"></span><span style=\"\"> figure, quadrilateral </span><span id=\"item_27005_TAG_3_BEGIN\"><span style=\"font-style:italic; \">ABCD</span></span><span style=\"\"> is a rectangle, and quadrilateral </span><span id=\"item_27005_TAG_1_BEGIN\"><span style=\"font-style:italic; \">ACED</span></span><span style=\"\"> is a parallelogram.</span></p><p style=\"\">&#xA0;</p><p style=\"\"><img id=\"item_27005_stem\" src=\"item_27005_v16_stem_png256.png\" width=\"401\" height=\"268\" style=\"vertical-align:baseline;\" /></p><p style=\"\">&#xA0;</p><p style=\"\">Ted <span id=\"item_27005_TAG_7\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"2\"></span>claims<span class=\"its-tag\" data-tag-ref=\"item_27005_TAG_7\" data-tag-boundary=\"end\"></span> that the two <span id=\"item_27005_TAG_8\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"3\"></span>shaded<span class=\"its-tag\" data-tag-ref=\"item_27005_TAG_8\" data-tag-boundary=\"end\"></span> triangles must be congruent. Is Ted’s <span id=\"item_27005_TAG_9\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"4\"></span>claim<span class=\"its-tag\" data-tag-ref=\"item_27005_TAG_9\" data-tag-boundary=\"end\"></span> correct? <span id=\"item_27005_TAG_10\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"5\"></span>Include<span class=\"its-tag\" data-tag-ref=\"item_27005_TAG_10\" data-tag-boundary=\"end\"></span> <span id=\"item_27005_TAG_11\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"6\"></span>all<span class=\"its-tag\" data-tag-ref=\"item_27005_TAG_11\" data-tag-boundary=\"end\"></span> work <span id=\"item_27005_TAG_4_BEGIN\">and/or</span> reasoning necessary <span id=\"item_27005_TAG_12\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"7\"></span>to either prove<span class=\"its-tag\" data-tag-ref=\"item_27005_TAG_12\" data-tag-boundary=\"end\"></span> the triangles congruent or <span id=\"item_27005_TAG_13\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"8\"></span>to disprove<span class=\"its-tag\" data-tag-ref=\"item_27005_TAG_13\" data-tag-boundary=\"end\"></span> Ted’s <span id=\"item_27005_TAG_14\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"4\"></span>claim<span class=\"its-tag\" data-tag-ref=\"item_27005_TAG_14\" data-tag-boundary=\"end\"></span>.</p>";

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2605 migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        migration = new Migration2605(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Test
    public void shouldProduceSpanAroundTTSAndGlossary() throws IOException {
        ItemRelease itemRelease = new ItemRelease();
        ItemRelease.Item item = new ItemRelease.Item();
        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setStem(sampleStemContent);
        content.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);
        content.setApipAccessibility(new ItemRelease.Item.Content.ApipAccessibility());
        content.getApipAccessibility().setAccessibilityInfo(new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo());

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement textElement = getNewAccessElement();
        textElement.setIdentifier("ae2");
        textElement.getContentLinkInfo().setItsLinkIdentifierRef("item_27005_TAG_3_BEGIN");
        textElement.getContentLinkInfo().setType("Text");
        textElement.getRelatedElementInfo().getReadAloud().setTextToSpeechPronunciation("A B C D,");
        textElement.getRelatedElementInfo().getReadAloud().setTextToSpeechPronunciationAlternate("ABCD");

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement graphicElement = getNewAccessElement();
        graphicElement.setIdentifier("ae4");
        graphicElement.getContentLinkInfo().setItsLinkIdentifierRef("item_27005_stem");
        graphicElement.getContentLinkInfo().setType("Graphic");
        graphicElement.getContentLinkInfo().setSubtype("Generic");
        graphicElement.getRelatedElementInfo().getReadAloud().setAudioText("Clockwise from the right, the figure reeds, e, c, b, a, D;");
        graphicElement.getRelatedElementInfo().getBrailleText().setBrailleTextString("The figure contains a rectangle with the four corners labeled clockwise from the top left, A. , d, c, b. A diagonal line is drawn from point A. , to point c. Triangle A. , c, b, is shaded, triangle A. , c, d, is not. Triangle D, c, e, is a triangle connected to the rectangle. Triangle D, c, e, is shaded.");

        content.getApipAccessibility().getAccessibilityInfo().getAccessElement().add(textElement);
        content.getApipAccessibility().getAccessibilityInfo().getAccessElement().add(graphicElement);

        item.getContent().add(content);
        itemRelease.setItem(item);

        SaItem saItem = new SaItem("123");

        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(saItem);

        ImportItem importItem = new ImportItem();
        ItemProps itemProps = new ItemProps();
        SmarterAppMetadata metadata = new SmarterAppMetadata();
        metadata.setSubject("math");

        importItem.setItemProps(itemProps);
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        importItem.setExpandedImportItemPath(Files.createTempDirectory("tes"));
        importItem.setItemImportSourcePath(Files.createTempDirectory("testSrc"));

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.of(importItem));

        ItemEntity migratedEntity = migration.migrateEntity(entity);

        SaItem migratedItem = (SaItem) migratedEntity.getItemJson();

//        System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"A B C D,\" data-iat-tts-vi=\"ABCD\">"));

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\""));
    }

    private ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement getNewAccessElement() {
        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement accessElement =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement();

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.ContentLinkInfo contentLinkInfo =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.ContentLinkInfo();

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo.ReadAloud readAloud =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo.ReadAloud();

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo relatedElementInfo =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo();

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo.BrailleText brailleText =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo.BrailleText();

        relatedElementInfo.setReadAloud(readAloud);
        relatedElementInfo.setBrailleText(brailleText);

        accessElement.setContentLinkInfo(contentLinkInfo);
        accessElement.setRelatedElementInfo(relatedElementInfo);

        return accessElement;
    }

}
