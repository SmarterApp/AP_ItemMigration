package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.model.ItemProps;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.model.MigrationContext;

import java.io.IOException;
import java.nio.file.Files;
import java.util.Optional;

import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration1615Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration1615 migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        when(applicationDependencyProvider.getContentUpdaterFactory()).thenReturn(new ContentUpdaterFactory());

        migration = new Migration1615(applicationDependencyProvider,
                applicationProperties, dataManager, eventProducer,
                dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void shouldUpdateImageTTSOnEbsrItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        EbsrItem item = new EbsrItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.of(importItem));

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        EbsrItem migratedItem = (EbsrItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));

    }

    @Test
    public void shouldUpdateImageTTSOnEqItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        EqItem item = new EqItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        EqItem migratedItem = (EqItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));

    }

    @Test
    public void shouldUpdateImageTTSOnGiItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        GiItem item = new GiItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        GiItem migratedItem = (GiItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));

    }

    @Test
    public void shouldUpdateImageTTSOnHtqoItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        HtqoItem item = new HtqoItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        HtqoItem migratedItem = (HtqoItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));

    }

    @Test
    public void shouldUpdateImageTTSOnHtqsItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        HtqsItem item = new HtqsItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        HtqsItem migratedItem = (HtqsItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));

    }

    @Test
    public void shouldUpdateImageTTSOnMcItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        McItem item = new McItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        McItem migratedItem = (McItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));

    }

    @Test
    public void shouldUpdateImageTTSOnMiItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        MiItem item = new MiItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        MiItem migratedItem = (MiItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));

    }

    @Test
    public void shouldUpdateImageTTSOnMsItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        MsItem item = new MsItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        MsItem migratedItem = (MsItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));

    }

    @Test
    public void shouldUpdateImageTTSOnSaItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        SaItem item = new SaItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        SaItem migratedItem = (SaItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));
    }

    @Test
    public void shouldUpdateImageTTSOnStimItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        StimItem item = new StimItem("123");
        item.getCore().getEn().setContent(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        StimItem migratedItem = (StimItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getContent());

        assert(migratedItem.getCore().getEn()
                .getContent().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));

    }

    @Test
    public void shouldUpdateImageTTSOnTiItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        TiItem item = new TiItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        TiItem migratedItem = (TiItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));
    }

    @Test
    public void shouldUpdateImageTTSOnWerItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        ItemEntity entity = new ItemEntity("123", "master");
        WerItem item = new WerItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);
        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        WerItem migratedItem = (WerItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));
    }

    @Test
    public void shouldUpdateImageTTSOnTimsTutItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        // Ids 200000 or higher are items created in TIMS
        ItemEntity entity = new ItemEntity("201000", "master");
        TutItem item = new TutItem("201000");
        item.getCore().getEn().setContent(sampleStemContent);
        item.getCore().getEn().setManagedByIat(true);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        TutItem migratedItem = (TutItem) migratedEntity.getItemJson();

        //System.out.println(migratedItem.getCore().getEn().getPrompt());

        assert(migratedItem.getCore().getEn()
                .getContent().contains("<span class=\"iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\">"));
    }

    @Test(expected = SkipMigration.class)
    public void shouldFailToUpdateImageTTSOnImportedTutItem() throws IOException {
        final String sampleStemContent = "<p style=\"\">&nbsp;</p><p style=\"\"><img class=\"place-holder iat-text2speech\" data-iat-tts=\"Clockwise from the right, the figure reeds, e, c, b, a, D;\" data-iat-tts-vi=\"\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p style=\"\">&nbsp;</p>";

        // Ids lower than 200000 are imported items
        ItemEntity entity = new ItemEntity("123", "master");
        TutItem item = new TutItem("123");
        item.getCore().getEn().setContent(sampleStemContent);
        item.getCore().getEn().setManagedByIat(false);
        entity.setItemJson(item);

        ImportItem importItem = getNewImportItem(sampleStemContent);

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);
        migration.migrateEntity(entity, migrationContext);

    }


    /********************************************************************/

    private ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement getNewAccessElement() {
        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement accessElement =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement();

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.ContentLinkInfo contentLinkInfo =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.ContentLinkInfo();

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo.ReadAloud readAloud =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo.ReadAloud();

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo relatedElementInfo =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo();

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo.BrailleText brailleText =
                new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement.RelatedElementInfo.BrailleText();

        relatedElementInfo.setReadAloud(readAloud);
        relatedElementInfo.setBrailleText(brailleText);

        accessElement.setContentLinkInfo(contentLinkInfo);
        accessElement.setRelatedElementInfo(relatedElementInfo);

        return accessElement;
    }

    private ImportItem getNewImportItem(String enuPrompt) throws IOException {
        ItemRelease itemRelease = new ItemRelease();
        ItemRelease.Item item = new ItemRelease.Item();
        ItemRelease.Item.Content content = new ItemRelease.Item.Content();
        content.setStem(enuPrompt);
        content.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);
        content.setApipAccessibility(new ItemRelease.Item.Content.ApipAccessibility());
        content.getApipAccessibility().setAccessibilityInfo(new ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo());

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement textElement = getNewAccessElement();
        textElement.setIdentifier("ae2");
        textElement.getContentLinkInfo().setItsLinkIdentifierRef("item_27005_TAG_3_BEGIN");
        textElement.getContentLinkInfo().setType("Text");
        textElement.getRelatedElementInfo().getReadAloud().setTextToSpeechPronunciation("A B C D,");
        textElement.getRelatedElementInfo().getReadAloud().setTextToSpeechPronunciationAlternate("ABCD");

        ItemRelease.Item.Content.ApipAccessibility.AccessibilityInfo.AccessElement graphicElement = getNewAccessElement();
        graphicElement.setIdentifier("ae4");
        graphicElement.getContentLinkInfo().setItsLinkIdentifierRef("item_27005_stem");
        graphicElement.getContentLinkInfo().setType("Graphic");
        graphicElement.getContentLinkInfo().setSubtype("Generic");
        graphicElement.getRelatedElementInfo().getReadAloud().setAudioText("Clockwise from the right, the figure reeds, e, c, b, a, D;");
        graphicElement.getRelatedElementInfo().getBrailleText().setBrailleTextString("The figure contains a rectangle with the four corners labeled clockwise from the top left, A. , d, c, b. A diagonal line is drawn from point A. , to point c. Triangle A. , c, b, is shaded, triangle A. , c, d, is not. Triangle D, c, e, is a triangle connected to the rectangle. Triangle D, c, e, is shaded.");

        content.getApipAccessibility().getAccessibilityInfo().getAccessElement().add(textElement);
        content.getApipAccessibility().getAccessibilityInfo().getAccessElement().add(graphicElement);

        item.getContent().add(content);
        itemRelease.setItem(item);

        ImportItem importItem = new ImportItem();
        ItemProps itemProps = new ItemProps();
        SmarterAppMetadata metadata = new SmarterAppMetadata();
        metadata.setSubject("math");

        importItem.setItemProps(itemProps);
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        importItem.setExpandedImportItemPath(Files.createTempDirectory("tes"));
        importItem.setItemImportSourcePath(Files.createTempDirectory("testSrc"));

        return importItem;
    }
}
