package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

@RunWith(MockitoJUnitRunner.class)
public class Migration2972Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2972 migration;

    @Before
    public void setUp() {
        migration = new Migration2972(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test(expected = SkipMigration.class)
    public void shouldNotMigrationTutorial() {
        TutItem item = new TutItem("1");
        ItemEntity entity = new ItemEntity("1", "master");
        entity.setItemJson(item);
        migration.migrateEntity(entity, mock(MigrationContext.class));
    }

    @Test(expected = SkipMigration.class)
    public void shouldNotMigrateNonELAItems() {
        SaItem item = new SaItem("1");
        item.getCore().getMetadata().setSubject(ItemConstants.ItemSubject.SUBJECT_MATH);
        ItemEntity entity = new ItemEntity("1", "master");
        entity.setItemJson(item);
        migration.migrateEntity(entity, mock(MigrationContext.class));
    }

    @Test
    public void shouldMigrateELAItems() {
        SaItem item = new SaItem("1");
        item.getCore().getMetadata().setSubject(ItemConstants.ItemSubject.SUBJECT_ELA);
        ItemEntity entity = new ItemEntity("1", "master");
        entity.setItemJson(item);
        ItemEntity newEntity = migration.migrateEntity(entity, mock(MigrationContext.class));

        assertThat(newEntity).isEqualTo(entity);
    }
}