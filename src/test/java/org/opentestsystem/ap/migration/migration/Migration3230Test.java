package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;


@RunWith(MockitoJUnitRunner.class)
public class Migration3230Test {

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration3230 migration;

    private ItemEntity entity = new ItemEntity();

    private SaItem saItem = new SaItem("12");

    private TiItem tiItem = new TiItem("21");

    @Before
    public void setUp() {
        migration = new Migration3230(applicationDependencyProvider,
            applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    /**
     * This test works because the conditional check in the migration looks at branch name first.  Given that
     * we don't bother setting the item.json on the entity.
     */
    @Test
    public void testShouldMigrateBranchFocusingOnBranchName() {
        entity.setBranchName(ModelConstants.Section.SECTION_ASL);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_AUDIO);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_BRAILLE);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_CC);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_CORE);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_CREATE);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_GLOSSARY);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_IMAGES);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_METADATA);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_REVIEW);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_TEXTTOSPEECH);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setBranchName(ModelConstants.Section.SECTION_TRANSLATIONS);
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
    }

    @Test
    public void testShouldMigrateBranchFocusOnItemType() {
        entity.setBranchName(ModelConstants.BranchNames.BRANCH_MASTER);

        entity.setItemJson(new EbsrItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new EqItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new GiItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new HtqoItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new HtqsItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new McItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new MiItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new MsItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new SaItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new StimItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new TutItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();
        entity.setItemJson(new WerItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isFalse();

        entity.setItemJson(new TiItem("12"));
        assertThat(migration.shouldMigrateBranch(entity)).isTrue();
    }
}