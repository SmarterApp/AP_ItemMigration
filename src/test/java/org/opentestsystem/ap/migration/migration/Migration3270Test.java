package org.opentestsystem.ap.migration.migration;


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.common.model.content.EbsrItemContent;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.TestUtil;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import java.io.IOException;
import java.util.Arrays;
import java.util.Optional;

import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration3270Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration3270 migration;

    private static final String MATHML_CONTENT = "<p><span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"1\">Enter</span> the unknown number to make the equation <span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"2\">true</span>.<br /><br /><span class=\"iat-text2speech\" data-iat-tts=\"6 hundred 89 divided by 4 equals, open parenthesis, 4 hundred divided by 4, closed parenthesis, plus, open parenthesis, 2 hundred divided by 4, closed parenthesis, plus, open parenthesis, box divided by 4, closed parenthesis, plus, open parenthesis, 9 divided by 4, closed parenthesis.  From left to right and top to bottom, the equation tool reeds, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, point, box over box.\"><math xmlns:math=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>689</mn><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn><mrow><mi /><mo stretchy=\"false\">=</mo><mi /></mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>400</mn><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi /><mo stretchy=\"false\">+</mo><mi /></mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>200</mn><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi /><mo stretchy=\"false\">+</mo><mi /></mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>□</mi><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi /><mo stretchy=\"false\">+</mo><mi /></mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>9</mn><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"StarMath 5.0\">689`div`4`=`(400`div`4)`+`(200`div`4)`+`(□`div`4)`+`(9`div`4)</annotation></semantics></math> </span></p>";

    private static final String UPDATED_MATHML = "<mi mathvariant=\"normal\">";

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        when(applicationDependencyProvider.getContentUpdaterFactory()).thenReturn(new ContentUpdaterFactory());

        migration = new Migration3270(applicationDependencyProvider, applicationProperties, dataManager,
                dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void shouldUpdateMathMlOnEbsrItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        EbsrItem item = new EbsrItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getEn().setPartAPrompt(MATHML_CONTENT);
        item.getCore().getEn().setPartBPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().setPartAPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().setPartBPrompt(MATHML_CONTENT);
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        EbsrItem migratedItem = (EbsrItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getCore().getEn().getPartAPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getCore().getEn().getPartBPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getTranslations().getEsp().getPartAPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getTranslations().getEsp().getPartBPrompt().contains(UPDATED_MATHML));
    }

    @Test
    public void shouldUpdateMathMlOnEqItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        EqItem item = new EqItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getScoring().setRubric(MATHML_CONTENT);
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        EqItem migratedItem = (EqItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getCore().getScoring().getRubric().contains(UPDATED_MATHML));
        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
    }

    @Test
    public void shouldUpdateMathMlOnGiItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        GiItem item = new GiItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getScoring().setRubric(MATHML_CONTENT);
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        GiItem migratedItem = (GiItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getCore().getScoring().getRubric().contains(UPDATED_MATHML));
        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
    }

    @Test
    public void shouldUpdateMathMlOnHtqoItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        HtqoItem item = new HtqoItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getEn().getHtqOrderable().setOrderableStrings(Arrays.asList(MATHML_CONTENT, MATHML_CONTENT, MATHML_CONTENT));
        item.getCore().getScoring().setRubric(MATHML_CONTENT);
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().getHtqOrderable().setOrderableStrings(Arrays.asList(MATHML_CONTENT, MATHML_CONTENT, MATHML_CONTENT));
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        HtqoItem migratedItem = (HtqoItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getCore().getEn().getHtqOrderable().getOrderableStrings().forEach(value -> {
            assert(value.contains(UPDATED_MATHML));
        });
        assert(migratedItem.getCore().getScoring().getRubric().contains(UPDATED_MATHML));
        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getTranslations().getEsp().getHtqOrderable().getOrderableStrings().forEach(value -> {
            assert(value.contains(UPDATED_MATHML));
        });
    }

    @Test
    public void shouldUpdateMathMlOnHtqsItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        HtqsItem item = new HtqsItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getEn().getHtqSelectable().setInteractiveText(MATHML_CONTENT);
        item.getCore().getScoring().setRubric(MATHML_CONTENT);
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().getHtqSelectable().setInteractiveText(MATHML_CONTENT);
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        HtqsItem migratedItem = (HtqsItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getCore().getEn().getHtqSelectable().getInteractiveText().contains(UPDATED_MATHML));
        assert(migratedItem.getCore().getScoring().getRubric().contains(UPDATED_MATHML));
        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getTranslations().getEsp().getHtqSelectable().getInteractiveText().contains(UPDATED_MATHML));
    }

    @Test
    public void shouldUpdateMathMlOnMcItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        McItem item = new McItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getEn().getOptions().add(ItemOption.newItemOption(MATHML_CONTENT, "1", true, ""));
        item.getCore().getEn().getOptions().add(ItemOption.newItemOption(MATHML_CONTENT, "2", true, ""));
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().getOptions().add(ItemOption.newItemOption(MATHML_CONTENT, "1", true, ""));
        item.getTranslations().getEsp().getOptions().add(ItemOption.newItemOption(MATHML_CONTENT, "2", true, ""));
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        McItem migratedItem = (McItem) migratedEntity.getItemJson();

        assert (migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getCore().getEn().getOptions().forEach(option -> {
            assert(option.getText().contains(UPDATED_MATHML));
        });
        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getTranslations().getEsp().getOptions().forEach(option -> {
            assert(option.getText().contains(UPDATED_MATHML));
        });
    }

    @Test
    public void shouldUpdateMathMlOnMiItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        MiItem item = new MiItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getEn().getTable().getColumns().forEach(column ->
                column.setLabel(MATHML_CONTENT));
        item.getCore().getEn().getTable().getRows().forEach(row -> {
            row.getCells().forEach(cell -> {
                if (cell.isLabel()) {
                    cell.setValue(MATHML_CONTENT);
                }
            });
        });
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().getTable().getColumns().forEach(column ->
                column.setLabel(MATHML_CONTENT));
        item.getTranslations().getEsp().getTable().getRows().forEach(row -> {
            row.getCells().forEach(cell -> {
                if (cell.isLabel()) {
                    cell.setValue(MATHML_CONTENT);
                }
            });
        });
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        MiItem migratedItem = (MiItem) migratedEntity.getItemJson();

        assert (migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        item.getCore().getEn().getTable().getColumns().forEach(column -> {
           assert(column.getLabel().contains(UPDATED_MATHML));
        });
        item.getCore().getEn().getTable().getRows().forEach(row -> {
           row.getCells().forEach(cell ->  {
               assert !cell.isLabel() || (((String) cell.getValue()).contains(UPDATED_MATHML));
           });
        });

        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
        item.getTranslations().getEsp().getTable().getColumns().forEach(column -> {
            assert(column.getLabel().contains(UPDATED_MATHML));
        });
        item.getTranslations().getEsp().getTable().getRows().forEach(row -> {
            row.getCells().forEach(cell ->  {
                assert !cell.isLabel() || (((String) cell.getValue()).contains(UPDATED_MATHML));
            });
        });
    }

    @Test
    public void shouldUpdateMathMsOnMcItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        MsItem item = new MsItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getEn().getOptions().add(ItemOption.newItemOption(MATHML_CONTENT, "1", true, ""));
        item.getCore().getEn().getOptions().add(ItemOption.newItemOption(MATHML_CONTENT, "2", true, ""));
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().getOptions().add(ItemOption.newItemOption(MATHML_CONTENT, "1", true, ""));
        item.getTranslations().getEsp().getOptions().add(ItemOption.newItemOption(MATHML_CONTENT, "2", true, ""));
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        MsItem migratedItem = (MsItem) migratedEntity.getItemJson();

        assert (migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getCore().getEn().getOptions().forEach(option -> {
            assert(option.getText().contains(UPDATED_MATHML));
        });
        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getTranslations().getEsp().getOptions().forEach(option -> {
            assert(option.getText().contains(UPDATED_MATHML));
        });
    }

    @Test
    public void shouldUpdateMathMlOnSaItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        SaItem item = new SaItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getEn().setExemplarResponses(Arrays.asList(MATHML_CONTENT, MATHML_CONTENT, MATHML_CONTENT));
        item.getCore().getEn().setRubrics(Arrays.asList(MATHML_CONTENT, MATHML_CONTENT, MATHML_CONTENT));
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().setExemplarResponses(Arrays.asList(MATHML_CONTENT, MATHML_CONTENT, MATHML_CONTENT));
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        SaItem migratedItem = (SaItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getCore().getEn().getExemplarResponses().forEach(value -> {
            assert(value.contains(UPDATED_MATHML));
        });
        migratedItem.getCore().getEn().getRubrics().forEach(value -> {
            assert(value.contains(UPDATED_MATHML));
        });

        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getTranslations().getEsp().getExemplarResponses().forEach(value -> {
            assert(value.contains(UPDATED_MATHML));
        });
    }

    @Test
    public void shouldUpdateMathMlOnStimItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        StimItem item = new StimItem("123");
        item.getCore().getEn().setContent(MATHML_CONTENT);
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        StimItem migratedItem = (StimItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getContent().contains(UPDATED_MATHML));
    }


    @Test
    public void shouldUpdateMathMlOnTiItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        TiItem item = new TiItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getScoring().setRubric(MATHML_CONTENT);
        item.getCore().getEn().getTable().setTitle(MATHML_CONTENT);
        item.getCore().getEn().getTable().getColumns().forEach(column ->
                column.setLabel(MATHML_CONTENT));
        item.getCore().getEn().getTable().getRows().forEach(row -> {
            row.getCells().forEach(cell -> {
                if (cell.isLabel()) {
                    cell.setValue(MATHML_CONTENT);
                }
            });
        });

        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().getTable().setTitle(MATHML_CONTENT);
        item.getTranslations().getEsp().getTable().getColumns().forEach(column ->
                column.setLabel(MATHML_CONTENT));
        item.getTranslations().getEsp().getTable().getRows().forEach(row -> {
            row.getCells().forEach(cell -> {
                if (cell.isLabel()) {
                    cell.setValue(MATHML_CONTENT);
                }
            });
        });

        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        TiItem migratedItem = (TiItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getCore().getScoring().getRubric().contains(UPDATED_MATHML));
        assert(migratedItem.getCore().getEn().getTable().getTitle().contains(UPDATED_MATHML));
        item.getCore().getEn().getTable().getColumns().forEach(column -> {
            assert(column.getLabel().contains(UPDATED_MATHML));
        });
        item.getCore().getEn().getTable().getRows().forEach(row -> {
            row.getCells().forEach(cell ->  {
                assert !cell.isLabel() || (((String) cell.getValue()).contains(UPDATED_MATHML));
            });
        });

        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
        assert(migratedItem.getTranslations().getEsp().getTable().getTitle().contains(UPDATED_MATHML));
        item.getTranslations().getEsp().getTable().getColumns().forEach(column -> {
            assert(column.getLabel().contains(UPDATED_MATHML));
        });
        item.getTranslations().getEsp().getTable().getRows().forEach(row -> {
            row.getCells().forEach(cell ->  {
                assert !cell.isLabel() || (((String) cell.getValue()).contains(UPDATED_MATHML));
            });
        });
    }

    @Test
    public void shouldUpdateMathMlOnWerItem() throws IOException {
        ItemEntity entity = new ItemEntity("123", "master");
        WerItem item = new WerItem("123");
        item.getCore().getEn().setPrompt(MATHML_CONTENT);
        item.getCore().getEn().setExemplarResponses(Arrays.asList(MATHML_CONTENT, MATHML_CONTENT, MATHML_CONTENT));
        item.getCore().getEn().setRubric(MATHML_CONTENT);
        item.getTranslations().getEsp().setPrompt(MATHML_CONTENT);
        item.getTranslations().getEsp().setExemplarResponses(Arrays.asList(MATHML_CONTENT, MATHML_CONTENT, MATHML_CONTENT));
        entity.setItemJson(item);

        ItemEntity migratedEntity = getMigratedItemEntity(entity);

        WerItem migratedItem = (WerItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getCore().getEn().getExemplarResponses().forEach(value -> {
            assert(value.contains(UPDATED_MATHML));
        });
        migratedItem.getCore().getEn().getRubric().contains(UPDATED_MATHML);

        assert(migratedItem.getTranslations().getEsp().getPrompt().contains(UPDATED_MATHML));
        migratedItem.getTranslations().getEsp().getExemplarResponses().forEach(value -> {
            assert(value.contains(UPDATED_MATHML));
        });
    }


    private ItemEntity getMigratedItemEntity(ItemEntity itemEntity) throws IOException {
        ImportItem importItem = TestUtil.getNewImportItemForCommandTesting(MATHML_CONTENT);

        when(migrationFileUtil.getImportItem(itemEntity)).thenReturn(Optional.of(importItem));

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);

        return migration.migrateEntity(itemEntity, migrationContext);
    }
}