package org.opentestsystem.ap.migration.migration;


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.saaif.mapper.model.ImportItem;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.TestUtil;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import java.io.IOException;
import java.util.Optional;

import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration3270Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration3270 migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        when(applicationDependencyProvider.getContentUpdaterFactory()).thenReturn(new ContentUpdaterFactory());

        migration = new Migration3270(applicationDependencyProvider, applicationProperties, dataManager,
                dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }


    @Test
    public void shouldUpdateMathMlOnEbsrItem() throws IOException {
        final String sampleStemContent = "<p><span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"1\">Enter</span> the unknown number to make the equation <span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"2\">true</span>.<br /><br /><span class=\"iat-text2speech\" data-iat-tts=\"6 hundred 89 divided by 4 equals, open parenthesis, 4 hundred divided by 4, closed parenthesis, plus, open parenthesis, 2 hundred divided by 4, closed parenthesis, plus, open parenthesis, box divided by 4, closed parenthesis, plus, open parenthesis, 9 divided by 4, closed parenthesis.  From left to right and top to bottom, the equation tool reeds, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, point, box over box.\"><math xmlns:math=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>689</mn><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn><mrow><mi /><mo stretchy=\"false\">=</mo><mi /></mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>400</mn><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi /><mo stretchy=\"false\">+</mo><mi /></mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>200</mn><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi /><mo stretchy=\"false\">+</mo><mi /></mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>□</mi><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi /><mo stretchy=\"false\">+</mo><mi /></mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>9</mn><mrow><mi /><mo stretchy=\"false\">÷</mo><mi /></mrow><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"StarMath 5.0\">689`div`4`=`(400`div`4)`+`(200`div`4)`+`(□`div`4)`+`(9`div`4)</annotation></semantics></math> </span></p>";

        ItemEntity entity = new ItemEntity("123", "master");
        EbsrItem item = new EbsrItem("123");
        item.getCore().getEn().setPrompt(sampleStemContent);
        entity.setItemJson(item);

        ImportItem importItem = TestUtil.getNewImportItemForCommandTesting(sampleStemContent);

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.of(importItem));

        MigrationContext migrationContext = new MigrationContext("1", new ApplicationProperties.MigrationDefinition(), importItem);

        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        EbsrItem migratedItem = (EbsrItem) migratedEntity.getItemJson();

        assert(migratedItem.getCore().getEn()
                .getPrompt().contains("<mi mathvariant=\"normal\">"));

    }

}
