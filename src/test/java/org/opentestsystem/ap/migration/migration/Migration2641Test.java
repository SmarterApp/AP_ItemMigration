package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.migration.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.ImportItem;
import org.opentestsystem.ap.migration.model.ItemProps;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;

import java.io.IOException;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2641Test {

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private GitLabSyncManager gitLabSyncManager;

    private Migration2641 migration;

    @Before
    public void setUp() {
        when(applicationDependencyProvider.getItemBankSyncManager()).thenReturn(gitLabSyncManager);
        when(applicationDependencyProvider.getMigrationFileUtil()).thenReturn(migrationFileUtil);
        migration = new Migration2641(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, applicationDependencyProvider);
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowNotStimType() {
        EbsrItem item = new EbsrItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(item);

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition);
        migration.migrateEntity(entity, migrationContext);
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowIfImportFilesCannotBeFound() {
        StimItem item = new StimItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(item);

        when(migrationFileUtil.getImportItem(entity)).thenReturn(Optional.empty());

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition);
        migration.migrateEntity(entity, migrationContext);
    }

    @Test
    public void shouldImportPassage() throws IOException {
        StimItem item = new StimItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        item.getCore().getEn().setContent("<p>this is some content</p>");
        item.getTranslations().getEsp().setContent("<p>this is some spanish content</p>");
        entity.setItemJson(item);

        ItemRelease itemRelease = new ItemRelease();
        itemRelease.setItem(new ItemRelease.Item());

        ItemRelease.Passage passage = new ItemRelease.Passage();
        ItemRelease.Passage.Content enContent = new ItemRelease.Passage.Content();
        enContent.setLanguage(ItemConstants.ItemLanguage.LANG_ENU);
        enContent.setTitle("South Pole <span id=\"passage_489_TAG_1_BEGIN\">Expedition</span>");

        ItemRelease.Passage.Content espContent = new ItemRelease.Passage.Content();
        espContent.setTitle("Expedición al Polo Sur<p class=\"languagedivider\">&#xA0;</p>South Pole <span id=\"passage_489_TAG_1_BEGIN\">Expedition</span>");
        espContent.setLanguage(ItemConstants.ItemLanguage.LANG_ESN);

        passage.getContent().addAll(Arrays.asList(enContent, espContent));
        itemRelease.setPassage(passage);

        ImportItem importItem = new ImportItem();
        ItemProps itemProps = new ItemProps();
        SmarterAppMetadata metadata = new SmarterAppMetadata();
        metadata.setSubject("math");

        importItem.setItemProps(itemProps);
        importItem.setItemRelease(itemRelease);
        importItem.setSmarterAppMetadata(metadata);
        importItem.setExpandedImportItemPath(Files.createTempDirectory("Migration2641-test"));
        importItem.setItemImportSourcePath(Files.createTempDirectory("Migration2641-testSrc"));

        ApplicationProperties.MigrationDefinition migrationDefinition = new ApplicationProperties.MigrationDefinition();
        migrationDefinition.setRequiresImportFiles(true);
        MigrationContext migrationContext = new MigrationContext("", migrationDefinition, importItem);
        ItemEntity migratedEntity = migration.migrateEntity(entity, migrationContext);

        StimItem stim = (StimItem) migratedEntity.getItemJson();

        assertThat(stim.getCore().getEn().getContent()).contains("South Pole");
        assertThat(stim.getTranslations().getEsp().getContent()).contains("Expedición al Polo Sur");
    }
}