package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.mapper.IatModelMapper;
import org.opentestsystem.ap.migration.model.SkipMigration;
import org.opentestsystem.ap.migration.util.MigrationFileUtil;

import java.util.Optional;

import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class Migration2641Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private MigrationFileUtil migrationFileUtil;

    @Mock
    private IatModelMapper iatModelMapperFactory;

    private Migration2641 migration;

    @Before
    public void setUp() {
        migration = new Migration2641(applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager, migrationFileUtil, iatModelMapperFactory);
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowNotStimType() {
        EbsrItem item = new EbsrItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(item);

        migration.migrateEntity(entity);
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowIfImportFilesCannotBeFound() {
        StimItem item = new StimItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(item);

        when(migrationFileUtil.getImportedItemRelease(entity)).thenReturn(Optional.empty());

        migration.migrateEntity(entity);
    }

    @Test(expected = SkipMigration.class)
    public void shouldThrowIfImportDoesNotHavePassage() {
        StimItem item = new StimItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(item);

        ItemRelease itemRelease = new ItemRelease();
        itemRelease.setItem(new ItemRelease.Item());

        when(migrationFileUtil.getImportedItemRelease(entity)).thenReturn(Optional.of(itemRelease));

        migration.migrateEntity(entity);
    }
}