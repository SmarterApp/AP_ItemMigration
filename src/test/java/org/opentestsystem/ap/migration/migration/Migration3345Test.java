package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class Migration3345Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private MigrationContext migrationContext;

    private Migration3345 migration3345;

    @Before
    public void setUp() {
        migration3345 = new Migration3345(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test(expected = SkipMigration.class)
    public void shouldIgnoreUnsupportedItems() {
        StimItem stimItem = new StimItem("123");
        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(stimItem);

        ItemEntity migratedEntity = migration3345.migrateEntity(itemEntity, migrationContext);

        assertThat(migratedEntity).isEqualTo(itemEntity);

        assertThat(migratedEntity.getItemJson().getSaaif().getEax()).isNull();
        assertThat(migratedEntity.getItemJson().getSaaif().getQrx()).isNull();
    }

    @Test
    public void shouldMigrateGiItem() {
        GiItem importedGiItem = new GiItem("123");
        importedGiItem.getCore().getScoring().setMachineScoringManagedByIat(false);
        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(importedGiItem);

        ItemEntity migratedEntity = migration3345.migrateEntity(itemEntity, migrationContext);

        assertThat(migratedEntity).isEqualTo(itemEntity);

        assertThat(migratedEntity.getItemJson().getSaaif().getEax()).isNull();
        assertThat(migratedEntity.getItemJson().getSaaif().getQrx().getFileName()).isEqualTo(RepositoryUtil.getQrxFileName("123"));
    }

    @Test(expected = SkipMigration.class)
    public void shouldIgnoreGiItemCreatedInTims() {
        GiItem importedGiItem = new GiItem("200111");
        importedGiItem.getCore().getScoring().setMachineScoringManagedByIat(false);
        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(importedGiItem);

        ItemEntity migratedEntity = migration3345.migrateEntity(itemEntity, migrationContext);

        assertThat(migratedEntity).isEqualTo(itemEntity);

        assertThat(migratedEntity.getItemJson().getSaaif().getEax()).isNull();
        assertThat(migratedEntity.getItemJson().getSaaif().getQrx()).isNull();
    }

    @Test
    public void shouldMigrateTiItem() {
        TiItem importedTiItem = new TiItem("123");
        importedTiItem.getCore().getScoring().setMachineScoringManagedByIat(false);
        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(importedTiItem);

        ItemEntity migratedEntity = migration3345.migrateEntity(itemEntity, migrationContext);

        assertThat(migratedEntity).isEqualTo(itemEntity);

        assertThat(migratedEntity.getItemJson().getSaaif().getEax()).isNull();
        assertThat(migratedEntity.getItemJson().getSaaif().getQrx().getFileName()).isEqualTo(RepositoryUtil.getQrxFileName("123"));
    }

    @Test
    public void shouldMigrateHtqsItem() {
        HtqsItem importedHtqsItem = new HtqsItem("123");
        importedHtqsItem.getCore().getEn().setManagedByIat(false);
        importedHtqsItem.getCore().getEn().getHtqSelectable().setManagedByIat(false);
        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(importedHtqsItem);

        ItemEntity migratedEntity = migration3345.migrateEntity(itemEntity, migrationContext);

        assertThat(migratedEntity).isEqualTo(itemEntity);

        assertThat(migratedEntity.getItemJson().getSaaif().getEax()).isNull();
        assertThat(migratedEntity.getItemJson().getSaaif().getQrx().getFileName()).isEqualTo(RepositoryUtil.getQrxFileName("123"));
    }

    @Test
    public void shouldMigrateEqItem() {
        EqItem importedEqItem = new EqItem("123");
        importedEqItem.getCore().getScoring().setMachineScoringManagedByIat(false);
        importedEqItem.getCore().getEquationEditorConfiguration().setManagedByIat(false);
        ItemEntity itemEntity = new ItemEntity("123", "master");
        itemEntity.setItemJson(importedEqItem);

        ItemEntity migratedEntity = migration3345.migrateEntity(itemEntity, migrationContext);

        assertThat(migratedEntity).isEqualTo(itemEntity);

        assertThat(migratedEntity.getItemJson().getSaaif().getEax().getFileName()).isEqualTo(RepositoryUtil.getEaxFileName("123"));
        assertThat(migratedEntity.getItemJson().getSaaif().getQrx().getFileName()).isEqualTo(RepositoryUtil.getQrxFileName("123"));
    }
}