package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Asl;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_ASL;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_BRAILLE;

@RunWith(MockitoJUnitRunner.class)
public class Migration2788Test {

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2788 migration;

    @Before
    public void setup() {
        migration = new Migration2788(
            applicationDependencyProvider,
            applicationProperties,
            dataManager,
            dataStoreItemManager,
            dataStoreUtility,
            dataStoreAttachmentManager);
    }

    @Test
    public void testShouldMigrateBranchTrue() {
        Asl asl = new Asl();
        asl.addAttachment("asl_file");

        Item item = Mockito.mock(Item.class);
        when(item.getAsl()).thenReturn(asl);

        ItemEntity entity = new ItemEntity();
        entity.setBranchName(BRANCH_MASTER);
        entity.setItemJson(item);

        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();

        asl.getAttachments().clear();
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();

        asl.addAttachment("asl_file");
        assertThat(this.migration.shouldMigrateBranch(entity)).isTrue();

        entity.setBranchName(SECTION_ASL);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();

        entity.setBranchName(SECTION_BRAILLE);
        assertThat(this.migration.shouldMigrateBranch(entity)).isFalse();
    }
}
