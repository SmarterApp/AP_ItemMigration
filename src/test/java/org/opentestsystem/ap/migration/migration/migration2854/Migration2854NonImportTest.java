package org.opentestsystem.ap.migration.migration.migration2854;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class Migration2854NonImportTest {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private ItemManagerEventProducer eventProducer;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    private Migration2854NonImport migration;

    @Before
    public void setUp() {
        migration = new Migration2854NonImport(applicationDependencyProvider, applicationProperties, dataManager, eventProducer, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test(expected = SkipMigration.class)
    public void shouldIgnoreStimuli() {
        StimItem stim = new StimItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(stim);

        migration.migrateEntity(entity, new MigrationContext("set", new ApplicationProperties.MigrationDefinition()));
    }

    @Test(expected = SkipMigration.class)
    public void shouldIgnoreTutorial() {
        TutItem stim = new TutItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(stim);

        migration.migrateEntity(entity, new MigrationContext("set", new ApplicationProperties.MigrationDefinition()));
    }

    @Test(expected = SkipMigration.class)
    public void shouldIgnoreItemsWithoutEnemyItems() {
        SaItem saItem = new SaItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(saItem);

        migration.migrateEntity(entity, new MigrationContext("set", new ApplicationProperties.MigrationDefinition()));
    }


    public void shouldMigrateEnemyItem() {
        SaItem saItem = new SaItem("123");
        ItemEntity entity = new ItemEntity("123", "master");
        entity.setItemJson(saItem);

        ItemEntity migratedItem = migration.migrateEntity(entity, new MigrationContext("set", new ApplicationProperties.MigrationDefinition()));

        assertThat(migratedItem).isEqualTo(entity);
    }
}