package org.opentestsystem.ap.migration.migration;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdater;
import org.opentestsystem.ap.migration.contentupdater.ContentUpdaterFactory;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ModelConstants.BranchNames.BRANCH_MASTER;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_ASL;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_AUDIO;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_BRAILLE;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CC;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_GLOSSARY;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_IMAGES;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_METADATA;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_REVIEW;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_TEXTTOSPEECH;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_TRANSLATIONS;

@RunWith(MockitoJUnitRunner.class)
public class Migration3246Test {

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ContentUpdaterFactory contentUpdaterFactory;

    @Mock
    private ContentUpdater contentUpdater;

    private Migration3246 migration;

    @Before
    public void setup() {
        when(this.applicationDependencyProvider.getContentUpdaterFactory()).thenReturn(this.contentUpdaterFactory);



        this.migration = new Migration3246(
            applicationDependencyProvider,
            applicationProperties,
            dataManager,
            dataStoreItemManager,
            dataStoreUtility,
            dataStoreAttachmentManager);
    }

    @Test
    public void testShouldSkipMigration() {
        Item item = mock(Item.class);
        when(item.isImported()).thenReturn(false);

        ItemEntity entity = mock(ItemEntity.class);
        when(entity.getItemId()).thenReturn("200000");
        when(entity.getItemJson()).thenReturn(item);

        try {
            this.migration.migrateEntity(entity, null);
            Assert.fail("expected skip migration exception");
        } catch (SkipMigration e) {
            assertThat(e.getMessage()).isEqualTo("item 200000 is not imported");
        }
    }

    @Test
    public void testShouldNotSkipMigration() {
        when(this.contentUpdaterFactory.getContentUpdaterForType(TYPE_SA)).thenReturn(this.contentUpdater);

        final ArgumentCaptor<Item> itemArgumentCaptor = ArgumentCaptor.forClass(Item.class);

        Item item = mock(Item.class);
        when(item.getType()).thenReturn(TYPE_SA);
        when(item.isImported()).thenReturn(true);

        ItemEntity entity = mock(ItemEntity.class);
        when(entity.getItemJson()).thenReturn(item);

        this.migration.migrateEntity(entity, null);

        verify(contentUpdater).updateContent(
            itemArgumentCaptor.capture(), Mockito.any(Migration3246.Migration3246Command.class));
    }

    @Test
    public void testShouldMigrateBranch() {
        this.assertShouldMigrateBranch(null, false);
        this.assertShouldMigrateBranch(SECTION_ASL, false);
        this.assertShouldMigrateBranch(SECTION_AUDIO, false);
        this.assertShouldMigrateBranch(SECTION_BRAILLE, false);
        this.assertShouldMigrateBranch(SECTION_CC, false);
        this.assertShouldMigrateBranch(SECTION_GLOSSARY, false);
        this.assertShouldMigrateBranch(SECTION_IMAGES, false);
        this.assertShouldMigrateBranch(SECTION_METADATA, false);
        this.assertShouldMigrateBranch(SECTION_REVIEW, false);
        this.assertShouldMigrateBranch(SECTION_TEXTTOSPEECH, false);
        this.assertShouldMigrateBranch(BRANCH_MASTER, true);
        this.assertShouldMigrateBranch(SECTION_CORE, true);
        this.assertShouldMigrateBranch(SECTION_TRANSLATIONS, true);
    }

    void assertShouldMigrateBranch(String branch, boolean expected) {
        ItemEntity entity = new ItemEntity();
        entity.setBranchName(branch);
        assertThat(this.migration.shouldMigrateBranch(entity)).isEqualTo(expected);
    }

    @Test
    public void testShouldProcess() {
        Migration3246.Migration3246Command command = new Migration3246.Migration3246Command();
        assertThat(command.shouldProcess("<span style=\"\">abc</span>")).isFalse();
        assertThat(command.shouldProcess(
            "<span style=\"text-align:center;color:;font-size:1.0000em;font-family:Verdana;\">abc</span>")).isFalse();
        assertThat(command.shouldProcess("<span style=\"text-decoration:overline;\">abc</span>")).isFalse();
        assertThat(command.shouldProcess("<span style=\"font-weight:normal;\">abc</span>")).isFalse();
        assertThat(command.shouldProcess("<span style=\"font-style:oblique;\">abc</span>")).isFalse();

        assertThat(command.shouldProcess("<span style=\"font-weight:bold\">abc</span>")).isTrue();
        assertThat(command.shouldProcess("<span style=\"font-weight:bolder\">abc</span>")).isTrue();
        assertThat(command.shouldProcess("<span style=\"font-style:italic\">abc</span>")).isTrue();
        assertThat(command.shouldProcess("<span style=\"text-decoration:underline\">abc</span>")).isTrue();
        assertThat(command.shouldProcess("<span style=\"text-decoration : underline ;\">abc</span>")).isTrue();
    }

    @Test
    public void testFontWeightBold() {
        assertExpected(
            "<span style=\"font-weight:bold;\">d</span>",
            "<span style=\"\"><strong>d</strong></span>"
        );
        assertExpected(
            "<p style=\"font-weight:bold;\">d</p>",
            "<p style=\"\"><strong>d</strong></p>"
        );
        assertExpected(
            "<span style=\"font-weight:bold\">d</span>",
            "<span style=\"\"><strong>d</strong></span>"
        );
        assertExpected(
            "<p style=\"font-weight:bold\">d</p>",
            "<p style=\"\"><strong>d</strong></p>"
        );
        assertExpected(
            "<span style=\"font-weight : bold ; \">d</span>",
            "<span style=\"\"><strong>d</strong></span>"
        );
        assertExpected(
            "<p style=\"font-weight : bold ; \">d</p>",
            "<p style=\"\"><strong>d</strong></p>"
        );
        assertExpected(
            "<span style=\"text-align:center; color:; font-weight:bold;\">d</span>",
            "<span style=\"text-align:center;color:;\"><strong>d</strong></span>"
        );
        assertExpected(
            "<p style=\"text-align:center; color:; font-weight:bold;\">d</p>",
            "<p style=\"text-align:center;color:;\"><strong>d</strong></p>"
        );
        assertExpected(
            "<span style=\"text-align:center; color:;font-weight:bold;font-size:1.0000em; font-family:Verdana;\">d</span>",
            "<span style=\"text-align:center;color:;font-size:1.0000em;font-family:Verdana;\"><strong>d</strong></span>"
        );
        assertExpected(
            "<p style=\"text-align:center; color:;font-weight:bold;font-size:1.0000em; font-family:Verdana;\">d</p>",
            "<p style=\"text-align:center;color:;font-size:1.0000em;font-family:Verdana;\"><strong>d</strong></p>"
        );
    }

    @Test
    public void testFontStyleItalic() {
        assertExpected(
            "<span style=\"font-style:italic;\">d</span>",
            "<span style=\"\"><em>d</em></span>"
        );
        assertExpected(
            "<p style=\"font-style:italic;\">d</p>",
            "<p style=\"\"><em>d</em></p>"
        );
        assertExpected(
            "<span style=\"font-style : italic ; \">d</span>",
            "<span style=\"\"><em>d</em></span>"
        );
        assertExpected(
            "<p style=\"font-style : italic ; \">d</p>",
            "<p style=\"\"><em>d</em></p>"
        );
        assertExpected(
            "<span style=\"text-align:center; color:;font-style:italic\">d</span>",
            "<span style=\"text-align:center;color:;\"><em>d</em></span>"
        );
        assertExpected(
            "<p style=\"text-align:center; color:;font-style:italic\">d</p>",
            "<p style=\"text-align:center;color:;\"><em>d</em></p>"
        );
        assertExpected(
            "<span style=\"text-align:center; color:;font-style:italic;font-size:1.0000em; font-family:Verdana;\">d</span>",
            "<span style=\"text-align:center;color:;font-size:1.0000em;font-family:Verdana;\"><em>d</em></span>"
        );
        assertExpected(
            "<p style=\"text-align:center; color:;font-style:italic;font-size:1.0000em; font-family:Verdana;\">d</p>",
            "<p style=\"text-align:center;color:;font-size:1.0000em;font-family:Verdana;\"><em>d</em></p>"
        );
    }

    @Test
    public void testTextDecorationUnderline() {
        assertExpected(
            "<span style=\"text-decoration:underline;\">d</span>",
            "<span style=\"\"><u>d</u></span>"
        );
        assertExpected(
            "<p style=\"text-decoration:underline;\">d</p>",
            "<p style=\"\"><u>d</u></p>"
        );
        assertExpected(
            "<span style=\"text-decoration : underline ;\">d</span>",
            "<span style=\"\"><u>d</u></span>"
        );
        assertExpected(
            "<p style=\"text-decoration : underline ;\">d</p>",
            "<p style=\"\"><u>d</u></p>"
        );
        assertExpected(
            "<span style=\"text-align:center; color:;text-decoration:underline\">d</span>",
            "<span style=\"text-align:center;color:;\"><u>d</u></span>"
        );
        assertExpected(
            "<span style=\"text-align:center; color:;text-decoration:underline;font-size:1.0000em; font-family:Verdana;\">d</span>",
            "<span style=\"text-align:center;color:;font-size:1.0000em;font-family:Verdana;\"><u>d</u></span>"
        );
        assertExpected(
            "<p style=\"text-align:center; color:;text-decoration:underline;font-size:1.0000em; font-family:Verdana;\">d</p>",
            "<p style=\"text-align:center;color:;font-size:1.0000em;font-family:Verdana;\"><u>d</u></p>"
        );
    }


    @Test
    public void testSpanNestedInParagraph() {
        assertExpected(
            "<p style=\"font-weight:bold;\">Abc<span style=\"text-decoration:underline;font-style:italic;font-weight:bold;\">d</span>efg</p>",
            "<p style=\"\"><strong>Abc<span style=\"\"><u><em><strong>d</strong></em></u></span>efg</strong></p>"
        );
        assertExpected(
            "<p style=\"text-align:center; color:;font-weight:bold;text-decoration:underline;font-style:italic;;font-size:1.0000em; font-family:Verdana;\">Abc<span style=\"text-align:center; color:;font-weight:bold;text-decoration:underline;font-style:italic;;font-size:1.0000em; font-family:Verdana;\">d</span>efg</p>",
            "<p style=\"text-align:center;color:;;font-size:1.0000em;font-family:Verdana;\"><u><em><strong>Abc<span style=\"text-align:center;color:;;font-size:1.0000em;font-family:Verdana;\"><u><em><strong>d</strong></em></u></span>efg</strong></em></u></p>"
        );
    }

    private void assertExpected(String richTextContent, String expected) {
        Migration3246.Migration3246Command command = new Migration3246.Migration3246Command();
        String actual = command.applyEnglishContentUpdate(richTextContent);
        assertThat(actual).isEqualTo(expected);
    }
}