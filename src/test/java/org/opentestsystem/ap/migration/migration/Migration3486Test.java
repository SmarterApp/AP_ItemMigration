package org.opentestsystem.ap.migration.migration;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.mapper.model.SkipMigration;
import org.opentestsystem.ap.migration.ApplicationProperties;
import org.opentestsystem.ap.migration.model.MigrationContext;
import org.opentestsystem.ap.migration.util.ApplicationDependencyProvider;

import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class Migration3486Test {
    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private DataStoreDataManager dataManager;

    @Mock
    private DataStoreItemManager dataStoreItemManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private ApplicationDependencyProvider applicationDependencyProvider;

    @Mock
    private MigrationContext migrationContext;

    private Migration3486 migration;

    @Before
    public void setUp() {
        migration = new Migration3486(applicationDependencyProvider, applicationProperties, dataManager, dataStoreItemManager, dataStoreUtility, dataStoreAttachmentManager);
    }

    @Test
    public void shouldMigrateHtqsItem() {
        ItemEntity entity = new ItemEntity();
        HtqsItem htqsItem = new HtqsItem("1");
        htqsItem.getCore().getEn().getHtqSelectable().setManagedByIat(false);

        entity.setItemJson(htqsItem);

        assertThat(htqsItem.getSaaif().getQrx()).isNull();

        migration.migrateEntity(entity, migrationContext);

        assertThat(entity.getItemJson().getSaaif().getQrx().getFileName()).isEqualTo("Item_1_v11.qrx");
    }

    @Test(expected = SkipMigration.class)
    public void shouldSkipNonHtqsItem() {
        ItemEntity entity = new ItemEntity();
        entity.setItemJson(new SaItem("1"));
        migration.migrateEntity(entity, migrationContext);
    }
}