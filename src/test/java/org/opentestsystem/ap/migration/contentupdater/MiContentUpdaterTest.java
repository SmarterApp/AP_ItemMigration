package org.opentestsystem.ap.migration.contentupdater;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.Table;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemLanguage.LANG_ESN;
import static org.opentestsystem.ap.common.model.Table.CELL_TYPE_ANSWER;
import static org.opentestsystem.ap.common.model.Table.CELL_TYPE_LABEL;

@RunWith(MockitoJUnitRunner.class)
public class MiContentUpdaterTest {

    @Mock
    ContentUpdateCommand command;

    ContentUpdaterFactory factory;

    MiContentUpdater updater;

    MiItem item;

    @Before
    public void setUp() {
        factory = new ContentUpdaterFactory();
        updater = (MiContentUpdater) factory.getContentUpdaterForType(ModelConstants.ItemType.TYPE_MI);

        item = new MiItem("1234");
        item.getCore().getEn().setPrompt("prompt");

        item.getCore().getEn().getTable().getColumns().set(0, new Table.Column("tableColumn1"));
        item.getCore().getEn().getTable().getColumns().set(1, new Table.Column("tableColumn2"));

        item.getCore().getEn().getTable().getRows().set(0,
            new Table.Row(
                new Table.Cell<>(CELL_TYPE_LABEL, "cellLabel"),
                new Table.Cell<>(CELL_TYPE_ANSWER, "cellAnswer")));


        item.getTranslations().getEsp().setPrompt("s-prompt");


        item.getTranslations().getEsp().getTable().getColumns().set(0, new Table.Column("s-tableColumn1"));
        item.getTranslations().getEsp().getTable().getColumns().set(1, new Table.Column("s-tableColumn2"));
        item.getTranslations().getEsp().getTable().getRows().set(0,
            new Table.Row(
                new Table.Cell<>(CELL_TYPE_LABEL, "s-cellLabel"),
                new Table.Cell<>(CELL_TYPE_ANSWER, "s-cellAnswer")));
    }

    @Test
    public void updateEnglishContent() {
        when(command.applyContentUpdate("prompt")).thenReturn("prompt-APPLIED");
        when(command.applyContentUpdate("tableColumn1")).thenReturn("tableColumn1-APPLIED");
        when(command.applyContentUpdate("tableColumn2")).thenReturn("tableColumn2-APPLIED");
        when(command.applyContentUpdate("cellLabel")).thenReturn("cellLabel-APPLIED");
        when(command.applyContentUpdate("cellAnswer")).thenReturn("cellAnswer-APPLIED");

        updater.updateEnglishContent(item, command);

        assertThat(item.getCore().getEn().getPrompt()).isEqualTo("prompt-APPLIED");
        assertThat(item.getCore().getEn().getTable().getColumns().get(0).getLabel()).isEqualTo("tableColumn1-APPLIED");
        assertThat(item.getCore().getEn().getTable().getColumns().get(1).getLabel()).isEqualTo("tableColumn2-APPLIED");
        assertThat(item.getCore().getEn().getTable().getRows().get(0).getCells().get(0).getValue())
            .isEqualTo("cellLabel-APPLIED");
        // only cells of type 'label' are updated, answer/numeric answers should not change
        assertThat(item.getCore().getEn().getTable().getRows().get(0).getCells().get(1).getValue())
            .isEqualTo("cellAnswer");
    }

    @Test
    public void updateSpanishContent() {
        when(command.applyContentUpdate(LANG_ESN, "s-prompt", "prompt")).thenReturn("s-prompt-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-tableColumn1", "tableColumn1"))
            .thenReturn("s-tableColumn1-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-tableColumn2", "tableColumn2"))
            .thenReturn("s-tableColumn2-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-cellLabel", "cellLabel")).thenReturn("s-cellLabel-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-cellAnswer", "cellLabel")).thenReturn("s-cellAnswer-APPLIED");

        updater.updateSpanishContent(item, command);

        assertThat(item.getTranslations().getEsp().getPrompt()).isEqualTo("s-prompt-APPLIED");
        assertThat(item.getTranslations().getEsp().getTable().getColumns().get(0).getLabel())
            .isEqualTo("s-tableColumn1-APPLIED");
        assertThat(item.getTranslations().getEsp().getTable().getColumns().get(1).getLabel())
            .isEqualTo("s-tableColumn2-APPLIED");
        assertThat(item.getTranslations().getEsp().getTable().getRows().get(0).getCells().get(0).getValue())
            .isEqualTo("s-cellLabel-APPLIED");
        // only cells of type 'label' are updated, answer/numeric answers should not change
        assertThat(item.getTranslations().getEsp().getTable().getRows().get(0).getCells().get(1).getValue())
            .isEqualTo("s-cellAnswer");
    }
}