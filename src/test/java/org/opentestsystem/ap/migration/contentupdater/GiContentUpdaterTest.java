package org.opentestsystem.ap.migration.contentupdater;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.ItemConstants;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemLanguage.LANG_ESN;

@RunWith(MockitoJUnitRunner.class)
public class GiContentUpdaterTest {

    @Mock
    ContentUpdateCommand command;

    ContentUpdaterFactory factory;

    GiContentUpdater updater;

    GiItem item;

    @Before
    public void setUp() {
        factory = new ContentUpdaterFactory();
        updater = (GiContentUpdater) factory.getContentUpdaterForType(ItemConstants.ItemType.TYPE_GI);

        item = new GiItem("1234");
        item.getCore().getEn().setPrompt("prompt");
        item.getCore().getScoring().setRubric("rubric");

        item.getTranslations().getEsp().setPrompt("s-prompt");
    }

    @Test
    public void updateEnglishContent() {
        when(command.applyEnglishContentUpdate("prompt")).thenReturn("prompt-APPLIED");
        when(command.applyEnglishContentUpdate("rubric")).thenReturn("rubric-APPLIED");
        updater.updateEnglishContent(item, command);
        assertThat(item.getCore().getEn().getPrompt()).isEqualTo("prompt-APPLIED");
        assertThat(item.getCore().getScoring().getRubric()).isEqualTo("rubric-APPLIED");
    }

    @Test
    public void updateSpanishContent() {
        when(command.applyTranslatedContentUpdate(LANG_ESN, "s-prompt", "prompt")).thenReturn("s-prompt-APPLIED");
        updater.updateSpanishContent(item, command);
        assertThat(item.getTranslations().getEsp().getPrompt()).isEqualTo("s-prompt-APPLIED");
    }
}