package org.opentestsystem.ap.migration.contentupdater;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemOption;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemLanguage.LANG_ESN;

@RunWith(MockitoJUnitRunner.class)
public class EbsrContentUpdaterTest {

    @Mock
    ContentUpdateCommand command;

    ContentUpdaterFactory factory;

    EbsrContentUpdater updater;

    EbsrItem item;

    @Before
    public void setUp() {
        factory = new ContentUpdaterFactory();
        updater = (EbsrContentUpdater) factory.getContentUpdaterForType(ItemConstants.ItemType.TYPE_EBSR);

        item = new EbsrItem("1234");

        // english
        item.getCore().getEn().setPrompt("prompt");
        item.getCore().getEn().setPartAPrompt("partAPrompt");
        item.getCore().getEn().setPartBPrompt("partBPrompt");

        item.getCore().getEn().getPartAOptions().add(
            ItemOption.newItemOption(
                "partAItemOptionText", "1", true, "partAItemOptionRationale"));

        item.getCore().getEn().getPartBOptions().add(
            ItemOption.newItemOption(
                "partBItemOptionText", "1", true, "partBItemOptionRationale"));

        // spanish
        item.getTranslations().getEsp().setPrompt("s-prompt");
        item.getTranslations().getEsp().setPartAPrompt("s-partAPrompt");
        item.getTranslations().getEsp().setPartBPrompt("s-partBPrompt");

        item.getTranslations().getEsp().getPartAOptions().add(
            ItemOption.newItemOption(
                "s-partAItemOptionText", "1", true, "s-partAItemOptionRationale"));

        item.getTranslations().getEsp().getPartBOptions().add(
            ItemOption.newItemOption(
                "s-partBItemOptionText", "1", true, "s-partBItemOptionRationale"));
    }

    @Test
    public void updateEnglishContent() {
        when(command.applyContentUpdate("prompt")).thenReturn("prompt-APPLIED");
        when(command.applyContentUpdate("partAPrompt")).thenReturn("partAPrompt-APPLIED");
        when(command.applyContentUpdate("partBPrompt")).thenReturn("partBPrompt-APPLIED");
        when(command.applyContentUpdate("partAItemOptionText")).thenReturn("partAItemOptionText-APPLIED");
        when(command.applyContentUpdate("partAItemOptionRationale")).thenReturn("partAItemOptionRationale-APPLIED");
        when(command.applyContentUpdate("partBItemOptionText")).thenReturn("partBItemOptionText-APPLIED");
        when(command.applyContentUpdate("partBItemOptionRationale")).thenReturn("partBItemOptionRationale-APPLIED");

        item.getCore().getEn().setPrompt("prompt");
        item.getCore().getEn().setPartAPrompt("partAPrompt");
        item.getCore().getEn().setPartBPrompt("partBPrompt");

        item.getCore().getEn().getPartAOptions().add(
            ItemOption.newItemOption(
                "partAItemOptionText", "1", true, "partAItemOptionRationale"));

        item.getCore().getEn().getPartBOptions().add(
            ItemOption.newItemOption(
                "partBItemOptionText", "1", true, "partBItemOptionRationale"));

        updater.updateEnglishContent(item, command);

        assertThat(item.getCore().getEn().getPrompt()).isEqualTo("prompt-APPLIED");
        assertThat(item.getCore().getEn().getPartAPrompt()).isEqualTo("partAPrompt-APPLIED");
        assertThat(item.getCore().getEn().getPartBPrompt()).isEqualTo("partBPrompt-APPLIED");

        assertThat(item.getCore().getEn().getPartAOptions().get(0).getText()).isEqualTo("partAItemOptionText-APPLIED");
        assertThat(item.getCore().getEn().getPartAOptions().get(0).getRationale()).isEqualTo("partAItemOptionRationale-APPLIED");

        assertThat(item.getCore().getEn().getPartBOptions().get(0).getText()).isEqualTo("partBItemOptionText-APPLIED");
        assertThat(item.getCore().getEn().getPartBOptions().get(0).getRationale()).isEqualTo("partBItemOptionRationale-APPLIED");
    }

    @Test
    public void updateSpanishContent() {
        when(command.applyContentUpdate(LANG_ESN,"s-prompt", "prompt")).thenReturn("s-prompt-APPLIED");
        when(command.applyContentUpdate(LANG_ESN,"s-partAPrompt","partAPrompt")).thenReturn("s-partAPrompt-APPLIED");
        when(command.applyContentUpdate(LANG_ESN,"s-partBPrompt","partBPrompt")).thenReturn("s-partBPrompt-APPLIED");
        when(command.applyContentUpdate(LANG_ESN,"s-partAItemOptionText","partAItemOptionText")).thenReturn("s-partAItemOptionText-APPLIED");
        when(command.applyContentUpdate(LANG_ESN,"s-partAItemOptionRationale","partAItemOptionRationale")).thenReturn("s-partAItemOptionRationale-APPLIED");
        when(command.applyContentUpdate(LANG_ESN,"s-partBItemOptionText","partBItemOptionText")).thenReturn("s-partBItemOptionText-APPLIED");
        when(command.applyContentUpdate(LANG_ESN,"s-partBItemOptionRationale","partBItemOptionRationale")).thenReturn("s-partBItemOptionRationale-APPLIED");

        updater.updateSpanishContent(item, command);

        assertThat(item.getTranslations().getEsp().getPrompt()).isEqualTo("s-prompt-APPLIED");
        assertThat(item.getTranslations().getEsp().getPartAPrompt()).isEqualTo("s-partAPrompt-APPLIED");
        assertThat(item.getTranslations().getEsp().getPartBPrompt()).isEqualTo("s-partBPrompt-APPLIED");

        assertThat(item.getTranslations().getEsp().getPartAOptions().get(0).getText()).isEqualTo("s-partAItemOptionText-APPLIED");
        assertThat(item.getTranslations().getEsp().getPartAOptions().get(0).getRationale()).isEqualTo("s-partAItemOptionRationale-APPLIED");

        assertThat(item.getTranslations().getEsp().getPartBOptions().get(0).getText()).isEqualTo("s-partBItemOptionText-APPLIED");
        assertThat(item.getTranslations().getEsp().getPartBOptions().get(0).getRationale()).isEqualTo("s-partBItemOptionRationale-APPLIED");
    }
}