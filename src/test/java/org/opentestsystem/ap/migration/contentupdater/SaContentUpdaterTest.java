package org.opentestsystem.ap.migration.contentupdater;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.SaItem;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemLanguage.LANG_ESN;

@RunWith(MockitoJUnitRunner.class)
public class SaContentUpdaterTest {

    @Mock
    ContentUpdateCommand command;

    ContentUpdaterFactory factory;

    SaContentUpdater updater;

    SaItem item;

    @Before
    public void setUp() {
        factory = new ContentUpdaterFactory();
        updater = (SaContentUpdater) factory.getContentUpdaterForType(ModelConstants.ItemType.TYPE_SA);

        item = new SaItem("1234");
        item.getCore().getEn().setPrompt("prompt");
        item.getCore().getEn().getRubrics().add("rubric1");
        item.getCore().getEn().getRubrics().add("rubric2");
        item.getCore().getEn().getExemplarResponses().add("ex1");
        item.getCore().getEn().getExemplarResponses().add("ex2");

        item.getTranslations().getEsp().setPrompt("s-prompt");
        item.getTranslations().getEsp().getRubrics().add("s-rubric1");
        item.getTranslations().getEsp().getRubrics().add("s-rubric2");
        item.getTranslations().getEsp().getExemplarResponses().add("s-ex1");
        item.getTranslations().getEsp().getExemplarResponses().add("s-ex2");
    }

    @Test
    public void updateEnglishContent() {
        when(command.applyContentUpdate("prompt")).thenReturn("prompt-APPLIED");
        when(command.applyContentUpdate("rubric1")).thenReturn("rubric1-APPLIED");
        when(command.applyContentUpdate("rubric2")).thenReturn("rubric2-APPLIED");
        when(command.applyContentUpdate("ex1")).thenReturn("ex1-APPLIED");
        when(command.applyContentUpdate("ex2")).thenReturn("ex2-APPLIED");


        updater.updateEnglishContent(item, command);

        assertThat(item.getCore().getEn().getPrompt()).isEqualTo("prompt-APPLIED");
        assertThat(item.getCore().getEn().getRubrics().get(0)).isEqualTo("rubric1-APPLIED");
        assertThat(item.getCore().getEn().getRubrics().get(1)).isEqualTo("rubric2-APPLIED");
        assertThat(item.getCore().getEn().getExemplarResponses().get(0)).isEqualTo("ex1-APPLIED");
        assertThat(item.getCore().getEn().getExemplarResponses().get(1)).isEqualTo("ex2-APPLIED");
    }

    @Test
    public void updateSpanishContent() {
        when(command.applyContentUpdate(LANG_ESN, "s-prompt", "prompt")).thenReturn("s-prompt-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-rubric1", "rubric1")).thenReturn("s-rubric1-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-rubric2", "rubric2")).thenReturn("s-rubric2-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-ex1", "ex1")).thenReturn("s-ex1-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-ex2", "ex2")).thenReturn("s-ex2-APPLIED");

        updater.updateSpanishContent(item, command);

        assertThat(item.getTranslations().getEsp().getPrompt()).isEqualTo("s-prompt-APPLIED");
        assertThat(item.getTranslations().getEsp().getRubrics().get(0)).isEqualTo("s-rubric1-APPLIED");
        assertThat(item.getTranslations().getEsp().getRubrics().get(1)).isEqualTo("s-rubric2-APPLIED");
        assertThat(item.getTranslations().getEsp().getExemplarResponses().get(0)).isEqualTo("s-ex1-APPLIED");
        assertThat(item.getTranslations().getEsp().getExemplarResponses().get(1)).isEqualTo("s-ex2-APPLIED");
    }
}