package org.opentestsystem.ap.migration.contentupdater;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.MsItem;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemLanguage.LANG_ESN;

@RunWith(MockitoJUnitRunner.class)
public class MsContentUpdaterTest {

    @Mock
    ContentUpdateCommand command;

    ContentUpdaterFactory factory;

    MsContentUpdater updater;

    MsItem item;

    @Before
    public void setUp() {
        factory = new ContentUpdaterFactory();
        updater = (MsContentUpdater) factory.getContentUpdaterForType(ModelConstants.ItemType.TYPE_MS);

        item = new MsItem("1234");
        item.getCore().getEn().setPrompt("prompt");

        item.getCore().getEn().getOptions().add(
            ItemOption.newItemOption(
                "optionText", "1", true, "optionRationale"));

        item.getTranslations().getEsp().setPrompt("s-prompt");
        item.getTranslations().getEsp().getOptions().add(
            ItemOption.newItemOption(
                "s-optionText", "1", true, "s-optionRationale"));
    }

    @Test
    public void updateEnglishContent() {
        when(command.applyContentUpdate("prompt")).thenReturn("prompt-APPLIED");
        when(command.applyContentUpdate("optionText")).thenReturn("optionText-APPLIED");
        when(command.applyContentUpdate("optionRationale")).thenReturn("optionRationale-APPLIED");

        updater.updateEnglishContent(item, command);

        assertThat(item.getCore().getEn().getPrompt()).isEqualTo("prompt-APPLIED");
        assertThat(item.getCore().getEn().getOptions().get(0).getText()).isEqualTo("optionText-APPLIED");
        assertThat(item.getCore().getEn().getOptions().get(0).getRationale()).isEqualTo("optionRationale-APPLIED");
    }

    @Test
    public void updateSpanishContent() {
        when(command.applyContentUpdate(LANG_ESN, "s-prompt", "prompt")).thenReturn("s-prompt-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-optionText", "optionText")).thenReturn("s-optionText-APPLIED");
        when(command.applyContentUpdate(LANG_ESN, "s-optionRationale", "optionRationale"))
            .thenReturn("s-optionRationale-APPLIED");

        updater.updateSpanishContent(item, command);

        assertThat(item.getTranslations().getEsp().getPrompt()).isEqualTo("s-prompt-APPLIED");
        assertThat(item.getTranslations().getEsp().getOptions().get(0).getText()).isEqualTo("s-optionText-APPLIED");
        assertThat(item.getTranslations().getEsp().getOptions().get(0).getRationale())
            .isEqualTo("s-optionRationale-APPLIED");
    }
}